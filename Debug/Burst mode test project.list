
Burst mode test project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed4  08005ed4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ed4  08005ed4  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ed4  08005ed4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005edc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000334  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001215d  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f5  00000000  00000000  00019199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0001b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d96  00000000  00000000  0001c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002197d  00000000  00000000  0001d376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140a9  00000000  00000000  0003ecf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d992f  00000000  00000000  00052d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c6cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b10  00000000  00000000  0012c710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00131220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e8c 	.word	0x08005e8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e8c 	.word	0x08005e8c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ffa6 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f828 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fc0e 	bl	80009f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 fbe6 	bl	80009a8 <MX_DMA_Init>
  MX_CAN_Init();
 80001dc:	f000 f9b4 	bl	8000548 <MX_CAN_Init>
  MX_ADC1_Init();
 80001e0:	f000 f87e 	bl	80002e0 <MX_ADC1_Init>
  MX_TIM15_Init();
 80001e4:	f000 fb68 	bl	80008b8 <MX_TIM15_Init>
  MX_TIM3_Init();
 80001e8:	f000 faf0 	bl	80007cc <MX_TIM3_Init>
  MX_ADC2_Init();
 80001ec:	f000 f93e 	bl	800046c <MX_ADC2_Init>
  MX_HRTIM1_Init();
 80001f0:	f000 f9e0 	bl	80005b4 <MX_HRTIM1_Init>
  MX_TIM16_Init();
 80001f4:	f000 fbb2 	bl	800095c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_MASTER);
 80001f8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80001fc:	4808      	ldr	r0, [pc, #32]	@ (8000220 <main+0x58>)
 80001fe:	f002 ff0a 	bl	8003016 <HAL_HRTIM_WaveformCountStart>

    HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 8000202:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000206:	4806      	ldr	r0, [pc, #24]	@ (8000220 <main+0x58>)
 8000208:	f002 ff05 	bl	8003016 <HAL_HRTIM_WaveformCountStart>
    HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 800020c:	2103      	movs	r1, #3
 800020e:	4804      	ldr	r0, [pc, #16]	@ (8000220 <main+0x58>)
 8000210:	f002 fed4 	bl	8002fbc <HAL_HRTIM_WaveformOutputStart>
    HAL_HRTIM_BurstModeCtl(&hhrtim1, HRTIM_BURSTMODECTL_ENABLED);
 8000214:	2101      	movs	r1, #1
 8000216:	4802      	ldr	r0, [pc, #8]	@ (8000220 <main+0x58>)
 8000218:	f002 ff28 	bl	800306c <HAL_HRTIM_BurstModeCtl>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	bf00      	nop
 800021e:	e7fd      	b.n	800021c <main+0x54>
 8000220:	20000178 	.word	0x20000178

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b096      	sub	sp, #88	@ 0x58
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f005 fdfe 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 031c 	add.w	r3, r7, #28
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	463b      	mov	r3, r7
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800026e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000272:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000278:	4618      	mov	r0, r3
 800027a:	f003 fa7d 	bl	8003778 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000284:	f000 fc2a 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000298:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029e:	f107 031c 	add.w	r3, r7, #28
 80002a2:	2102      	movs	r1, #2
 80002a4:	4618      	mov	r0, r3
 80002a6:	f004 faa5 	bl	80047f4 <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002b0:	f000 fc14 	bl	8000adc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 80002b4:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80002b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 80002c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	4618      	mov	r0, r3
 80002ca:	f004 fc63 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002d4:	f000 fc02 	bl	8000adc <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3758      	adds	r7, #88	@ 0x58
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	@ 0x28
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000302:	4b59      	ldr	r3, [pc, #356]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000304:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030a:	4b57      	ldr	r3, [pc, #348]	@ (8000468 <MX_ADC1_Init+0x188>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000310:	4b55      	ldr	r3, [pc, #340]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000316:	4b54      	ldr	r3, [pc, #336]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000318:	2201      	movs	r2, #1
 800031a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800031c:	4b52      	ldr	r3, [pc, #328]	@ (8000468 <MX_ADC1_Init+0x188>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b51      	ldr	r3, [pc, #324]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000324:	2200      	movs	r2, #0
 8000326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800032a:	4b4f      	ldr	r3, [pc, #316]	@ (8000468 <MX_ADC1_Init+0x188>)
 800032c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000330:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000332:	4b4d      	ldr	r3, [pc, #308]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000334:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8000338:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033a:	4b4b      	ldr	r3, [pc, #300]	@ (8000468 <MX_ADC1_Init+0x188>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000340:	4b49      	ldr	r3, [pc, #292]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000342:	2207      	movs	r2, #7
 8000344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000346:	4b48      	ldr	r3, [pc, #288]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000348:	2201      	movs	r2, #1
 800034a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800034e:	4b46      	ldr	r3, [pc, #280]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000350:	2208      	movs	r2, #8
 8000352:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000354:	4b44      	ldr	r3, [pc, #272]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000356:	2200      	movs	r2, #0
 8000358:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800035a:	4b43      	ldr	r3, [pc, #268]	@ (8000468 <MX_ADC1_Init+0x188>)
 800035c:	2200      	movs	r2, #0
 800035e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000360:	4841      	ldr	r0, [pc, #260]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000362:	f000 ff41 	bl	80011e8 <HAL_ADC_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800036c:	f000 fbb6 	bl	8000adc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000370:	2300      	movs	r3, #0
 8000372:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000374:	f107 031c 	add.w	r3, r7, #28
 8000378:	4619      	mov	r1, r3
 800037a:	483b      	ldr	r0, [pc, #236]	@ (8000468 <MX_ADC1_Init+0x188>)
 800037c:	f001 fb84 	bl	8001a88 <HAL_ADCEx_MultiModeConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000386:	f000 fba9 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800038a:	2301      	movs	r3, #1
 800038c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038e:	2301      	movs	r3, #1
 8000390:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	4830      	ldr	r0, [pc, #192]	@ (8000468 <MX_ADC1_Init+0x188>)
 80003a8:	f001 f8b0 	bl	800150c <HAL_ADC_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80003b2:	f000 fb93 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003b6:	2302      	movs	r3, #2
 80003b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	4829      	ldr	r0, [pc, #164]	@ (8000468 <MX_ADC1_Init+0x188>)
 80003c4:	f001 f8a2 	bl	800150c <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80003ce:	f000 fb85 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003d2:	2303      	movs	r3, #3
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003d6:	2303      	movs	r3, #3
 80003d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4822      	ldr	r0, [pc, #136]	@ (8000468 <MX_ADC1_Init+0x188>)
 80003e0:	f001 f894 	bl	800150c <HAL_ADC_ConfigChannel>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 80003ea:	f000 fb77 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003ee:	2304      	movs	r3, #4
 80003f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80003f2:	2304      	movs	r3, #4
 80003f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	481b      	ldr	r0, [pc, #108]	@ (8000468 <MX_ADC1_Init+0x188>)
 80003fc:	f001 f886 	bl	800150c <HAL_ADC_ConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000406:	f000 fb69 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800040a:	2306      	movs	r3, #6
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800040e:	2305      	movs	r3, #5
 8000410:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4814      	ldr	r0, [pc, #80]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000418:	f001 f878 	bl	800150c <HAL_ADC_ConfigChannel>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8000422:	f000 fb5b 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000426:	2307      	movs	r3, #7
 8000428:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800042a:	2306      	movs	r3, #6
 800042c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	480d      	ldr	r0, [pc, #52]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000434:	f001 f86a 	bl	800150c <HAL_ADC_ConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 800043e:	f000 fb4d 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000442:	2308      	movs	r3, #8
 8000444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000446:	2307      	movs	r3, #7
 8000448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	4806      	ldr	r0, [pc, #24]	@ (8000468 <MX_ADC1_Init+0x188>)
 8000450:	f001 f85c 	bl	800150c <HAL_ADC_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 800045a:	f000 fb3f 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	3728      	adds	r7, #40	@ 0x28
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000028 	.word	0x20000028

0800046c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000482:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <MX_ADC2_Init+0xd4>)
 8000484:	4a2f      	ldr	r2, [pc, #188]	@ (8000544 <MX_ADC2_Init+0xd8>)
 8000486:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000488:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <MX_ADC2_Init+0xd4>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800048e:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <MX_ADC2_Init+0xd4>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000494:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <MX_ADC2_Init+0xd4>)
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800049a:	4b29      	ldr	r3, [pc, #164]	@ (8000540 <MX_ADC2_Init+0xd4>)
 800049c:	2200      	movs	r2, #0
 800049e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004a0:	4b27      	ldr	r3, [pc, #156]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004a8:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 80004b0:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004b2:	f44f 7260 	mov.w	r2, #896	@ 0x380
 80004b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004ce:	2208      	movs	r2, #8
 80004d0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004d8:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004de:	4818      	ldr	r0, [pc, #96]	@ (8000540 <MX_ADC2_Init+0xd4>)
 80004e0:	f000 fe82 	bl	80011e8 <HAL_ADC_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 80004ea:	f000 faf7 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	480d      	ldr	r0, [pc, #52]	@ (8000540 <MX_ADC2_Init+0xd4>)
 800050c:	f000 fffe 	bl	800150c <HAL_ADC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000516:	f000 fae1 	bl	8000adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800051a:	2301      	movs	r3, #1
 800051c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800051e:	2302      	movs	r3, #2
 8000520:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000522:	463b      	mov	r3, r7
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	@ (8000540 <MX_ADC2_Init+0xd4>)
 8000528:	f000 fff0 	bl	800150c <HAL_ADC_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 8000532:	f000 fad3 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000078 	.word	0x20000078
 8000544:	50000100 	.word	0x50000100

08000548 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800054c:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_CAN_Init+0x64>)
 800054e:	4a18      	ldr	r2, [pc, #96]	@ (80005b0 <MX_CAN_Init+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000552:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <MX_CAN_Init+0x64>)
 8000554:	2204      	movs	r2, #4
 8000556:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_CAN_Init+0x64>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_CAN_Init+0x64>)
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_CAN_Init+0x64>)
 8000566:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800056a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_CAN_Init+0x64>)
 800056e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000572:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MX_CAN_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_CAN_Init+0x64>)
 800057c:	2200      	movs	r2, #0
 800057e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <MX_CAN_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_CAN_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <MX_CAN_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_CAN_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <MX_CAN_Init+0x64>)
 800059a:	f001 fba1 	bl	8001ce0 <HAL_CAN_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80005a4:	f000 fa9a 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000150 	.word	0x20000150
 80005b0:	40006400 	.word	0x40006400

080005b4 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a8      	sub	sp, #160	@ 0xa0
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_BurstModeCfgTypeDef pBurstModeCfg = {0};
 80005ba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	619a      	str	r2, [r3, #24]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80005ce:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	2254      	movs	r2, #84	@ 0x54
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f005 fc25 	bl	8005e34 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2220      	movs	r2, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 fc1f 	bl	8005e34 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80005f6:	4b73      	ldr	r3, [pc, #460]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 80005f8:	4a73      	ldr	r2, [pc, #460]	@ (80007c8 <MX_HRTIM1_Init+0x214>)
 80005fa:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80005fc:	4b71      	ldr	r3, [pc, #452]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000602:	4b70      	ldr	r3, [pc, #448]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000608:	486e      	ldr	r0, [pc, #440]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 800060a:	f002 fa43 	bl	8002a94 <HAL_HRTIM_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000614:	f000 fa62 	bl	8000adc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 8000618:	210c      	movs	r1, #12
 800061a:	486a      	ldr	r0, [pc, #424]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 800061c:	f002 fb06 	bl	8002c2c <HAL_HRTIM_DLLCalibrationStart>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000626:	f000 fa59 	bl	8000adc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 800062a:	210a      	movs	r1, #10
 800062c:	4865      	ldr	r0, [pc, #404]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 800062e:	f002 fb55 	bl	8002cdc <HAL_HRTIM_PollForDLLCalibration>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000638:	f000 fa50 	bl	8000adc <Error_Handler>
  }
  pBurstModeCfg.Mode = HRTIM_BURSTMODE_CONTINOUS;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pBurstModeCfg.ClockSource = HRTIM_BURSTMODECLOCKSOURCE_MASTER;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pBurstModeCfg.Prescaler = HRTIM_BURSTMODEPRESCALER_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pBurstModeCfg.PreloadEnable = HRIM_BURSTMODEPRELOAD_ENABLED;
 800064e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pBurstModeCfg.Trigger = HRTIM_BURSTMODETRIGGER_TIMERA_CMP1;
 8000656:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800065a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pBurstModeCfg.IdleDuration = 0x0000;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pBurstModeCfg.Period = 0x0001;
 8000664:	2301      	movs	r3, #1
 8000666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_BurstModeConfig(&hhrtim1, &pBurstModeCfg) != HAL_OK)
 800066a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800066e:	4619      	mov	r1, r3
 8000670:	4854      	ldr	r0, [pc, #336]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 8000672:	f002 fb8f 	bl	8002d94 <HAL_HRTIM_BurstModeConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_HRTIM1_Init+0xcc>
  {
    Error_Handler();
 800067c:	f000 fa2e 	bl	8000adc <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000680:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8000684:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV2;
 800068a:	2306      	movs	r3, #6
 800068c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800068e:	2308      	movs	r3, #8
 8000690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000694:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000698:	461a      	mov	r2, r3
 800069a:	2105      	movs	r1, #5
 800069c:	4849      	ldr	r0, [pc, #292]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 800069e:	f002 fb51 	bl	8002d44 <HAL_HRTIM_TimeBaseConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_HRTIM1_Init+0xf8>
  {
    Error_Handler();
 80006a8:	f000 fa18 	bl	8000adc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMASrcAddress = 0x0000;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMADstAddress = 0x0000;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMASize = 0x1;
 80006bc:	2301      	movs	r3, #1
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_ENABLED;
 80006c0:	2320      	movs	r3, #32
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80006d0:	2300      	movs	r3, #0
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80006dc:	2300      	movs	r3, #0
 80006de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	461a      	mov	r2, r3
 80006e6:	2105      	movs	r1, #5
 80006e8:	4836      	ldr	r0, [pc, #216]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 80006ea:	f002 fbc4 	bl	8002e76 <HAL_HRTIM_WaveformTimerConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_HRTIM1_Init+0x144>
  {
    Error_Handler();
 80006f4:	f000 f9f2 	bl	8000adc <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 80006f8:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 80006fc:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80006fe:	2300      	movs	r3, #0
 8000700:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000702:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000706:	461a      	mov	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	482e      	ldr	r0, [pc, #184]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 800070c:	f002 fb1a 	bl	8002d44 <HAL_HRTIM_TimeBaseConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_HRTIM1_Init+0x166>
  {
    Error_Handler();
 8000716:	f000 f9e1 	bl	8000adc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000722:	2300      	movs	r3, #0
 8000724:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800072a:	2300      	movs	r3, #0
 800072c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800072e:	2300      	movs	r3, #0
 8000730:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000732:	2300      	movs	r3, #0
 8000734:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800073a:	2300      	movs	r3, #0
 800073c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800073e:	2300      	movs	r3, #0
 8000740:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	461a      	mov	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	481e      	ldr	r0, [pc, #120]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 800074c:	f002 fb93 	bl	8002e76 <HAL_HRTIM_WaveformTimerConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_HRTIM1_Init+0x1a6>
  {
    Error_Handler();
 8000756:	f000 f9c1 	bl	8000adc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 800075e:	2308      	movs	r3, #8
 8000760:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1|HRTIM_OUTPUTRESET_MASTERPER;
 8000762:	2388      	movs	r3, #136	@ 0x88
 8000764:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_IDLE;
 8000766:	2304      	movs	r3, #4
 8000768:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800076a:	2308      	movs	r3, #8
 800076c:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	2201      	movs	r2, #1
 800077e:	2100      	movs	r1, #0
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 8000782:	f002 fbea 	bl	8002f5a <HAL_HRTIM_WaveformOutputConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_HRTIM1_Init+0x1dc>
  {
    Error_Handler();
 800078c:	f000 f9a6 	bl	8000adc <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2202      	movs	r2, #2
 80007a4:	2100      	movs	r1, #0
 80007a6:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 80007a8:	f002 fbd7 	bl	8002f5a <HAL_HRTIM_WaveformOutputConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_HRTIM1_Init+0x202>
  {
    Error_Handler();
 80007b2:	f000 f993 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80007b6:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <MX_HRTIM1_Init+0x210>)
 80007b8:	f000 fb40 	bl	8000e3c <HAL_HRTIM_MspPostInit>

}
 80007bc:	bf00      	nop
 80007be:	37a0      	adds	r7, #160	@ 0xa0
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000178 	.word	0x20000178
 80007c8:	40017400 	.word	0x40017400

080007cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	@ 0x38
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000800:	4a2c      	ldr	r2, [pc, #176]	@ (80008b4 <MX_TIM3_Init+0xe8>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000806:	220f      	movs	r2, #15
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000812:	2263      	movs	r2, #99	@ 0x63
 8000814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000822:	4823      	ldr	r0, [pc, #140]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000824:	f004 faec 	bl	8004e00 <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800082e:	f000 f955 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083c:	4619      	mov	r1, r3
 800083e:	481c      	ldr	r0, [pc, #112]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000840:	f004 fdac 	bl	800539c <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800084a:	f000 f947 	bl	8000adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084e:	4818      	ldr	r0, [pc, #96]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000850:	f004 fb2d 	bl	8004eae <HAL_TIM_PWM_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800085a:	f000 f93f 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800085e:	2310      	movs	r3, #16
 8000860:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 800086e:	f005 fa55 	bl	8005d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000878:	f000 f930 	bl	8000adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087c:	2360      	movs	r3, #96	@ 0x60
 800087e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000888:	2304      	movs	r3, #4
 800088a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	220c      	movs	r2, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 8000894:	f004 fc6e 	bl	8005174 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800089e:	f000 f91d 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <MX_TIM3_Init+0xe4>)
 80008a4:	f000 fb50 	bl	8000f48 <HAL_TIM_MspPostInit>

}
 80008a8:	bf00      	nop
 80008aa:	3738      	adds	r7, #56	@ 0x38
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000254 	.word	0x20000254
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000958 <MX_TIM15_Init+0xa0>)
 80008da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_TIM15_Init+0x9c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <MX_TIM15_Init+0x9c>)
 8000904:	f004 fa7c 	bl	8004e00 <HAL_TIM_Base_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800090e:	f000 f8e5 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000916:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	480d      	ldr	r0, [pc, #52]	@ (8000954 <MX_TIM15_Init+0x9c>)
 8000920:	f004 fd3c 	bl	800539c <HAL_TIM_ConfigClockSource>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800092a:	f000 f8d7 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800092e:	2320      	movs	r3, #32
 8000930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <MX_TIM15_Init+0x9c>)
 800093c:	f005 f9ee 	bl	8005d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000946:	f000 f8c9 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002a0 	.word	0x200002a0
 8000958:	40014000 	.word	0x40014000

0800095c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_TIM16_Init+0x44>)
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <MX_TIM16_Init+0x48>)
 8000964:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_TIM16_Init+0x44>)
 8000968:	223f      	movs	r2, #63	@ 0x3f
 800096a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_TIM16_Init+0x44>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_TIM16_Init+0x44>)
 8000974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000978:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_TIM16_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_TIM16_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_TIM16_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_TIM16_Init+0x44>)
 800098e:	f004 fa37 	bl	8004e00 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000998:	f000 f8a0 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200002ec 	.word	0x200002ec
 80009a4:	40014400 	.word	0x40014400

080009a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_DMA_Init+0x48>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <MX_DMA_Init+0x48>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_DMA_Init+0x48>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	200b      	movs	r0, #11
 80009cc:	f001 fd97 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d0:	200b      	movs	r0, #11
 80009d2:	f001 fdb0 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	200c      	movs	r0, #12
 80009dc:	f001 fd8f 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009e0:	200c      	movs	r0, #12
 80009e2:	f001 fda8 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b31      	ldr	r3, [pc, #196]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a30      	ldr	r2, [pc, #192]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a24      	ldr	r2, [pc, #144]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_GPIO_Init+0xdc>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PFC_CTRL_out_Pin|RLY_CTRL_output_Pin|GPIO_PIN_10|SD_OD_output_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f648 4108 	movw	r1, #35848	@ 0x8c08
 8000a70:	4818      	ldr	r0, [pc, #96]	@ (8000ad4 <MX_GPIO_Init+0xe0>)
 8000a72:	f001 fff7 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : pfc_status_Pin */
  GPIO_InitStruct.Pin = pfc_status_Pin;
 8000a76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pfc_status_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <MX_GPIO_Init+0xe0>)
 8000a8c:	f001 fe78 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFC_CTRL_out_Pin RLY_CTRL_output_Pin PC10 SD_OD_output_Pin */
  GPIO_InitStruct.Pin = PFC_CTRL_out_Pin|RLY_CTRL_output_Pin|GPIO_PIN_10|SD_OD_output_Pin;
 8000a90:	f648 4308 	movw	r3, #35848	@ 0x8c08
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <MX_GPIO_Init+0xe0>)
 8000aaa:	f001 fe69 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_GPIO_Init+0xe4>)
 8000ac4:	f001 fe5c 	bl	8002780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	@ 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000800 	.word	0x48000800
 8000ad8:	48000400 	.word	0x48000400

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_MspInit+0x44>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b2c <HAL_MspInit+0x44>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <HAL_MspInit+0x44>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <HAL_MspInit+0x44>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_MspInit+0x44>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b50:	d16e      	bne.n	8000c30 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b52:	4b67      	ldr	r3, [pc, #412]	@ (8000cf0 <HAL_ADC_MspInit+0x1c0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a65      	ldr	r2, [pc, #404]	@ (8000cf0 <HAL_ADC_MspInit+0x1c0>)
 8000b5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b5c:	4b64      	ldr	r3, [pc, #400]	@ (8000cf0 <HAL_ADC_MspInit+0x1c0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d10b      	bne.n	8000b7c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b64:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	4a62      	ldr	r2, [pc, #392]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	6153      	str	r3, [r2, #20]
 8000b70:	4b60      	ldr	r3, [pc, #384]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	4a5c      	ldr	r2, [pc, #368]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b86:	6153      	str	r3, [r2, #20]
 8000b88:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b57      	ldr	r3, [pc, #348]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	4a56      	ldr	r2, [pc, #344]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9e:	6153      	str	r3, [r2, #20]
 8000ba0:	4b54      	ldr	r3, [pc, #336]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EXT_TEMP_adc_input_Pin|DC_Vout_Trmnl_adc_input_Pin|AC_VSNS_adc_input_Pin;
 8000bac:	2307      	movs	r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	484e      	ldr	r0, [pc, #312]	@ (8000cf8 <HAL_ADC_MspInit+0x1c8>)
 8000bc0:	f001 fdde 	bl	8002780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_Vout_Monitor_adc_input_Pin|DC_Output_Current_adc_input_Pin|DC_Bus_Monitor_adc_input_Pin|V_DS_SR1_adc_input_Pin;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bda:	f001 fdd1 	bl	8002780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bde:	4b47      	ldr	r3, [pc, #284]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000be0:	4a47      	ldr	r2, [pc, #284]	@ (8000d00 <HAL_ADC_MspInit+0x1d0>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be4:	4b45      	ldr	r3, [pc, #276]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bea:	4b44      	ldr	r3, [pc, #272]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf0:	4b42      	ldr	r3, [pc, #264]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf6:	4b41      	ldr	r3, [pc, #260]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c12:	483a      	ldr	r0, [pc, #232]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000c14:	f001 fca9 	bl	800256a <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8000c1e:	f7ff ff5d 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a35      	ldr	r2, [pc, #212]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c28:	4a34      	ldr	r2, [pc, #208]	@ (8000cfc <HAL_ADC_MspInit+0x1cc>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c2e:	e05a      	b.n	8000ce6 <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <HAL_ADC_MspInit+0x1d4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d155      	bne.n	8000ce6 <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <HAL_ADC_MspInit+0x1c0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <HAL_ADC_MspInit+0x1c0>)
 8000c42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c44:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <HAL_ADC_MspInit+0x1c0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10b      	bne.n	8000c64 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c4c:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a28      	ldr	r2, [pc, #160]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	6153      	str	r3, [r2, #20]
 8000c58:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6e:	6153      	str	r3, [r2, #20]
 8000c70:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <HAL_ADC_MspInit+0x1c4>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VDS_SR2_sensing_adc_input_Pin|GPIO_PIN_5;
 8000c7c:	2330      	movs	r3, #48	@ 0x30
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f001 fd75 	bl	8002780 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000c98:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <HAL_ADC_MspInit+0x1dc>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cbc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000cca:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000ccc:	f001 fc4d 	bl	800256a <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8000cd6:	f7ff ff01 	bl	8000adc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000cde:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ce0:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_ADC_MspInit+0x1d8>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	@ 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000338 	.word	0x20000338
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	200000c8 	.word	0x200000c8
 8000d00:	40020008 	.word	0x40020008
 8000d04:	50000100 	.word	0x50000100
 8000d08:	2000010c 	.word	0x2000010c
 8000d0c:	4002001c 	.word	0x4002001c

08000d10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a30      	ldr	r2, [pc, #192]	@ (8000df0 <HAL_CAN_MspInit+0xe0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d159      	bne.n	8000de6 <HAL_CAN_MspInit+0xd6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d32:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <HAL_CAN_MspInit+0xe4>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a2f      	ldr	r2, [pc, #188]	@ (8000df4 <HAL_CAN_MspInit+0xe4>)
 8000d38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <HAL_CAN_MspInit+0xe4>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <HAL_CAN_MspInit+0xe4>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a29      	ldr	r2, [pc, #164]	@ (8000df4 <HAL_CAN_MspInit+0xe4>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d54:	6153      	str	r3, [r2, #20]
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <HAL_CAN_MspInit+0xe4>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000d74:	2309      	movs	r3, #9
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481e      	ldr	r0, [pc, #120]	@ (8000df8 <HAL_CAN_MspInit+0xe8>)
 8000d80:	f001 fcfe 	bl	8002780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000d96:	2309      	movs	r3, #9
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4815      	ldr	r0, [pc, #84]	@ (8000df8 <HAL_CAN_MspInit+0xe8>)
 8000da2:	f001 fced 	bl	8002780 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2013      	movs	r0, #19
 8000dac:	f001 fba7 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8000db0:	2013      	movs	r0, #19
 8000db2:	f001 fbc0 	bl	8002536 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2014      	movs	r0, #20
 8000dbc:	f001 fb9f 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f001 fbb8 	bl	8002536 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2015      	movs	r0, #21
 8000dcc:	f001 fb97 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000dd0:	2015      	movs	r0, #21
 8000dd2:	f001 fbb0 	bl	8002536 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2016      	movs	r0, #22
 8000ddc:	f001 fb8f 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000de0:	2016      	movs	r0, #22
 8000de2:	f001 fba8 	bl	8002536 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40006400 	.word	0x40006400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_HRTIM_MspInit+0x38>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10b      	bne.n	8000e26 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_HRTIM_MspInit+0x3c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a09      	ldr	r2, [pc, #36]	@ (8000e38 <HAL_HRTIM_MspInit+0x3c>)
 8000e14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <HAL_HRTIM_MspInit+0x3c>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40017400 	.word	0x40017400
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <HAL_HRTIM_MspPostInit+0x68>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d11d      	bne.n	8000e9a <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_HRTIM_MspPostInit+0x6c>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a11      	ldr	r2, [pc, #68]	@ (8000ea8 <HAL_HRTIM_MspPostInit+0x6c>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <HAL_HRTIM_MspPostInit+0x6c>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000e88:	230d      	movs	r3, #13
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f001 fc73 	bl	8002780 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40017400 	.word	0x40017400
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f38 <HAL_TIM_Base_MspInit+0x8c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ed6:	e02a      	b.n	8000f2e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <HAL_TIM_Base_MspInit+0x94>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10c      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a15      	ldr	r2, [pc, #84]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
}
 8000efa:	e018      	b.n	8000f2e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <HAL_TIM_Base_MspInit+0x98>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d113      	bne.n	8000f2e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_TIM_Base_MspInit+0x90>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2019      	movs	r0, #25
 8000f24:	f001 faeb 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f28:	2019      	movs	r0, #25
 8000f2a:	f001 fb04 	bl	8002536 <HAL_NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40014000 	.word	0x40014000
 8000f44:	40014400 	.word	0x40014400

08000f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_TIM_MspPostInit+0x64>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d11b      	bne.n	8000fa2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_TIM_MspPostInit+0x68>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_TIM_MspPostInit+0x68>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_TIM_MspPostInit+0x68>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8000f82:	2302      	movs	r3, #2
 8000f84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <HAL_TIM_MspPostInit+0x6c>)
 8000f9e:	f001 fbef 	bl	8002780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000400 	.word	0x40000400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f8cb 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <DMA1_Channel1_IRQHandler+0x10>)
 800101e:	f001 faeb 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000c8 	.word	0x200000c8

0800102c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <DMA1_Channel2_IRQHandler+0x10>)
 8001032:	f001 fae1 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000010c 	.word	0x2000010c

08001040 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <CAN_TX_IRQHandler+0x10>)
 8001046:	f000 ff46 	bl	8001ed6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000150 	.word	0x20000150

08001054 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <CAN_RX0_IRQHandler+0x10>)
 800105a:	f000 ff3c 	bl	8001ed6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000150 	.word	0x20000150

08001068 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <CAN_RX1_IRQHandler+0x10>)
 800106e:	f000 ff32 	bl	8001ed6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000150 	.word	0x20000150

0800107c <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <CAN_SCE_IRQHandler+0x10>)
 8001082:	f000 ff28 	bl	8001ed6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000150 	.word	0x20000150

08001090 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001096:	f003 ff6b 	bl	8004f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002ec 	.word	0x200002ec

080010a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001100 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010cc:	f7ff ffea 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopForever+0xe>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopForever+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f004 fea5 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fa:	f7ff f865 	bl	80001c8 <main>

080010fe <LoopForever>:

LoopForever:
    b LoopForever
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001100:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800110c:	08005edc 	.word	0x08005edc
  ldr r2, =_sbss
 8001110:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001114:	20000340 	.word	0x20000340

08001118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC1_2_IRQHandler>
	...

0800111c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_Init+0x28>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f001 f9db 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fcd6 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f9f3 	bl	8002552 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f001 f9bb 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	2000033c 	.word	0x2000033c

080011d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000033c 	.word	0x2000033c

080011e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b09a      	sub	sp, #104	@ 0x68
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e172      	b.n	80014ee <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	d176      	bne.n	8001308 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	2b00      	cmp	r3, #0
 8001220:	d152      	bne.n	80012c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fc77 	bl	8000b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d13b      	bne.n	80012c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fcdf 	bl	8001c14 <ADC_Disable>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d12f      	bne.n	80012c8 <HAL_ADC_Init+0xe0>
 8001268:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800126c:	2b00      	cmp	r3, #0
 800126e:	d12b      	bne.n	80012c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001278:	f023 0302 	bic.w	r3, r3, #2
 800127c:	f043 0202 	orr.w	r2, r3, #2
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001292:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a4:	4b94      	ldr	r3, [pc, #592]	@ (80014f8 <HAL_ADC_Init+0x310>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a94      	ldr	r2, [pc, #592]	@ (80014fc <HAL_ADC_Init+0x314>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9a      	lsrs	r2, r3, #18
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ba:	e002      	b.n	80012c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f9      	bne.n	80012bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012e4:	d110      	bne.n	8001308 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f023 0312 	bic.w	r3, r3, #18
 80012ee:	f043 0210 	orr.w	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 80df 	bne.w	80014d4 <HAL_ADC_Init+0x2ec>
 8001316:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 80da 	bne.w	80014d4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 80d2 	bne.w	80014d4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001338:	f043 0202 	orr.w	r2, r3, #2
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001340:	4b6f      	ldr	r3, [pc, #444]	@ (8001500 <HAL_ADC_Init+0x318>)
 8001342:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800134c:	d102      	bne.n	8001354 <HAL_ADC_Init+0x16c>
 800134e:	4b6d      	ldr	r3, [pc, #436]	@ (8001504 <HAL_ADC_Init+0x31c>)
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e002      	b.n	800135a <HAL_ADC_Init+0x172>
 8001354:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001358:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_ADC_Init+0x192>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_ADC_Init+0x192>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_ADC_Init+0x194>
 800137a:	2300      	movs	r3, #0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d11c      	bne.n	80013ba <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001380:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001382:	2b00      	cmp	r3, #0
 8001384:	d010      	beq.n	80013a8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_ADC_Init+0x1ba>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x1ba>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_ADC_Init+0x1bc>
 80013a2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d108      	bne.n	80013ba <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013b8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	035b      	lsls	r3, r3, #13
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013c4:	2a01      	cmp	r2, #1
 80013c6:	d002      	beq.n	80013ce <HAL_ADC_Init+0x1e6>
 80013c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x1e8>
 80013ce:	2200      	movs	r2, #0
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4313      	orrs	r3, r2
 80013de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013e0:	4313      	orrs	r3, r2
 80013e2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d11b      	bne.n	8001426 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e5b      	ldrb	r3, [r3, #25]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fa:	3b01      	subs	r3, #1
 80013fc:	045a      	lsls	r2, r3, #17
 80013fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001400:	4313      	orrs	r3, r2
 8001402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001406:	663b      	str	r3, [r7, #96]	@ 0x60
 8001408:	e00d      	b.n	8001426 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001412:	f043 0220 	orr.w	r2, r3, #32
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	2b01      	cmp	r3, #1
 800142c:	d007      	beq.n	800143e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	4313      	orrs	r3, r2
 8001438:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800143a:	4313      	orrs	r3, r2
 800143c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b00      	cmp	r3, #0
 800144a:	d114      	bne.n	8001476 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800145a:	f023 0302 	bic.w	r3, r3, #2
 800145e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e1b      	ldrb	r3, [r3, #24]
 8001464:	039a      	lsls	r2, r3, #14
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4313      	orrs	r3, r2
 8001470:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001472:	4313      	orrs	r3, r2
 8001474:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_ADC_Init+0x320>)
 800147e:	4013      	ands	r3, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001486:	430b      	orrs	r3, r1
 8001488:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10c      	bne.n	80014ac <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	f023 010f 	bic.w	r1, r3, #15
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80014aa:	e007      	b.n	80014bc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 020f 	bic.w	r2, r2, #15
 80014ba:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d2:	e00a      	b.n	80014ea <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f023 0312 	bic.w	r3, r3, #18
 80014dc:	f043 0210 	orr.w	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3768      	adds	r7, #104	@ 0x68
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	50000300 	.word	0x50000300
 8001504:	50000100 	.word	0x50000100
 8001508:	fff0c007 	.word	0xfff0c007

0800150c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800150c:	b480      	push	{r7}
 800150e:	b09b      	sub	sp, #108	@ 0x6c
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_ADC_ConfigChannel+0x22>
 800152a:	2302      	movs	r3, #2
 800152c:	e2a1      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x566>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 8285 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b04      	cmp	r3, #4
 800154c:	d81c      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	461a      	mov	r2, r3
 8001562:	231f      	movs	r3, #31
 8001564:	4093      	lsls	r3, r2
 8001566:	43db      	mvns	r3, r3
 8001568:	4019      	ands	r1, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	631a      	str	r2, [r3, #48]	@ 0x30
 8001586:	e063      	b.n	8001650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b09      	cmp	r3, #9
 800158e:	d81e      	bhi.n	80015ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	3b1e      	subs	r3, #30
 80015a4:	221f      	movs	r2, #31
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4019      	ands	r1, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	3b1e      	subs	r3, #30
 80015c0:	fa00 f203 	lsl.w	r2, r0, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80015cc:	e040      	b.n	8001650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b0e      	cmp	r3, #14
 80015d4:	d81e      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	3b3c      	subs	r3, #60	@ 0x3c
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4019      	ands	r1, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	3b3c      	subs	r3, #60	@ 0x3c
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38
 8001612:	e01d      	b.n	8001650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	3b5a      	subs	r3, #90	@ 0x5a
 8001628:	221f      	movs	r2, #31
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4019      	ands	r1, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	3b5a      	subs	r3, #90	@ 0x5a
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 80e5 	bne.w	800182a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d91c      	bls.n	80016a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6999      	ldr	r1, [r3, #24]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	3b1e      	subs	r3, #30
 800167a:	2207      	movs	r2, #7
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	4019      	ands	r1, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6898      	ldr	r0, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	3b1e      	subs	r3, #30
 8001694:	fa00 f203 	lsl.w	r2, r0, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	619a      	str	r2, [r3, #24]
 80016a0:	e019      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6959      	ldr	r1, [r3, #20]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	2207      	movs	r2, #7
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4019      	ands	r1, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6898      	ldr	r0, [r3, #8]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d84f      	bhi.n	8001798 <HAL_ADC_ConfigChannel+0x28c>
 80016f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001700 <HAL_ADC_ConfigChannel+0x1f4>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	08001711 	.word	0x08001711
 8001704:	08001733 	.word	0x08001733
 8001708:	08001755 	.word	0x08001755
 800170c:	08001777 	.word	0x08001777
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001716:	4b9c      	ldr	r3, [pc, #624]	@ (8001988 <HAL_ADC_ConfigChannel+0x47c>)
 8001718:	4013      	ands	r3, r2
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	0691      	lsls	r1, r2, #26
 8001720:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001722:	430a      	orrs	r2, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800172e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001730:	e07b      	b.n	800182a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001738:	4b93      	ldr	r3, [pc, #588]	@ (8001988 <HAL_ADC_ConfigChannel+0x47c>)
 800173a:	4013      	ands	r3, r2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	0691      	lsls	r1, r2, #26
 8001742:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001744:	430a      	orrs	r2, r1
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001750:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001752:	e06a      	b.n	800182a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800175a:	4b8b      	ldr	r3, [pc, #556]	@ (8001988 <HAL_ADC_ConfigChannel+0x47c>)
 800175c:	4013      	ands	r3, r2
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	0691      	lsls	r1, r2, #26
 8001764:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001766:	430a      	orrs	r2, r1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001772:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001774:	e059      	b.n	800182a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800177c:	4b82      	ldr	r3, [pc, #520]	@ (8001988 <HAL_ADC_ConfigChannel+0x47c>)
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	0691      	lsls	r1, r2, #26
 8001786:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001788:	430a      	orrs	r2, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001794:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001796:	e048      	b.n	800182a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	069b      	lsls	r3, r3, #26
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017ba:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	069b      	lsls	r3, r3, #26
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017de:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	069b      	lsls	r3, r3, #26
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d107      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001802:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800180a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	069b      	lsls	r3, r3, #26
 8001814:	429a      	cmp	r2, r3
 8001816:	d107      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001826:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001828:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d108      	bne.n	800184a <HAL_ADC_ConfigChannel+0x33e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x33e>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_ADC_ConfigChannel+0x340>
 800184a:	2300      	movs	r3, #0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 810a 	bne.w	8001a66 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d00f      	beq.n	800187a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43da      	mvns	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	400a      	ands	r2, r1
 8001874:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001878:	e049      	b.n	800190e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d91c      	bls.n	80018d6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6999      	ldr	r1, [r3, #24]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3b1b      	subs	r3, #27
 80018ae:	2207      	movs	r2, #7
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3b1b      	subs	r3, #27
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	e01b      	b.n	800190e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6959      	ldr	r1, [r3, #20]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	2207      	movs	r2, #7
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4019      	ands	r1, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6898      	ldr	r0, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	fa00 f203 	lsl.w	r2, r0, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <HAL_ADC_ConfigChannel+0x480>)
 8001910:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d105      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800191a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800192a:	2b11      	cmp	r3, #17
 800192c:	d105      	bne.n	800193a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800192e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800193e:	2b12      	cmp	r3, #18
 8001940:	f040 8091 	bne.w	8001a66 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 808a 	bne.w	8001a66 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800195a:	d102      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x456>
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_ADC_ConfigChannel+0x484>)
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x45c>
 8001962:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001966:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10e      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x488>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x488>
 8001984:	2301      	movs	r3, #1
 8001986:	e006      	b.n	8001996 <HAL_ADC_ConfigChannel+0x48a>
 8001988:	83fff000 	.word	0x83fff000
 800198c:	50000300 	.word	0x50000300
 8001990:	50000100 	.word	0x50000100
 8001994:	2300      	movs	r3, #0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d150      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800199a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x4b0>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x4b0>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_ADC_ConfigChannel+0x4b2>
 80019bc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d13c      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d11d      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x4fa>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d2:	d118      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80019d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019de:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_ADC_ConfigChannel+0x574>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <HAL_ADC_ConfigChannel+0x578>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9a      	lsrs	r2, r3, #18
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019f6:	e002      	b.n	80019fe <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f9      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a04:	e02e      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b11      	cmp	r3, #17
 8001a0c:	d10b      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x51a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a16:	d106      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a24:	e01e      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d11a      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a38:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a3a:	e013      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f043 0220 	orr.w	r2, r3, #32
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001a4e:	e00a      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a64:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	376c      	adds	r7, #108	@ 0x6c
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b099      	sub	sp, #100	@ 0x64
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aa0:	d102      	bne.n	8001aa8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c0c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	e002      	b.n	8001aae <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001aa8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001aac:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0a2      	b.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e09b      	b.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d17f      	bne.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d179      	bne.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae8:	4b49      	ldr	r3, [pc, #292]	@ (8001c10 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001aea:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d040      	beq.n	8001b76 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b06:	035b      	lsls	r3, r3, #13
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b0e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d15c      	bne.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001b52:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d14b      	bne.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b60:	f023 030f 	bic.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	6811      	ldr	r1, [r2, #0]
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	6892      	ldr	r2, [r2, #8]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b72:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b74:	e03c      	b.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b80:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d123      	bne.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001bc4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d112      	bne.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001bca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001bd2:	f023 030f 	bic.w	r3, r3, #15
 8001bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001bd8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bda:	e009      	b.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f043 0220 	orr.w	r2, r3, #32
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001bee:	e000      	b.n	8001bf2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bf0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3764      	adds	r7, #100	@ 0x64
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	50000100 	.word	0x50000100
 8001c10:	50000300 	.word	0x50000300

08001c14 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <ADC_Disable+0x2c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <ADC_Disable+0x2c>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <ADC_Disable+0x2e>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d047      	beq.n	8001cd6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030d 	and.w	r3, r3, #13
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10f      	bne.n	8001c74 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0202 	orr.w	r2, r2, #2
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff fab0 	bl	80011d0 <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c72:	e029      	b.n	8001cc8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e023      	b.n	8001cd8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c90:	f7ff fa9e 	bl	80011d0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d914      	bls.n	8001cc8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10d      	bne.n	8001cc8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f043 0210 	orr.w	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e007      	b.n	8001cd8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d0dc      	beq.n	8001c90 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0ed      	b.n	8001ece <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff f806 	bl	8000d10 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d14:	f7ff fa5c 	bl	80011d0 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d1a:	e012      	b.n	8001d42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d1c:	f7ff fa58 	bl	80011d0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b0a      	cmp	r3, #10
 8001d28:	d90b      	bls.n	8001d42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2205      	movs	r2, #5
 8001d3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0c5      	b.n	8001ece <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0e5      	beq.n	8001d1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0202 	bic.w	r2, r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d60:	f7ff fa36 	bl	80011d0 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d66:	e012      	b.n	8001d8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d68:	f7ff fa32 	bl	80011d0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d90b      	bls.n	8001d8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2205      	movs	r2, #5
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09f      	b.n	8001ece <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e5      	bne.n	8001d68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e1b      	ldrb	r3, [r3, #24]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7e5b      	ldrb	r3, [r3, #25]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7e9b      	ldrb	r3, [r3, #26]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0220 	bic.w	r2, r2, #32
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7edb      	ldrb	r3, [r3, #27]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0210 	bic.w	r2, r2, #16
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0210 	orr.w	r2, r2, #16
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7f1b      	ldrb	r3, [r3, #28]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0208 	orr.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0208 	bic.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f5b      	ldrb	r3, [r3, #29]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0204 	orr.w	r2, r2, #4
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e007      	b.n	8001e98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0204 	bic.w	r2, r2, #4
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	ea42 0103 	orr.w	r1, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b08a      	sub	sp, #40	@ 0x28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d07c      	beq.n	8002016 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d023      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f983 	bl	8002244 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f3e:	e016      	b.n	8001f6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f52:	e00c      	b.n	8001f6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	e002      	b.n	8001f6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f989 	bl	8002280 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d024      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f963 	bl	8002258 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f92:	e016      	b.n	8001fc2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d004      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa6:	e00c      	b.n	8001fc2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fba:	e002      	b.n	8001fc2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f969 	bl	8002294 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d024      	beq.n	8002016 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f943 	bl	800226c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fe6:	e016      	b.n	8002016 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffa:	e00c      	b.n	8002016 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
 800200e:	e002      	b.n	8002016 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f949 	bl	80022a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00c      	beq.n	800203a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2210      	movs	r2, #16
 8002038:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2208      	movs	r2, #8
 8002054:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f93a 	bl	80022d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f921 	bl	80022bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00c      	beq.n	800209e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2210      	movs	r2, #16
 800209c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2208      	movs	r2, #8
 80020b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f91c 	bl	80022f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f903 	bl	80022e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00b      	beq.n	8002100 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f906 	bl	800230c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2208      	movs	r2, #8
 800211a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8ff 	bl	8002320 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d07b      	beq.n	8002224 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d072      	beq.n	800221c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002190:	2b00      	cmp	r3, #0
 8002192:	d043      	beq.n	800221c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d03e      	beq.n	800221c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021a4:	2b60      	cmp	r3, #96	@ 0x60
 80021a6:	d02b      	beq.n	8002200 <HAL_CAN_IRQHandler+0x32a>
 80021a8:	2b60      	cmp	r3, #96	@ 0x60
 80021aa:	d82e      	bhi.n	800220a <HAL_CAN_IRQHandler+0x334>
 80021ac:	2b50      	cmp	r3, #80	@ 0x50
 80021ae:	d022      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x320>
 80021b0:	2b50      	cmp	r3, #80	@ 0x50
 80021b2:	d82a      	bhi.n	800220a <HAL_CAN_IRQHandler+0x334>
 80021b4:	2b40      	cmp	r3, #64	@ 0x40
 80021b6:	d019      	beq.n	80021ec <HAL_CAN_IRQHandler+0x316>
 80021b8:	2b40      	cmp	r3, #64	@ 0x40
 80021ba:	d826      	bhi.n	800220a <HAL_CAN_IRQHandler+0x334>
 80021bc:	2b30      	cmp	r3, #48	@ 0x30
 80021be:	d010      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x30c>
 80021c0:	2b30      	cmp	r3, #48	@ 0x30
 80021c2:	d822      	bhi.n	800220a <HAL_CAN_IRQHandler+0x334>
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d002      	beq.n	80021ce <HAL_CAN_IRQHandler+0x2f8>
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d005      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021cc:	e01d      	b.n	800220a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d6:	e019      	b.n	800220c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e0:	e014      	b.n	800220c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f043 0320 	orr.w	r3, r3, #32
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ea:	e00f      	b.n	800220c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f4:	e00a      	b.n	800220c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fe:	e005      	b.n	800220c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002208:	e000      	b.n	800220c <HAL_CAN_IRQHandler+0x336>
            break;
 800220a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800221a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2204      	movs	r2, #4
 8002222:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f87c 	bl	8002334 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	@ (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	@ (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	@ 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff3e 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff8e 	bl	800243c <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5d 	bl	80023e8 <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff31 	bl	80023ac <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e037      	b.n	80025f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002596:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800259a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8b4 	bl	8002740 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	2204      	movs	r2, #4
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d024      	beq.n	800266a <HAL_DMA_IRQHandler+0x72>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01f      	beq.n	800266a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	2104      	movs	r1, #4
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d06a      	beq.n	8002736 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002668:	e065      	b.n	8002736 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2202      	movs	r2, #2
 8002670:	409a      	lsls	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02c      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xdc>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d027      	beq.n	80026d4 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 020a 	bic.w	r2, r2, #10
 80026a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	2102      	movs	r1, #2
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d035      	beq.n	8002736 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026d2:	e030      	b.n	8002736 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	2208      	movs	r2, #8
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d028      	beq.n	8002736 <HAL_DMA_IRQHandler+0x13e>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d023      	beq.n	8002736 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 020e 	bic.w	r2, r2, #14
 80026fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
    }
  }
}
 8002734:	e7ff      	b.n	8002736 <HAL_DMA_IRQHandler+0x13e>
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <DMA_CalcBaseAndBitshift+0x34>)
 8002750:	4413      	add	r3, r2
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <DMA_CalcBaseAndBitshift+0x38>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a06      	ldr	r2, [pc, #24]	@ (800277c <DMA_CalcBaseAndBitshift+0x3c>)
 8002764:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	bffdfff8 	.word	0xbffdfff8
 8002778:	cccccccd 	.word	0xcccccccd
 800277c:	40020000 	.word	0x40020000

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278e:	e14e      	b.n	8002a2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8140 	beq.w	8002a28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d005      	beq.n	80027c0 <HAL_GPIO_Init+0x40>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d130      	bne.n	8002822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f6:	2201      	movs	r2, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0201 	and.w	r2, r3, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b03      	cmp	r3, #3
 800282c:	d017      	beq.n	800285e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d123      	bne.n	80028b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 809a 	beq.w	8002a28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f4:	4b55      	ldr	r3, [pc, #340]	@ (8002a4c <HAL_GPIO_Init+0x2cc>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a54      	ldr	r2, [pc, #336]	@ (8002a4c <HAL_GPIO_Init+0x2cc>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b52      	ldr	r3, [pc, #328]	@ (8002a4c <HAL_GPIO_Init+0x2cc>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800290c:	4a50      	ldr	r2, [pc, #320]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002936:	d013      	beq.n	8002960 <HAL_GPIO_Init+0x1e0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a46      	ldr	r2, [pc, #280]	@ (8002a54 <HAL_GPIO_Init+0x2d4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00d      	beq.n	800295c <HAL_GPIO_Init+0x1dc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a45      	ldr	r2, [pc, #276]	@ (8002a58 <HAL_GPIO_Init+0x2d8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <HAL_GPIO_Init+0x1d8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a44      	ldr	r2, [pc, #272]	@ (8002a5c <HAL_GPIO_Init+0x2dc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_GPIO_Init+0x1d4>
 8002950:	2303      	movs	r3, #3
 8002952:	e006      	b.n	8002962 <HAL_GPIO_Init+0x1e2>
 8002954:	2305      	movs	r3, #5
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x1e2>
 8002958:	2302      	movs	r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x1e2>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x1e2>
 8002960:	2300      	movs	r3, #0
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002972:	4937      	ldr	r1, [pc, #220]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002980:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ce:	4a24      	ldr	r2, [pc, #144]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d4:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fe:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a22:	4a0f      	ldr	r2, [pc, #60]	@ (8002a60 <HAL_GPIO_Init+0x2e0>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f aea9 	bne.w	8002790 <HAL_GPIO_Init+0x10>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	48000400 	.word	0x48000400
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000c00 	.word	0x48000c00
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0ba      	b.n	8002c1c <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02e      	beq.n	8002b48 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	@ (8002c24 <HAL_HRTIM_Init+0x190>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10b      	bne.n	8002b0c <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002af4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c28 <HAL_HRTIM_Init+0x194>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c28 <HAL_HRTIM_Init+0x194>)
 8002afa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002afe:	6193      	str	r3, [r2, #24]
 8002b00:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <HAL_HRTIM_Init+0x194>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b1a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b30:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe f957 	bl	8000dfc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b68:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002b90:	2300      	movs	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]
 8002b94:	e03e      	b.n	8002c14 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002b96:	7dfa      	ldrb	r2, [r7, #23]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002baa:	7dfa      	ldrb	r2, [r7, #23]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	331c      	adds	r3, #28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002bbe:	7dfa      	ldrb	r2, [r7, #23]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3320      	adds	r3, #32
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002bd2:	7dfa      	ldrb	r2, [r7, #23]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3324      	adds	r3, #36	@ 0x24
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002be6:	7dfa      	ldrb	r2, [r7, #23]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3328      	adds	r3, #40	@ 0x28
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8002bfa:	7dfa      	ldrb	r2, [r7, #23]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3330      	adds	r3, #48	@ 0x30
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	3301      	adds	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d9bd      	bls.n	8002b96 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40017400 	.word	0x40017400
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e045      	b.n	8002cd0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d114      	bne.n	8002c86 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0202 	bic.w	r2, r2, #2
 8002c6c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8002c84:	e01f      	b.n	8002cc6 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0202 	orr.w	r2, r2, #2
 8002c96:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8002ca2:	f023 010c 	bic.w	r1, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8002ce6:	f7fe fa73 	bl	80011d0 <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8002cec:	e014      	b.n	8002d18 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d010      	beq.n	8002d18 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe fa6b 	bl	80011d0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2207      	movs	r2, #7
 8002d10:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e011      	b.n	8002d3c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8002d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d28:	d1e1      	bne.n	8002cee <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d101      	bne.n	8002d60 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e015      	b.n	8002d8c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d104      	bne.n	8002d78 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f9b2 	bl	80030da <HRTIM_MasterBase_Config>
 8002d76:	e004      	b.n	8002d82 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f9db 	bl	8003138 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_HRTIM_BurstModeConfig>:
  * @note This function must be called before starting the burst mode
  *       controller
  */
HAL_StatusTypeDef HAL_HRTIM_BurstModeConfig(HRTIM_HandleTypeDef * hhrtim,
                                            const HRTIM_BurstModeCfgTypeDef* pBurstModeCfg)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_HRTIM_BURSTMODECLOCKSOURCE(pBurstModeCfg->ClockSource));
  assert_param(IS_HRTIM_HRTIM_BURSTMODEPRESCALER(pBurstModeCfg->Prescaler));
  assert_param(IS_HRTIM_BURSTMODEPRELOAD(pBurstModeCfg->PreloadEnable));
  assert_param(IS_HRTIM_BURSTMODETRIGGER(pBurstModeCfg->Trigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d101      	bne.n	8002dae <HAL_HRTIM_BurstModeConfig+0x1a>
  {
     return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
 8002dac:	e05d      	b.n	8002e6a <HAL_HRTIM_BurstModeConfig+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_HRTIM_BurstModeConfig+0x28>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e056      	b.n	8002e6a <HAL_HRTIM_BurstModeConfig+0xd6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Set the burst mode operating mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_BMOM);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f023 0302 	bic.w	r3, r3, #2
 8002ddc:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr |= (pBurstModeCfg->Mode & HRTIM_BMCR_BMOM);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set the burst mode clock source */
  hrtim_bmcr &= ~(HRTIM_BMCR_BMCLK);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8002df2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr |= (pBurstModeCfg->ClockSource & HRTIM_BMCR_BMCLK);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Set the burst mode prescaler */
  hrtim_bmcr &= ~(HRTIM_BMCR_BMPRSC);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8002e08:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr |= pBurstModeCfg->Prescaler;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Enable/disable burst mode registers preload */
  hrtim_bmcr &= ~(HRTIM_BMCR_BMPREN);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e1a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr |= (pBurstModeCfg->PreloadEnable & HRTIM_BMCR_BMPREN);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Set the burst mode trigger */
  hhrtim->Instance->sCommonRegs.BMTRGR = pBurstModeCfg->Trigger;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4

  /* Set the burst mode compare value */
  hhrtim->Instance->sCommonRegs.BMCMPR = pBurstModeCfg->IdleDuration;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	6952      	ldr	r2, [r2, #20]
 8002e3e:	f8c3 23a8 	str.w	r2, [r3, #936]	@ 0x3a8

  /* Set the burst mode period */
  hhrtim->Instance->sCommonRegs.BMPER = pBurstModeCfg->Period;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	6992      	ldr	r2, [r2, #24]
 8002e4a:	f8c3 23ac 	str.w	r2, [r3, #940]	@ 0x3ac

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d101      	bne.n	8002e92 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e05f      	b.n	8002f52 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e058      	b.n	8002f52 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d104      	bne.n	8002ec0 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f97d 	bl	80031b8 <HRTIM_MasterWaveform_Config>
 8002ebe:	e004      	b.n	8002eca <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f9dd 	bl	8003284 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4403      	add	r3, r0
 8002edc:	3320      	adds	r3, #32
 8002ede:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4403      	add	r3, r0
 8002ef2:	3324      	adds	r3, #36	@ 0x24
 8002ef4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6899      	ldr	r1, [r3, #8]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4403      	add	r3, r0
 8002f08:	3328      	adds	r3, #40	@ 0x28
 8002f0a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4403      	add	r3, r0
 8002f1e:	332c      	adds	r3, #44	@ 0x2c
 8002f20:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6919      	ldr	r1, [r3, #16]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4403      	add	r3, r0
 8002f34:	3330      	adds	r3, #48	@ 0x30
 8002f36:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fbba 	bl	80036b4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d101      	bne.n	8002f78 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
 8002f76:	e01d      	b.n	8002fb4 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e016      	b.n	8002fb4 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fab1 	bl	8003504 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_HRTIM_WaveformOutputStart+0x18>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e01a      	b.n	800300a <HAL_HRTIM_WaveformOutputStart+0x4e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_HRTIM_WaveformCountStart+0x18>
 800302a:	2302      	movs	r3, #2
 800302c:	e018      	b.n	8003060 <HAL_HRTIM_WaveformCountStart+0x4a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_HRTIM_BurstModeCtl>:
  * @retval HAL status
  * @note This function must be called after starting the timer(s)
  */
HAL_StatusTypeDef HAL_HRTIM_BurstModeCtl(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t Enable)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_BURSTMODECTL(Enable));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d101      	bne.n	8003086 <HAL_HRTIM_BurstModeCtl+0x1a>
  {
     return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	e023      	b.n	80030ce <HAL_HRTIM_BurstModeCtl+0x62>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_HRTIM_BurstModeCtl+0x28>
 8003090:	2302      	movs	r3, #2
 8003092:	e01c      	b.n	80030ce <HAL_HRTIM_BurstModeCtl+0x62>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable/Disable the burst mode controller */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.BMCR, HRTIM_BMCR_BME, Enable);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80030ac:	f023 0101 	bic.w	r1, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0307 	bic.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 0318 	bic.w	r3, r3, #24
 8003104:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6852      	ldr	r2, [r2, #4]
 800312a:	619a      	str	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3301      	adds	r3, #1
 800314c:	01db      	lsls	r3, r3, #7
 800314e:	4413      	add	r3, r2
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 0318 	bic.w	r3, r3, #24
 800316c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3301      	adds	r3, #1
 8003180:	01db      	lsls	r3, r3, #7
 8003182:	4413      	add	r3, r2
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	440b      	add	r3, r1
 8003196:	3394      	adds	r3, #148	@ 0x94
 8003198:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	01db      	lsls	r3, r3, #7
 80031a6:	440b      	add	r3, r1
 80031a8:	3398      	adds	r3, #152	@ 0x98
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80031d2:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0320 	bic.w	r3, r3, #32
 80031da:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031ec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031fe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003210:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8003222:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003234:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003248:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325a:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	4313      	orrs	r3, r2
 8003264:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003284:	b480      	push	{r7}
 8003286:	b08b      	sub	sp, #44	@ 0x2c
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3301      	adds	r3, #1
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	4413      	add	r3, r2
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	6811      	ldr	r1, [r2, #0]
 80032a2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	440b      	add	r3, r1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3301      	adds	r3, #1
 80032b8:	01db      	lsls	r3, r3, #7
 80032ba:	4413      	add	r3, r2
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	01db      	lsls	r3, r3, #7
 80032c8:	4413      	add	r3, r2
 80032ca:	33e8      	adds	r3, #232	@ 0xe8
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	01db      	lsls	r3, r3, #7
 80032d8:	4413      	add	r3, r2
 80032da:	33e4      	adds	r3, #228	@ 0xe4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 80032e8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	f023 0320 	bic.w	r3, r3, #32
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	4313      	orrs	r3, r2
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330a:	4313      	orrs	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331c:	4313      	orrs	r3, r2
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332e:	4313      	orrs	r3, r2
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	4313      	orrs	r3, r2
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	4313      	orrs	r3, r2
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003366:	d103      	bne.n	8003370 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337e:	4313      	orrs	r3, r2
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003390:	4313      	orrs	r3, r2
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a2:	4313      	orrs	r3, r2
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f023 031f 	bic.w	r3, r3, #31
 80033ac:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033c2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033dc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ec:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80033f0:	d004      	beq.n	80033fc <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80033fa:	d103      	bne.n	8003404 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	2b40      	cmp	r3, #64	@ 0x40
 8003402:	d108      	bne.n	8003416 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800340a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	4313      	orrs	r3, r2
 8003414:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d843      	bhi.n	80034aa <HRTIM_TimingUnitWaveform_Config+0x226>
 8003422:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	0800343d 	.word	0x0800343d
 800342c:	08003453 	.word	0x08003453
 8003430:	08003469 	.word	0x08003469
 8003434:	0800347f 	.word	0x0800347f
 8003438:	08003495 	.word	0x08003495
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003442:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	4313      	orrs	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
      break;
 8003450:	e02c      	b.n	80034ac <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003458:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	61fb      	str	r3, [r7, #28]
      break;
 8003466:	e021      	b.n	80034ac <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800346e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	61fb      	str	r3, [r7, #28]
      break;
 800347c:	e016      	b.n	80034ac <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003484:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	4313      	orrs	r3, r2
 8003490:	61fb      	str	r3, [r7, #28]
      break;
 8003492:	e00b      	b.n	80034ac <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800349a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
      break;
 80034a8:	e000      	b.n	80034ac <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80034aa:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3301      	adds	r3, #1
 80034b4:	01db      	lsls	r3, r3, #7
 80034b6:	4413      	add	r3, r2
 80034b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	01db      	lsls	r3, r3, #7
 80034c4:	4413      	add	r3, r2
 80034c6:	33e8      	adds	r3, #232	@ 0xe8
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	01db      	lsls	r3, r3, #7
 80034d4:	4413      	add	r3, r2
 80034d6:	33e4      	adds	r3, #228	@ 0xe4
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	01db      	lsls	r3, r3, #7
 80034e4:	4413      	add	r3, r2
 80034e6:	33d4      	adds	r3, #212	@ 0xd4
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80034f6:	bf00      	nop
 80034f8:	372c      	adds	r7, #44	@ 0x2c
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	@ 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	4413      	add	r3, r2
 8003520:	33e4      	adds	r3, #228	@ 0xe4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	01db      	lsls	r3, r3, #7
 800352e:	4413      	add	r3, r2
 8003530:	33b8      	adds	r3, #184	@ 0xb8
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]

  switch (Output)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800353c:	d04d      	beq.n	80035da <HRTIM_OutputConfig+0xd6>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003544:	d85e      	bhi.n	8003604 <HRTIM_OutputConfig+0x100>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354c:	d032      	beq.n	80035b4 <HRTIM_OutputConfig+0xb0>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003554:	d856      	bhi.n	8003604 <HRTIM_OutputConfig+0x100>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b80      	cmp	r3, #128	@ 0x80
 800355a:	d03e      	beq.n	80035da <HRTIM_OutputConfig+0xd6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d850      	bhi.n	8003604 <HRTIM_OutputConfig+0x100>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d025      	beq.n	80035b4 <HRTIM_OutputConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b40      	cmp	r3, #64	@ 0x40
 800356c:	d84a      	bhi.n	8003604 <HRTIM_OutputConfig+0x100>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d01f      	beq.n	80035b4 <HRTIM_OutputConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HRTIM_OutputConfig+0x100>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b20      	cmp	r3, #32
 800357e:	d841      	bhi.n	8003604 <HRTIM_OutputConfig+0x100>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d33e      	bcc.n	8003604 <HRTIM_OutputConfig+0x100>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3b02      	subs	r3, #2
 800358a:	2201      	movs	r2, #1
 800358c:	409a      	lsls	r2, r3
 800358e:	4b48      	ldr	r3, [pc, #288]	@ (80036b0 <HRTIM_OutputConfig+0x1ac>)
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf14      	ite	ne
 8003596:	2301      	movne	r3, #1
 8003598:	2300      	moveq	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11c      	bne.n	80035da <HRTIM_OutputConfig+0xd6>
 80035a0:	f244 0304 	movw	r3, #16388	@ 0x4004
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d027      	beq.n	8003604 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	440b      	add	r3, r1
 80035c2:	33bc      	adds	r3, #188	@ 0xbc
 80035c4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	01db      	lsls	r3, r3, #7
 80035d2:	440b      	add	r3, r1
 80035d4:	33c0      	adds	r3, #192	@ 0xc0
 80035d6:	601a      	str	r2, [r3, #0]
      break;
 80035d8:	e015      	b.n	8003606 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	01db      	lsls	r3, r3, #7
 80035e6:	440b      	add	r3, r1
 80035e8:	33c4      	adds	r3, #196	@ 0xc4
 80035ea:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	01db      	lsls	r3, r3, #7
 80035f8:	440b      	add	r3, r1
 80035fa:	33c8      	adds	r3, #200	@ 0xc8
 80035fc:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80035fe:	2310      	movs	r3, #16
 8003600:	61bb      	str	r3, [r7, #24]
      break;
 8003602:	e000      	b.n	8003606 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8003604:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003606:	22fe      	movs	r2, #254	@ 0xfe
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800360e:	43db      	mvns	r3, r3
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	4013      	ands	r3, r2
 8003614:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	4313      	orrs	r3, r2
 8003624:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	4313      	orrs	r3, r2
 8003634:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	4313      	orrs	r3, r2
 8003644:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	4313      	orrs	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	4313      	orrs	r3, r2
 8003664:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d111      	bne.n	8003692 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10c      	bne.n	8003692 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	4313      	orrs	r3, r2
 8003690:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	01db      	lsls	r3, r3, #7
 800369a:	4413      	add	r3, r2
 800369c:	33e4      	adds	r3, #228	@ 0xe4
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3724      	adds	r7, #36	@ 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40000041 	.word	0x40000041

080036b4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d851      	bhi.n	8003768 <HRTIM_ForceRegistersUpdate+0xb4>
 80036c4:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <HRTIM_ForceRegistersUpdate+0x18>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036fb 	.word	0x080036fb
 80036d0:	08003711 	.word	0x08003711
 80036d4:	08003727 	.word	0x08003727
 80036d8:	0800373d 	.word	0x0800373d
 80036dc:	08003753 	.word	0x08003753
 80036e0:	080036e5 	.word	0x080036e5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80036f8:	e037      	b.n	800376a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0202 	orr.w	r2, r2, #2
 800370a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800370e:	e02c      	b.n	800376a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0204 	orr.w	r2, r2, #4
 8003720:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003724:	e021      	b.n	800376a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800373a:	e016      	b.n	800376a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0210 	orr.w	r2, r2, #16
 800374c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003750:	e00b      	b.n	800376a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003766:	e000      	b.n	800376a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003768:	bf00      	nop
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop

08003778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800377e:	af00      	add	r7, sp, #0
 8003780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003788:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f001 b823 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 817d 	beq.w	8003aae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037b4:	4bbc      	ldr	r3, [pc, #752]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d00c      	beq.n	80037da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c0:	4bb9      	ldr	r3, [pc, #740]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d15c      	bne.n	8003886 <HAL_RCC_OscConfig+0x10e>
 80037cc:	4bb6      	ldr	r3, [pc, #728]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d8:	d155      	bne.n	8003886 <HAL_RCC_OscConfig+0x10e>
 80037da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037de:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_RCC_OscConfig+0x94>
 8003806:	4ba8      	ldr	r3, [pc, #672]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	e015      	b.n	8003838 <HAL_RCC_OscConfig+0xc0>
 800380c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003810:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003824:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003828:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003834:	4b9c      	ldr	r3, [pc, #624]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800383c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003840:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003844:	fa92 f2a2 	rbit	r2, r2
 8003848:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800384c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003850:	fab2 f282 	clz	r2, r2
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f002 021f 	and.w	r2, r2, #31
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 811f 	beq.w	8003aac <HAL_RCC_OscConfig+0x334>
 800386e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8116 	bne.w	8003aac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f000 bfaf 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12e>
 8003898:	4b83      	ldr	r3, [pc, #524]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a82      	ldr	r2, [pc, #520]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e036      	b.n	8003914 <HAL_RCC_OscConfig+0x19c>
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x158>
 80038b6:	4b7c      	ldr	r3, [pc, #496]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7b      	ldr	r2, [pc, #492]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b79      	ldr	r3, [pc, #484]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a78      	ldr	r2, [pc, #480]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e021      	b.n	8003914 <HAL_RCC_OscConfig+0x19c>
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x184>
 80038e2:	4b71      	ldr	r3, [pc, #452]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a70      	ldr	r2, [pc, #448]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6d      	ldr	r2, [pc, #436]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0x19c>
 80038fc:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a69      	ldr	r2, [pc, #420]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b67      	ldr	r3, [pc, #412]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a66      	ldr	r2, [pc, #408]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003912:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003914:	4b64      	ldr	r3, [pc, #400]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	f023 020f 	bic.w	r2, r3, #15
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	495f      	ldr	r1, [pc, #380]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 800392a:	4313      	orrs	r3, r2
 800392c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800392e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d059      	beq.n	80039f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fd fc47 	bl	80011d0 <HAL_GetTick>
 8003942:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7fd fc42 	bl	80011d0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b64      	cmp	r3, #100	@ 0x64
 8003956:	d902      	bls.n	800395e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	f000 bf43 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
 800395e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003962:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003972:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <HAL_RCC_OscConfig+0x218>
 800398a:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	e015      	b.n	80039bc <HAL_RCC_OscConfig+0x244>
 8003990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003994:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039a8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80039b8:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039c0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80039c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80039c8:	fa92 f2a2 	rbit	r2, r2
 80039cc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80039d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039d4:	fab2 f282 	clz	r2, r2
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f042 0220 	orr.w	r2, r2, #32
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f002 021f 	and.w	r2, r2, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ab      	beq.n	8003948 <HAL_RCC_OscConfig+0x1d0>
 80039f0:	e05d      	b.n	8003aae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fd fbed 	bl	80011d0 <HAL_GetTick>
 80039f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fd fbe8 	bl	80011d0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b64      	cmp	r3, #100	@ 0x64
 8003a0a:	d902      	bls.n	8003a12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	f000 bee9 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
 8003a12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a16:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003a26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2cc>
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	e015      	b.n	8003a70 <HAL_RCC_OscConfig+0x2f8>
 8003a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a48:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a5c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa8 <HAL_RCC_OscConfig+0x330>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a74:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003a78:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a7c:	fa92 f2a2 	rbit	r2, r2
 8003a80:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003a84:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003a88:	fab2 f282 	clz	r2, r2
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f002 021f 	and.w	r2, r2, #31
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ab      	bne.n	80039fc <HAL_RCC_OscConfig+0x284>
 8003aa4:	e003      	b.n	8003aae <HAL_RCC_OscConfig+0x336>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 817d 	beq.w	8003dbe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ac4:	4ba6      	ldr	r3, [pc, #664]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ad0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d172      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x44a>
 8003adc:	4ba0      	ldr	r3, [pc, #640]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d16c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x44a>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003afa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_RCC_OscConfig+0x3a0>
 8003b12:	4b93      	ldr	r3, [pc, #588]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	e013      	b.n	8003b40 <HAL_RCC_OscConfig+0x3c8>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003b3c:	4b88      	ldr	r3, [pc, #544]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	2202      	movs	r2, #2
 8003b42:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003b46:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b4a:	fa92 f2a2 	rbit	r2, r2
 8003b4e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003b52:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCC_OscConfig+0x410>
 8003b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f000 be2e 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b75      	ldr	r3, [pc, #468]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	21f8      	movs	r1, #248	@ 0xf8
 8003b9e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003ba6:	fa91 f1a1 	rbit	r1, r1
 8003baa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003bae:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003bb2:	fab1 f181 	clz	r1, r1
 8003bb6:	b2c9      	uxtb	r1, r1
 8003bb8:	408b      	lsls	r3, r1
 8003bba:	4969      	ldr	r1, [pc, #420]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc0:	e0fd      	b.n	8003dbe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8088 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x56c>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003be6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bf4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fd fae6 	bl	80011d0 <HAL_GetTick>
 8003c04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fae1 	bl	80011d0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	f000 bde2 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003c32:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4d8>
 8003c4a:	4b45      	ldr	r3, [pc, #276]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e013      	b.n	8003c78 <HAL_RCC_OscConfig+0x500>
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c62:	2302      	movs	r3, #2
 8003c64:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c68:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003c74:	4b3a      	ldr	r3, [pc, #232]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003c7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003c8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003c8e:	fab2 f282 	clz	r2, r2
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f042 0220 	orr.w	r2, r2, #32
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f002 021f 	and.w	r2, r2, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0af      	beq.n	8003c0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003caa:	4b2d      	ldr	r3, [pc, #180]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	21f8      	movs	r1, #248	@ 0xf8
 8003cc0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003cc8:	fa91 f1a1 	rbit	r1, r1
 8003ccc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003cd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003cd4:	fab1 f181 	clz	r1, r1
 8003cd8:	b2c9      	uxtb	r1, r1
 8003cda:	408b      	lsls	r3, r1
 8003cdc:	4920      	ldr	r1, [pc, #128]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
 8003ce2:	e06c      	b.n	8003dbe <HAL_RCC_OscConfig+0x646>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003cf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd fa5e 	bl	80011d0 <HAL_GetTick>
 8003d14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fa59 	bl	80011d0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d902      	bls.n	8003d30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	f000 bd5a 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d104      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5ec>
 8003d5a:	4b01      	ldr	r3, [pc, #4]	@ (8003d60 <HAL_RCC_OscConfig+0x5e8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	e015      	b.n	8003d8c <HAL_RCC_OscConfig+0x614>
 8003d60:	40021000 	.word	0x40021000
 8003d64:	2302      	movs	r3, #2
 8003d66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d76:	2302      	movs	r3, #2
 8003d78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003d88:	4bc8      	ldr	r3, [pc, #800]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003d92:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d96:	fa92 f2a2 	rbit	r2, r2
 8003d9a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003d9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003da2:	fab2 f282 	clz	r2, r2
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	f042 0220 	orr.w	r2, r2, #32
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	f002 021f 	and.w	r2, r2, #31
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ad      	bne.n	8003d1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8110 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d079      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x760>
 8003de4:	2301      	movs	r3, #1
 8003de6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	4bab      	ldr	r3, [pc, #684]	@ (80040b0 <HAL_RCC_OscConfig+0x938>)
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd f9df 	bl	80011d0 <HAL_GetTick>
 8003e12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fd f9da 	bl	80011d0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d902      	bls.n	8003e2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	f000 bcdb 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e48:	2202      	movs	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	fa93 f2a3 	rbit	r2, r3
 8003e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	fa93 f2a3 	rbit	r2, r3
 8003e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e88:	4b88      	ldr	r3, [pc, #544]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 8003e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e94:	2102      	movs	r1, #2
 8003e96:	6019      	str	r1, [r3, #0]
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fa93 f1a3 	rbit	r1, r3
 8003ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003eae:	6019      	str	r1, [r3, #0]
  return result;
 8003eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2101      	movs	r1, #1
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0a0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x6a0>
 8003ed6:	e08d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x87c>
 8003ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003edc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	fa93 f2a3 	rbit	r2, r3
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003efa:	601a      	str	r2, [r3, #0]
  return result;
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b68      	ldr	r3, [pc, #416]	@ (80040b0 <HAL_RCC_OscConfig+0x938>)
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	461a      	mov	r2, r3
 8003f16:	2300      	movs	r3, #0
 8003f18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fd f959 	bl	80011d0 <HAL_GetTick>
 8003f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fd f954 	bl	80011d0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d902      	bls.n	8003f3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	f000 bc55 	b.w	80047e4 <HAL_RCC_OscConfig+0x106c>
 8003f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f42:	2202      	movs	r2, #2
 8003f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	fa93 f2a3 	rbit	r2, r3
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f66:	2202      	movs	r2, #2
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fa4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa6:	4b41      	ldr	r3, [pc, #260]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 8003fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fa93 f1a3 	rbit	r1, r3
 8003fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fcc:	6019      	str	r1, [r3, #0]
  return result;
 8003fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fab3 f383 	clz	r3, r3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d197      	bne.n	8003f24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 81a1 	beq.w	800434c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004010:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d116      	bne.n	800404a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b23      	ldr	r3, [pc, #140]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004026:	61d3      	str	r3, [r2, #28]
 8004028:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004034:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004042:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <HAL_RCC_OscConfig+0x93c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11a      	bne.n	800408c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b17      	ldr	r3, [pc, #92]	@ (80040b4 <HAL_RCC_OscConfig+0x93c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a16      	ldr	r2, [pc, #88]	@ (80040b4 <HAL_RCC_OscConfig+0x93c>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd f8b5 	bl	80011d0 <HAL_GetTick>
 8004066:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	e009      	b.n	8004080 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd f8b0 	bl	80011d0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e3b1      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <HAL_RCC_OscConfig+0x93c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ef      	beq.n	800406c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10d      	bne.n	80040b8 <HAL_RCC_OscConfig+0x940>
 800409c:	4b03      	ldr	r3, [pc, #12]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	4a02      	ldr	r2, [pc, #8]	@ (80040ac <HAL_RCC_OscConfig+0x934>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6213      	str	r3, [r2, #32]
 80040a8:	e03c      	b.n	8004124 <HAL_RCC_OscConfig+0x9ac>
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	10908120 	.word	0x10908120
 80040b4:	40007000 	.word	0x40007000
 80040b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x96a>
 80040c8:	4bc1      	ldr	r3, [pc, #772]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4ac0      	ldr	r2, [pc, #768]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	6213      	str	r3, [r2, #32]
 80040d4:	4bbe      	ldr	r3, [pc, #760]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4abd      	ldr	r2, [pc, #756]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80040da:	f023 0304 	bic.w	r3, r3, #4
 80040de:	6213      	str	r3, [r2, #32]
 80040e0:	e020      	b.n	8004124 <HAL_RCC_OscConfig+0x9ac>
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x994>
 80040f2:	4bb7      	ldr	r3, [pc, #732]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4ab6      	ldr	r2, [pc, #728]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	6213      	str	r3, [r2, #32]
 80040fe:	4bb4      	ldr	r3, [pc, #720]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4ab3      	ldr	r2, [pc, #716]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6213      	str	r3, [r2, #32]
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0x9ac>
 800410c:	4bb0      	ldr	r3, [pc, #704]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4aaf      	ldr	r2, [pc, #700]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6213      	str	r3, [r2, #32]
 8004118:	4bad      	ldr	r3, [pc, #692]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4aac      	ldr	r2, [pc, #688]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004128:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8081 	beq.w	8004238 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fd f84b 	bl	80011d0 <HAL_GetTick>
 800413a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fd f846 	bl	80011d0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e345      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
 8004158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004160:	2202      	movs	r2, #2
 8004162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004168:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	fa93 f2a3 	rbit	r2, r3
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004180:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004184:	2202      	movs	r2, #2
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fa93 f2a3 	rbit	r2, r3
 8004196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800419e:	601a      	str	r2, [r3, #0]
  return result;
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_OscConfig+0xa4c>
 80041be:	4b84      	ldr	r3, [pc, #528]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	e013      	b.n	80041ec <HAL_RCC_OscConfig+0xa74>
 80041c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041cc:	2202      	movs	r2, #2
 80041ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	4b79      	ldr	r3, [pc, #484]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80041f4:	2102      	movs	r1, #2
 80041f6:	6011      	str	r1, [r2, #0]
 80041f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	fa92 f1a2 	rbit	r1, r2
 8004206:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800420a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800420e:	6011      	str	r1, [r2, #0]
  return result;
 8004210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004214:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f002 021f 	and.w	r2, r2, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f202 	lsl.w	r2, r1, r2
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d084      	beq.n	8004140 <HAL_RCC_OscConfig+0x9c8>
 8004236:	e07f      	b.n	8004338 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fc ffca 	bl	80011d0 <HAL_GetTick>
 800423c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004240:	e00b      	b.n	800425a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fc ffc5 	bl	80011d0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e2c4      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
 800425a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004262:	2202      	movs	r2, #2
 8004264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	fa93 f2a3 	rbit	r2, r3
 8004274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004278:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004282:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004286:	2202      	movs	r2, #2
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	fa93 f2a3 	rbit	r2, r3
 8004298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042a0:	601a      	str	r2, [r3, #0]
  return result;
 80042a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f043 0302 	orr.w	r3, r3, #2
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_OscConfig+0xb4e>
 80042c0:	4b43      	ldr	r3, [pc, #268]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	e013      	b.n	80042ee <HAL_RCC_OscConfig+0xb76>
 80042c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042ce:	2202      	movs	r2, #2
 80042d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	fa93 f2a3 	rbit	r2, r3
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	4b39      	ldr	r3, [pc, #228]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80042f6:	2102      	movs	r1, #2
 80042f8:	6011      	str	r1, [r2, #0]
 80042fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	fa92 f1a2 	rbit	r1, r2
 8004308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800430c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004310:	6011      	str	r1, [r2, #0]
  return result;
 8004312:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004316:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	fab2 f282 	clz	r2, r2
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f002 021f 	and.w	r2, r2, #31
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f202 	lsl.w	r2, r1, r2
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d184      	bne.n	8004242 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004338:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	4a22      	ldr	r2, [pc, #136]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 8004346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8242 	beq.w	80047e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435e:	4b1c      	ldr	r3, [pc, #112]	@ (80043d0 <HAL_RCC_OscConfig+0xc58>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b08      	cmp	r3, #8
 8004368:	f000 8213 	beq.w	8004792 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004370:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f040 8162 	bne.w	8004642 <HAL_RCC_OscConfig+0xeca>
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004386:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800438a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004390:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	fa93 f2a3 	rbit	r2, r3
 800439a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800439e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043a2:	601a      	str	r2, [r3, #0]
  return result;
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	fab3 f383 	clz	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fc ff04 	bl	80011d0 <HAL_GetTick>
 80043c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043cc:	e00c      	b.n	80043e8 <HAL_RCC_OscConfig+0xc70>
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fc fefc 	bl	80011d0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1fd      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	fa93 f2a3 	rbit	r2, r3
 8004404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004408:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800440c:	601a      	str	r2, [r3, #0]
  return result;
 800440e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004412:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004416:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d102      	bne.n	8004432 <HAL_RCC_OscConfig+0xcba>
 800442c:	4bb0      	ldr	r3, [pc, #704]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	e027      	b.n	8004482 <HAL_RCC_OscConfig+0xd0a>
 8004432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004436:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800443a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800443e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	fa93 f2a3 	rbit	r2, r3
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004460:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	fa93 f2a3 	rbit	r2, r3
 8004474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004478:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	4b9c      	ldr	r3, [pc, #624]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004486:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800448a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800448e:	6011      	str	r1, [r2, #0]
 8004490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004494:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	fa92 f1a2 	rbit	r1, r2
 800449e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044a2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044a6:	6011      	str	r1, [r2, #0]
  return result;
 80044a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	fab2 f282 	clz	r2, r2
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	f042 0220 	orr.w	r2, r2, #32
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	f002 021f 	and.w	r2, r2, #31
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f202 	lsl.w	r2, r1, r2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d182      	bne.n	80043d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ce:	4b88      	ldr	r3, [pc, #544]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	430b      	orrs	r3, r1
 80044f0:	497f      	ldr	r1, [pc, #508]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
 80044f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80044fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004508:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	fa93 f2a3 	rbit	r2, r3
 8004512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004516:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800451a:	601a      	str	r2, [r3, #0]
  return result;
 800451c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004520:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004524:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004530:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	461a      	mov	r2, r3
 8004538:	2301      	movs	r3, #1
 800453a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fc fe48 	bl	80011d0 <HAL_GetTick>
 8004540:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004544:	e009      	b.n	800455a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004546:	f7fc fe43 	bl	80011d0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e144      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
 800455a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004562:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	fa93 f2a3 	rbit	r2, r3
 8004576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800457e:	601a      	str	r2, [r3, #0]
  return result;
 8004580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004584:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004588:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0xe2c>
 800459e:	4b54      	ldr	r3, [pc, #336]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e027      	b.n	80045f4 <HAL_RCC_OscConfig+0xe7c>
 80045a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	fa93 f2a3 	rbit	r2, r3
 80045c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ce:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	fa93 f2a3 	rbit	r2, r3
 80045e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	4b3f      	ldr	r3, [pc, #252]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045f8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80045fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004600:	6011      	str	r1, [r2, #0]
 8004602:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004606:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	fa92 f1a2 	rbit	r1, r2
 8004610:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004614:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004618:	6011      	str	r1, [r2, #0]
  return result;
 800461a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800461e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	fab2 f282 	clz	r2, r2
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	f042 0220 	orr.w	r2, r2, #32
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	f002 021f 	and.w	r2, r2, #31
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f202 	lsl.w	r2, r1, r2
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d082      	beq.n	8004546 <HAL_RCC_OscConfig+0xdce>
 8004640:	e0cf      	b.n	80047e2 <HAL_RCC_OscConfig+0x106a>
 8004642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004646:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800464a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800464e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004654:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	fa93 f2a3 	rbit	r2, r3
 800465e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004662:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004666:	601a      	str	r2, [r3, #0]
  return result;
 8004668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004670:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800467c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	461a      	mov	r2, r3
 8004684:	2300      	movs	r3, #0
 8004686:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fc fda2 	bl	80011d0 <HAL_GetTick>
 800468c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004690:	e009      	b.n	80046a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004692:	f7fc fd9d 	bl	80011d0 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e09e      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
 80046a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046aa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fa93 f2a3 	rbit	r2, r3
 80046c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046ca:	601a      	str	r2, [r3, #0]
  return result;
 80046cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d104      	bne.n	80046f4 <HAL_RCC_OscConfig+0xf7c>
 80046ea:	4b01      	ldr	r3, [pc, #4]	@ (80046f0 <HAL_RCC_OscConfig+0xf78>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	e029      	b.n	8004744 <HAL_RCC_OscConfig+0xfcc>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004706:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004714:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004722:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	fa93 f2a3 	rbit	r2, r3
 8004736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_OscConfig+0x1078>)
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004748:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800474c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004756:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	fa92 f1a2 	rbit	r1, r2
 8004760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004764:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004768:	6011      	str	r1, [r2, #0]
  return result;
 800476a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800476e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	fab2 f282 	clz	r2, r2
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	f042 0220 	orr.w	r2, r2, #32
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	f002 021f 	and.w	r2, r2, #31
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f202 	lsl.w	r2, r1, r2
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d180      	bne.n	8004692 <HAL_RCC_OscConfig+0xf1a>
 8004790:	e027      	b.n	80047e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004796:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e01e      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047a6:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <HAL_RCC_OscConfig+0x1078>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d10b      	bne.n	80047de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047da:	429a      	cmp	r2, r3
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b09e      	sub	sp, #120	@ 0x78
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e162      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b90      	ldr	r3, [pc, #576]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 0207 	bic.w	r2, r3, #7
 8004822:	498b      	ldr	r1, [pc, #556]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b89      	ldr	r3, [pc, #548]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e14a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b82      	ldr	r3, [pc, #520]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	497f      	ldr	r1, [pc, #508]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80dc 	beq.w	8004a20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d13c      	bne.n	80048ea <HAL_RCC_ClockConfig+0xf6>
 8004870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004874:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800487e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <HAL_RCC_ClockConfig+0xa6>
 8004894:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	e00f      	b.n	80048ba <HAL_RCC_ClockConfig+0xc6>
 800489a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800489e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80048a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b6:	4b67      	ldr	r3, [pc, #412]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048c2:	fa92 f2a2 	rbit	r2, r2
 80048c6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048ca:	fab2 f282 	clz	r2, r2
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	f042 0220 	orr.w	r2, r2, #32
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	f002 021f 	and.w	r2, r2, #31
 80048da:	2101      	movs	r1, #1
 80048dc:	fa01 f202 	lsl.w	r2, r1, r2
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d17b      	bne.n	80049de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0f3      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d13c      	bne.n	800496c <HAL_RCC_ClockConfig+0x178>
 80048f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d102      	bne.n	800491c <HAL_RCC_ClockConfig+0x128>
 8004916:	4b4f      	ldr	r3, [pc, #316]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	e00f      	b.n	800493c <HAL_RCC_ClockConfig+0x148>
 800491c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800492e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004938:	4b46      	ldr	r3, [pc, #280]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004940:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004944:	fa92 f2a2 	rbit	r2, r2
 8004948:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800494a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800494c:	fab2 f282 	clz	r2, r2
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	f042 0220 	orr.w	r2, r2, #32
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	f002 021f 	and.w	r2, r2, #31
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d13a      	bne.n	80049de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b2      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
 800496c:	2302      	movs	r3, #2
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <HAL_RCC_ClockConfig+0x1a0>
 800498e:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	e00d      	b.n	80049b0 <HAL_RCC_ClockConfig+0x1bc>
 8004994:	2302      	movs	r3, #2
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a0:	2302      	movs	r3, #2
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	4b29      	ldr	r3, [pc, #164]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	2202      	movs	r2, #2
 80049b2:	61ba      	str	r2, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	fa92 f2a2 	rbit	r2, r2
 80049ba:	617a      	str	r2, [r7, #20]
  return result;
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	fab2 f282 	clz	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f042 0220 	orr.w	r2, r2, #32
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f002 021f 	and.w	r2, r2, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f202 	lsl.w	r2, r1, r2
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e079      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	491a      	ldr	r1, [pc, #104]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fc fbee 	bl	80011d0 <HAL_GetTick>
 80049f4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fc fbea 	bl	80011d0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e061      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d214      	bcs.n	8004a58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	4906      	ldr	r1, [pc, #24]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <HAL_RCC_ClockConfig+0x25c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e040      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x2de>
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a64:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	491a      	ldr	r1, [pc, #104]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a82:	4b16      	ldr	r3, [pc, #88]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4912      	ldr	r1, [pc, #72]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a96:	f000 f829 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <HAL_RCC_ClockConfig+0x2e8>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa4:	22f0      	movs	r2, #240	@ 0xf0
 8004aa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	fa92 f2a2 	rbit	r2, r2
 8004aae:	60fa      	str	r2, [r7, #12]
  return result;
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	40d3      	lsrs	r3, r2
 8004aba:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_ClockConfig+0x2ec>)
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
 8004abe:	fa21 f303 	lsr.w	r3, r1, r3
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <HAL_RCC_ClockConfig+0x2f4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc fb3c 	bl	8001148 <HAL_InitTick>
  
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3778      	adds	r7, #120	@ 0x78
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	08005ea4 	.word	0x08005ea4
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b06:	4b1e      	ldr	r3, [pc, #120]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x30>
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x36>
 8004b1a:	e026      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b1e:	613b      	str	r3, [r7, #16]
      break;
 8004b20:	e026      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0c9b      	lsrs	r3, r3, #18
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b2c:	5cd3      	ldrb	r3, [r2, r3]
 8004b2e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b30:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	4a14      	ldr	r2, [pc, #80]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b48:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e004      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	613b      	str	r3, [r7, #16]
      break;
 8004b68:	e002      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b6a:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b6c:	613b      	str	r3, [r7, #16]
      break;
 8004b6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b70:	693b      	ldr	r3, [r7, #16]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	007a1200 	.word	0x007a1200
 8004b88:	08005eb4 	.word	0x08005eb4
 8004b8c:	08005ec4 	.word	0x08005ec4
 8004b90:	003d0900 	.word	0x003d0900

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b092      	sub	sp, #72	@ 0x48
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80cd 	beq.w	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb8:	4b8e      	ldr	r3, [pc, #568]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10e      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc4:	4b8b      	ldr	r3, [pc, #556]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4a8a      	ldr	r2, [pc, #552]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	61d3      	str	r3, [r2, #28]
 8004bd0:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	4b85      	ldr	r3, [pc, #532]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bee:	4b82      	ldr	r3, [pc, #520]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a81      	ldr	r2, [pc, #516]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fc fae9 	bl	80011d0 <HAL_GetTick>
 8004bfe:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fc fae5 	bl	80011d0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	@ 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0ea      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	4b78      	ldr	r3, [pc, #480]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c20:	4b74      	ldr	r3, [pc, #464]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d07d      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d076      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b66      	ldr	r3, [pc, #408]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7c:	fab3 f383 	clz	r3, r3
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	4b5d      	ldr	r3, [pc, #372]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c90:	4a58      	ldr	r2, [pc, #352]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c94:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d045      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fc fa96 	bl	80011d0 <HAL_GetTick>
 8004ca4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fc fa92 	bl	80011d0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e095      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cca:	2302      	movs	r3, #2
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	61fb      	str	r3, [r7, #28]
  return result;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f043 0302 	orr.w	r3, r3, #2
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004cec:	4b41      	ldr	r3, [pc, #260]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	e007      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	2202      	movs	r2, #2
 8004d04:	613a      	str	r2, [r7, #16]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	fa92 f2a2 	rbit	r2, r2
 8004d0c:	60fa      	str	r2, [r7, #12]
  return result;
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	fab2 f282 	clz	r2, r2
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	f002 021f 	and.w	r2, r2, #31
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f202 	lsl.w	r2, r1, r2
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0bd      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d2c:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	492e      	ldr	r1, [pc, #184]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d46:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4922      	ldr	r1, [pc, #136]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	f023 0210 	bic.w	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	491a      	ldr	r1, [pc, #104]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d9a:	4b16      	ldr	r3, [pc, #88]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	4913      	ldr	r1, [pc, #76]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004db8:	4b0e      	ldr	r3, [pc, #56]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	490b      	ldr	r1, [pc, #44]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004dd6:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3748      	adds	r7, #72	@ 0x48
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	10908100 	.word	0x10908100

08004e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e049      	b.n	8004ea6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f840 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f000 fba8 	bl	8005594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e049      	b.n	8004f54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f841 	bl	8004f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 fb51 	bl	8005594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 facb 	bl	8005556 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fabd 	bl	8005542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 face 	bl	800556a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0204 	mvn.w	r2, #4
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 faa5 	bl	8005556 <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fa97 	bl	8005542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 faa8 	bl	800556a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d020      	beq.n	800506c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0208 	mvn.w	r2, #8
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2204      	movs	r2, #4
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa7f 	bl	8005556 <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa71 	bl	8005542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fa82 	bl	800556a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	d020      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01b      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa59 	bl	8005556 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa4b 	bl	8005542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa5c 	bl	800556a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00c      	beq.n	80050dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0201 	mvn.w	r2, #1
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa29 	bl	800552e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fe86 	bl	8005e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fe7e 	bl	8005e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa1b 	bl	800557e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0220 	mvn.w	r2, #32
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fe46 	bl	8005df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800518e:	2302      	movs	r3, #2
 8005190:	e0ff      	b.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b14      	cmp	r3, #20
 800519e:	f200 80f0 	bhi.w	8005382 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051a2:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051fd 	.word	0x080051fd
 80051ac:	08005383 	.word	0x08005383
 80051b0:	08005383 	.word	0x08005383
 80051b4:	08005383 	.word	0x08005383
 80051b8:	0800523d 	.word	0x0800523d
 80051bc:	08005383 	.word	0x08005383
 80051c0:	08005383 	.word	0x08005383
 80051c4:	08005383 	.word	0x08005383
 80051c8:	0800527f 	.word	0x0800527f
 80051cc:	08005383 	.word	0x08005383
 80051d0:	08005383 	.word	0x08005383
 80051d4:	08005383 	.word	0x08005383
 80051d8:	080052bf 	.word	0x080052bf
 80051dc:	08005383 	.word	0x08005383
 80051e0:	08005383 	.word	0x08005383
 80051e4:	08005383 	.word	0x08005383
 80051e8:	08005301 	.word	0x08005301
 80051ec:	08005383 	.word	0x08005383
 80051f0:	08005383 	.word	0x08005383
 80051f4:	08005383 	.word	0x08005383
 80051f8:	08005341 	.word	0x08005341
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fa4a 	bl	800569c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0208 	orr.w	r2, r2, #8
 8005216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0204 	bic.w	r2, r2, #4
 8005226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6999      	ldr	r1, [r3, #24]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	619a      	str	r2, [r3, #24]
      break;
 800523a:	e0a5      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fab0 	bl	80057a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6999      	ldr	r1, [r3, #24]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	021a      	lsls	r2, r3, #8
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	619a      	str	r2, [r3, #24]
      break;
 800527c:	e084      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fb0f 	bl	80058a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0208 	orr.w	r2, r2, #8
 8005298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0204 	bic.w	r2, r2, #4
 80052a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69d9      	ldr	r1, [r3, #28]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	61da      	str	r2, [r3, #28]
      break;
 80052bc:	e064      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fb6d 	bl	80059a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69d9      	ldr	r1, [r3, #28]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	021a      	lsls	r2, r3, #8
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	61da      	str	r2, [r3, #28]
      break;
 80052fe:	e043      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fbb0 	bl	8005a6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0208 	orr.w	r2, r2, #8
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0204 	bic.w	r2, r2, #4
 800532a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800533e:	e023      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fbee 	bl	8005b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800535a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	021a      	lsls	r2, r3, #8
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005380:	e002      	b.n	8005388 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop

0800539c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIM_ConfigClockSource+0x1c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e0b6      	b.n	8005526 <HAL_TIM_ConfigClockSource+0x18a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053f4:	d03e      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0xd8>
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fa:	f200 8087 	bhi.w	800550c <HAL_TIM_ConfigClockSource+0x170>
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005402:	f000 8086 	beq.w	8005512 <HAL_TIM_ConfigClockSource+0x176>
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540a:	d87f      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 800540c:	2b70      	cmp	r3, #112	@ 0x70
 800540e:	d01a      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xaa>
 8005410:	2b70      	cmp	r3, #112	@ 0x70
 8005412:	d87b      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 8005414:	2b60      	cmp	r3, #96	@ 0x60
 8005416:	d050      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x11e>
 8005418:	2b60      	cmp	r3, #96	@ 0x60
 800541a:	d877      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 800541c:	2b50      	cmp	r3, #80	@ 0x50
 800541e:	d03c      	beq.n	800549a <HAL_TIM_ConfigClockSource+0xfe>
 8005420:	2b50      	cmp	r3, #80	@ 0x50
 8005422:	d873      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	d058      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x13e>
 8005428:	2b40      	cmp	r3, #64	@ 0x40
 800542a:	d86f      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 800542c:	2b30      	cmp	r3, #48	@ 0x30
 800542e:	d064      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x15e>
 8005430:	2b30      	cmp	r3, #48	@ 0x30
 8005432:	d86b      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 8005434:	2b20      	cmp	r3, #32
 8005436:	d060      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x15e>
 8005438:	2b20      	cmp	r3, #32
 800543a:	d867      	bhi.n	800550c <HAL_TIM_ConfigClockSource+0x170>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05c      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x15e>
 8005440:	2b10      	cmp	r3, #16
 8005442:	d05a      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x15e>
 8005444:	e062      	b.n	800550c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005456:	f000 fc41 	bl	8005cdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	609a      	str	r2, [r3, #8]
      break;
 8005472:	e04f      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005484:	f000 fc2a 	bl	8005cdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005496:	609a      	str	r2, [r3, #8]
      break;
 8005498:	e03c      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 fb9e 	bl	8005be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2150      	movs	r1, #80	@ 0x50
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fbf7 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 80054b8:	e02c      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 fbbd 	bl	8005c46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2160      	movs	r1, #96	@ 0x60
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fbe7 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e01c      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 fb7e 	bl	8005be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2140      	movs	r1, #64	@ 0x40
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fbd7 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 80054f8:	e00c      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f000 fbce 	bl	8005ca6 <TIM_ITRx_SetConfig>
      break;
 800550a:	e003      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e000      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a38      	ldr	r2, [pc, #224]	@ (8005688 <TIM_Base_SetConfig+0xf4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x28>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x28>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a35      	ldr	r2, [pc, #212]	@ (800568c <TIM_Base_SetConfig+0xf8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005688 <TIM_Base_SetConfig+0xf4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <TIM_Base_SetConfig+0x6a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d00f      	beq.n	80055fe <TIM_Base_SetConfig+0x6a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	@ (800568c <TIM_Base_SetConfig+0xf8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_Base_SetConfig+0x6a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a29      	ldr	r2, [pc, #164]	@ (8005690 <TIM_Base_SetConfig+0xfc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_Base_SetConfig+0x6a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a28      	ldr	r2, [pc, #160]	@ (8005694 <TIM_Base_SetConfig+0x100>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_Base_SetConfig+0x6a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a27      	ldr	r2, [pc, #156]	@ (8005698 <TIM_Base_SetConfig+0x104>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d108      	bne.n	8005610 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a14      	ldr	r2, [pc, #80]	@ (8005688 <TIM_Base_SetConfig+0xf4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_Base_SetConfig+0xc0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <TIM_Base_SetConfig+0xfc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <TIM_Base_SetConfig+0x100>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a12      	ldr	r2, [pc, #72]	@ (8005698 <TIM_Base_SetConfig+0x104>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d103      	bne.n	800565c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]
  }
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40000400 	.word	0x40000400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f023 0201 	bic.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 0302 	bic.w	r3, r3, #2
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a28      	ldr	r2, [pc, #160]	@ (8005798 <TIM_OC1_SetConfig+0xfc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_OC1_SetConfig+0x78>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a27      	ldr	r2, [pc, #156]	@ (800579c <TIM_OC1_SetConfig+0x100>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_OC1_SetConfig+0x78>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a26      	ldr	r2, [pc, #152]	@ (80057a0 <TIM_OC1_SetConfig+0x104>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC1_SetConfig+0x78>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a25      	ldr	r2, [pc, #148]	@ (80057a4 <TIM_OC1_SetConfig+0x108>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10c      	bne.n	800572e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0308 	bic.w	r3, r3, #8
 800571a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a19      	ldr	r2, [pc, #100]	@ (8005798 <TIM_OC1_SetConfig+0xfc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_OC1_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a18      	ldr	r2, [pc, #96]	@ (800579c <TIM_OC1_SetConfig+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_OC1_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <TIM_OC1_SetConfig+0x104>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC1_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a16      	ldr	r2, [pc, #88]	@ (80057a4 <TIM_OC1_SetConfig+0x108>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d111      	bne.n	8005772 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	621a      	str	r2, [r3, #32]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800

080057a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f023 0210 	bic.w	r2, r3, #16
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0320 	bic.w	r3, r3, #32
 80057f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a24      	ldr	r2, [pc, #144]	@ (8005898 <TIM_OC2_SetConfig+0xf0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d10d      	bne.n	8005828 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005826:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1b      	ldr	r2, [pc, #108]	@ (8005898 <TIM_OC2_SetConfig+0xf0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_OC2_SetConfig+0xa0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1a      	ldr	r2, [pc, #104]	@ (800589c <TIM_OC2_SetConfig+0xf4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_OC2_SetConfig+0xa0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <TIM_OC2_SetConfig+0xf8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC2_SetConfig+0xa0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a18      	ldr	r2, [pc, #96]	@ (80058a4 <TIM_OC2_SetConfig+0xfc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d113      	bne.n	8005870 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800584e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005856:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800

080058a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a23      	ldr	r2, [pc, #140]	@ (8005994 <TIM_OC3_SetConfig+0xec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10d      	bne.n	8005926 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005924:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1a      	ldr	r2, [pc, #104]	@ (8005994 <TIM_OC3_SetConfig+0xec>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00b      	beq.n	8005946 <TIM_OC3_SetConfig+0x9e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a19      	ldr	r2, [pc, #100]	@ (8005998 <TIM_OC3_SetConfig+0xf0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <TIM_OC3_SetConfig+0x9e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a18      	ldr	r2, [pc, #96]	@ (800599c <TIM_OC3_SetConfig+0xf4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_OC3_SetConfig+0x9e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a17      	ldr	r2, [pc, #92]	@ (80059a0 <TIM_OC3_SetConfig+0xf8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d113      	bne.n	800596e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800

080059a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <TIM_OC4_SetConfig+0xb8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <TIM_OC4_SetConfig+0x7c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <TIM_OC4_SetConfig+0xbc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_OC4_SetConfig+0x7c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a14      	ldr	r2, [pc, #80]	@ (8005a64 <TIM_OC4_SetConfig+0xc0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_OC4_SetConfig+0x7c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a13      	ldr	r2, [pc, #76]	@ (8005a68 <TIM_OC4_SetConfig+0xc4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d109      	bne.n	8005a34 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <TIM_OC5_SetConfig+0xac>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC5_SetConfig+0x72>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a14      	ldr	r2, [pc, #80]	@ (8005b1c <TIM_OC5_SetConfig+0xb0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_OC5_SetConfig+0x72>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <TIM_OC5_SetConfig+0xb4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC5_SetConfig+0x72>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <TIM_OC5_SetConfig+0xb8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d109      	bne.n	8005af2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	051b      	lsls	r3, r3, #20
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	@ (8005bd8 <TIM_OC6_SetConfig+0xb0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <TIM_OC6_SetConfig+0x74>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <TIM_OC6_SetConfig+0xb4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_OC6_SetConfig+0x74>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a14      	ldr	r2, [pc, #80]	@ (8005be0 <TIM_OC6_SetConfig+0xb8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC6_SetConfig+0x74>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a13      	ldr	r2, [pc, #76]	@ (8005be4 <TIM_OC6_SetConfig+0xbc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d109      	bne.n	8005bb0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800

08005be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f023 030a 	bic.w	r3, r3, #10
 8005c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b087      	sub	sp, #28
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f023 0210 	bic.w	r2, r3, #16
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	031b      	lsls	r3, r3, #12
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f043 0307 	orr.w	r3, r3, #7
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	609a      	str	r2, [r3, #8]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e054      	b.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a24      	ldr	r2, [pc, #144]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d108      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a11      	ldr	r2, [pc, #68]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10c      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40014000 	.word	0x40014000

08005df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	@ (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	@ (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	@ (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	@ (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 f818 	bl	8005e8c <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08005ed4 	.word	0x08005ed4
 8005e80:	08005ed4 	.word	0x08005ed4
 8005e84:	08005ed4 	.word	0x08005ed4
 8005e88:	08005ed8 	.word	0x08005ed8

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
