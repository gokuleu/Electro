
Electro_Bringup_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a80  08007a80  0000905c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a80  08007a80  0000905c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a80  08007a80  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a80  08007a80  00008a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a84  08007a84  00008a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007a88  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000905c  2**0
                  CONTENTS
 10 .bss          00000474  2000005c  2000005c  0000905c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  0000905c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001327f  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002693  00000000  00000000  0001c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  0001e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e43  00000000  00000000  0001fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e03  00000000  00000000  00020a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015346  00000000  00000000  00042826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9c89  00000000  00000000  00057b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001317f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005320  00000000  00000000  00131838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00136b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a34 	.word	0x08007a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08007a34 	.word	0x08007a34

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <moving_Temperature_measured_fun_M>:
uint8_t RxData[8];
uint8_t TxData[8];
float temp_out;

float moving_Temperature_measured_fun_M( float current_val , float MOV_AVG_SAMPLE)   // 0.1 amp Batt_current_measured
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b4a:	edc7 0a00 	vstr	s1, [r7]
    static float Prev_current_val;
    float Bus_Current_Error_value;
    Bus_Current_Error_value = (current_val - Prev_current_val);
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <moving_Temperature_measured_fun_M+0x58>)
 8000b50:	edd3 7a00 	vldr	s15, [r3]
 8000b54:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5c:	edc7 7a03 	vstr	s15, [r7, #12]
    Prev_current_val += (Bus_Current_Error_value / MOV_AVG_SAMPLE);
 8000b60:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b64:	edd7 7a00 	vldr	s15, [r7]
 8000b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <moving_Temperature_measured_fun_M+0x58>)
 8000b6e:	edd3 7a00 	vldr	s15, [r3]
 8000b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <moving_Temperature_measured_fun_M+0x58>)
 8000b78:	edc3 7a00 	vstr	s15, [r3]
    current_val = Prev_current_val ;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <moving_Temperature_measured_fun_M+0x58>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	607b      	str	r3, [r7, #4]
    return current_val ;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	ee07 3a90 	vmov	s15, r3
}
 8000b88:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200000a8 	.word	0x200000a8
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <Send_on_CAN>:

void Send_on_CAN(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
	  uint32_t time_count = HAL_GetTick();
 8000ba6:	f001 f9e1 	bl	8001f6c <HAL_GetTick>
 8000baa:	6278      	str	r0, [r7, #36]	@ 0x24
	  static uint32_t Prev_time = 0;
	  uint8_t tempxxxx;
	  if(time_count - Prev_time > 100){
 8000bac:	4b5e      	ldr	r3, [pc, #376]	@ (8000d28 <Send_on_CAN+0x188>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b64      	cmp	r3, #100	@ 0x64
 8000bb6:	f240 80a2 	bls.w	8000cfe <Send_on_CAN+0x15e>
		  	Prev_time = time_count;
 8000bba:	4a5b      	ldr	r2, [pc, #364]	@ (8000d28 <Send_on_CAN+0x188>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	6013      	str	r3, [r2, #0]
		  	double resistance = (ADC_VAL_1[4] * NTC_PULL_UP_RESISTOR)/(Adc_max_COUNT - ADC_VAL_1[4]);
 8000bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000bc2:	891b      	ldrh	r3, [r3, #8]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000bca:	fb03 f202 	mul.w	r2, r3, r2
 8000bce:	4b57      	ldr	r3, [pc, #348]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000bd0:	891b      	ldrh	r3, [r3, #8]
 8000bd2:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000bd6:	330f      	adds	r3, #15
 8000bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fc45 	bl	800046c <__aeabi_i2d>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  	     double temp_K = resistance/NTC_PULL_UP_RESISTOR;
 8000bea:	a347      	add	r3, pc, #284	@ (adr r3, 8000d08 <Send_on_CAN+0x168>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000bf4:	f7ff fdce 	bl	8000794 <__aeabi_ddiv>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  	     temp_K = log(temp_K);
 8000c00:	ed97 0b04 	vldr	d0, [r7, #16]
 8000c04:	f006 fd18 	bl	8007638 <log>
 8000c08:	ed87 0b04 	vstr	d0, [r7, #16]
		  	     temp_K /= BETA_VALUE;
 8000c0c:	a340      	add	r3, pc, #256	@ (adr r3, 8000d10 <Send_on_CAN+0x170>)
 8000c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c16:	f7ff fdbd 	bl	8000794 <__aeabi_ddiv>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  	     temp_K += 1.0/(T_AMBIENT + KELVIN_TO_CELSIUS);
 8000c22:	a33d      	add	r3, pc, #244	@ (adr r3, 8000d18 <Send_on_CAN+0x178>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c2c:	f7ff fad2 	bl	80001d4 <__adddf3>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  	     temp_K = 1.0/temp_K;
 8000c38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	493b      	ldr	r1, [pc, #236]	@ (8000d30 <Send_on_CAN+0x190>)
 8000c42:	f7ff fda7 	bl	8000794 <__aeabi_ddiv>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  	     temp_K -= KELVIN_TO_CELSIUS;
 8000c4e:	a334      	add	r3, pc, #208	@ (adr r3, 8000d20 <Send_on_CAN+0x180>)
 8000c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c58:	f7ff faba 	bl	80001d0 <__aeabi_dsub>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  	   temp_out = moving_Temperature_measured_fun_M(temp_K, TEMP_AVG);
 8000c64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c68:	f7ff ff1a 	bl	8000aa0 <__aeabi_d2f>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000c72:	ee00 3a10 	vmov	s0, r3
 8000c76:	f7ff ff63 	bl	8000b40 <moving_Temperature_measured_fun_M>
 8000c7a:	eef0 7a40 	vmov.f32	s15, s0
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <Send_on_CAN+0x194>)
 8000c80:	edc3 7a00 	vstr	s15, [r3]
		  	 tempxxxx=temp_out;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <Send_on_CAN+0x194>)
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	73fb      	strb	r3, [r7, #15]


		  	TxData[0] = ADC_VAL_1[0]&0xff;
 8000c96:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <Send_on_CAN+0x198>)
 8000c9e:	701a      	strb	r2, [r3, #0]
		  	TxData[1] = (ADC_VAL_1[0]&0xff00)>>8;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cac:	705a      	strb	r2, [r3, #1]
		  	TxData[2] = ADC_VAL_1[1]&0xff;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000cb0:	885b      	ldrh	r3, [r3, #2]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cb6:	709a      	strb	r2, [r3, #2]
		  	TxData[3] = (ADC_VAL_1[1]&0xff00)>>8;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cc4:	70da      	strb	r2, [r3, #3]
		  	TxData[4] = ADC_VAL_1[2]&0xff;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000cc8:	889b      	ldrh	r3, [r3, #4]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cce:	711a      	strb	r2, [r3, #4]
		  	TxData[5] = (ADC_VAL_1[2]&0xff00)>>8;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000cd2:	889b      	ldrh	r3, [r3, #4]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cdc:	715a      	strb	r2, [r3, #5]
		  	TxData[6] = ADC_VAL_1[3]&0xff;
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <Send_on_CAN+0x18c>)
 8000ce0:	88db      	ldrh	r3, [r3, #6]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <Send_on_CAN+0x198>)
 8000ce6:	719a      	strb	r2, [r3, #6]
		  	TxData[7] = tempxxxx;
 8000ce8:	4a13      	ldr	r2, [pc, #76]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	71d3      	strb	r3, [r2, #7]

		  	Transmit_On_CAN(0x18FF50E5, TxData);
 8000cee:	4912      	ldr	r1, [pc, #72]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cf0:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <Send_on_CAN+0x19c>)
 8000cf2:	f000 f827 	bl	8000d44 <Transmit_On_CAN>
		  	Transmit_On_CAN(0x18FF50E6, TxData);
 8000cf6:	4910      	ldr	r1, [pc, #64]	@ (8000d38 <Send_on_CAN+0x198>)
 8000cf8:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <Send_on_CAN+0x1a0>)
 8000cfa:	f000 f823 	bl	8000d44 <Transmit_On_CAN>
		  }
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	@ 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	40c38800 	.word	0x40c38800
 8000d10:	00000000 	.word	0x00000000
 8000d14:	40af2000 	.word	0x40af2000
 8000d18:	dcb5db83 	.word	0xdcb5db83
 8000d1c:	3f6b79e1 	.word	0x3f6b79e1
 8000d20:	66666666 	.word	0x66666666
 8000d24:	40711266 	.word	0x40711266
 8000d28:	200000ac 	.word	0x200000ac
 8000d2c:	20000374 	.word	0x20000374
 8000d30:	3ff00000 	.word	0x3ff00000
 8000d34:	200000a4 	.word	0x200000a4
 8000d38:	2000009c 	.word	0x2000009c
 8000d3c:	18ff50e5 	.word	0x18ff50e5
 8000d40:	18ff50e6 	.word	0x18ff50e6

08000d44 <Transmit_On_CAN>:

void Transmit_On_CAN(uint32_t id, uint8_t data[8]){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef TxHeader = {
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	2304      	movs	r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
		    .DLC = 8	,
		    .TransmitGlobalTime = DISABLE
	};

	uint32_t txMailbox;
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0){}
 8000d6c:	bf00      	nop
 8000d6e:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <Transmit_On_CAN+0x58>)
 8000d70:	f002 fb1f 	bl	80033b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <Transmit_On_CAN+0x2a>
	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, (uint8_t*)data , &txMailbox) != HAL_OK){
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <Transmit_On_CAN+0x58>)
 8000d86:	f002 fa44 	bl	8003212 <HAL_CAN_AddTxMessage>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <Transmit_On_CAN+0x50>
		Error_Handler();
 8000d90:	f000 fd78 	bl	8001884 <Error_Handler>
	}

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	@ 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200001d8 	.word	0x200001d8

08000da0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage (CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8000da8:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000daa:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f002 fb34 	bl	800341c <HAL_CAN_GetRxMessage>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000dba:	f000 fd63 	bl	8001884 <Error_Handler>

	if(RxHeader.StdId == 0x001){

	}

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000094 	.word	0x20000094
 8000dcc:	20000078 	.word	0x20000078

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f001 f870 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f87e 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 fcfa 	bl	80017d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de0:	f000 fcd2 	bl	8001788 <MX_DMA_Init>
  MX_CAN_Init();
 8000de4:	f000 fa08 	bl	80011f8 <MX_CAN_Init>
  MX_ADC1_Init();
 8000de8:	f000 f8d2 	bl	8000f90 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000dec:	f000 fc7a 	bl	80016e4 <MX_TIM15_Init>
  MX_TIM3_Init();
 8000df0:	f000 fc02 	bl	80015f8 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000df4:	f000 f992 	bl	800111c <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8000df8:	f000 fa66 	bl	80012c8 <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc1, ADC_VAL_1, 7) != HAL_OK) {
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	492a      	ldr	r1, [pc, #168]	@ (8000ea8 <main+0xd8>)
 8000e00:	482a      	ldr	r0, [pc, #168]	@ (8000eac <main+0xdc>)
 8000e02:	f001 fa6f 	bl	80022e4 <HAL_ADC_Start_DMA>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <main+0x40>
       Error_Handler();  // <-- Might be going here
 8000e0c:	f000 fd3a 	bl	8001884 <Error_Handler>
   }
  if (HAL_ADC_Start_DMA(&hadc2, ADC_VAL_2, 2) != HAL_OK) {
 8000e10:	2202      	movs	r2, #2
 8000e12:	4927      	ldr	r1, [pc, #156]	@ (8000eb0 <main+0xe0>)
 8000e14:	4827      	ldr	r0, [pc, #156]	@ (8000eb4 <main+0xe4>)
 8000e16:	f001 fa65 	bl	80022e4 <HAL_ADC_Start_DMA>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <main+0x54>
         Error_Handler();  // <-- Might be going here
 8000e20:	f000 fd30 	bl	8001884 <Error_Handler>
     }
  HAL_TIM_Base_Start(&htim15);
 8000e24:	4824      	ldr	r0, [pc, #144]	@ (8000eb8 <main+0xe8>)
 8000e26:	f005 fbfd 	bl	8006624 <HAL_TIM_Base_Start>
  TIM3->CCR4 = 90;
 8000e2a:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <main+0xec>)
 8000e2c:	225a      	movs	r2, #90	@ 0x5a
 8000e2e:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_Base_Start(&htim3);
 8000e30:	4823      	ldr	r0, [pc, #140]	@ (8000ec0 <main+0xf0>)
 8000e32:	f005 fbf7 	bl	8006624 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e36:	210c      	movs	r1, #12
 8000e38:	4821      	ldr	r0, [pc, #132]	@ (8000ec0 <main+0xf0>)
 8000e3a:	f005 fca9 	bl	8006790 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e44:	481f      	ldr	r0, [pc, #124]	@ (8000ec4 <main+0xf4>)
 8000e46:	f003 fa7b 	bl	8004340 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <main+0xf4>)
 8000e50:	f003 fa76 	bl	8004340 <HAL_GPIO_WritePin>
  // Start the HRTIM Timer C PWM outputs
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 8000e54:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000e58:	481b      	ldr	r0, [pc, #108]	@ (8000ec8 <main+0xf8>)
 8000e5a:	f003 fccd 	bl	80047f8 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_B);
 8000e5e:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8000e62:	4819      	ldr	r0, [pc, #100]	@ (8000ec8 <main+0xf8>)
 8000e64:	f003 fcc8 	bl	80047f8 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);
 8000e68:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8000e6c:	4816      	ldr	r0, [pc, #88]	@ (8000ec8 <main+0xf8>)
 8000e6e:	f003 fcc3 	bl	80047f8 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_D);
 8000e72:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000e76:	4814      	ldr	r0, [pc, #80]	@ (8000ec8 <main+0xf8>)
 8000e78:	f003 fcbe 	bl	80047f8 <HAL_HRTIM_WaveformCountStart>
//  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1);
//  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2
 8000e7c:	21ff      	movs	r1, #255	@ 0xff
 8000e7e:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <main+0xf8>)
 8000e80:	f003 fc8d 	bl	800479e <HAL_HRTIM_WaveformOutputStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
  while (1)
  {
	Send_on_CAN();
 8000e84:	f7ff fe8c 	bl	8000ba0 <Send_on_CAN>
	count++;
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <main+0xfc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <main+0xfc>)
 8000e90:	6013      	str	r3, [r2, #0]
//	voltage=(420/4096)*ADC_VAL[2];
	voltage=ADC_VAL_1[2];
 8000e92:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <main+0xd8>)
 8000e94:	889a      	ldrh	r2, [r3, #4]
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <main+0x100>)
 8000e98:	801a      	strh	r2, [r3, #0]
	temp1=ADC_VAL_2[1];
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <main+0xe0>)
 8000e9c:	885a      	ldrh	r2, [r3, #2]
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <main+0x104>)
 8000ea0:	801a      	strh	r2, [r3, #0]
	Send_on_CAN();
 8000ea2:	bf00      	nop
 8000ea4:	e7ee      	b.n	8000e84 <main+0xb4>
 8000ea6:	bf00      	nop
 8000ea8:	20000374 	.word	0x20000374
 8000eac:	200000b0 	.word	0x200000b0
 8000eb0:	20000384 	.word	0x20000384
 8000eb4:	20000100 	.word	0x20000100
 8000eb8:	20000328 	.word	0x20000328
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	200002dc 	.word	0x200002dc
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	20000200 	.word	0x20000200
 8000ecc:	20000388 	.word	0x20000388
 8000ed0:	2000038c 	.word	0x2000038c
 8000ed4:	2000038e 	.word	0x2000038e

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	@ 0x58
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ee2:	2228      	movs	r2, #40	@ 0x28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f006 fb74 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f12:	2301      	movs	r3, #1
 8000f14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	2310      	movs	r3, #16
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000f22:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000f26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 ffdd 	bl	8004eec <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000f38:	f000 fca4 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f806 	bl	8005f68 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f62:	f000 fc8f 	bl	8001884 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_ADC12;
 8000f66:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000f6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_HCLK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 f9c5 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f84:	f000 fc7e 	bl	8001884 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3758      	adds	r7, #88	@ 0x58
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b59      	ldr	r3, [pc, #356]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fba:	4b57      	ldr	r3, [pc, #348]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b55      	ldr	r3, [pc, #340]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fc6:	4b54      	ldr	r3, [pc, #336]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fcc:	4b52      	ldr	r3, [pc, #328]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd2:	4b51      	ldr	r3, [pc, #324]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fda:	4b4f      	ldr	r3, [pc, #316]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fe4:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fea:	4b4b      	ldr	r3, [pc, #300]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000ff0:	4b49      	ldr	r3, [pc, #292]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ff6:	4b48      	ldr	r3, [pc, #288]	@ (8001118 <MX_ADC1_Init+0x188>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ffe:	4b46      	ldr	r3, [pc, #280]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001000:	2208      	movs	r2, #8
 8001002:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001004:	4b44      	ldr	r3, [pc, #272]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001006:	2200      	movs	r2, #0
 8001008:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800100a:	4b43      	ldr	r3, [pc, #268]	@ (8001118 <MX_ADC1_Init+0x188>)
 800100c:	2200      	movs	r2, #0
 800100e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4841      	ldr	r0, [pc, #260]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001012:	f000 ffd5 	bl	8001fc0 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800101c:	f000 fc32 	bl	8001884 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	483b      	ldr	r0, [pc, #236]	@ (8001118 <MX_ADC1_Init+0x188>)
 800102c:	f001 fcf2 	bl	8002a14 <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001036:	f000 fc25 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800103a:	2301      	movs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4830      	ldr	r0, [pc, #192]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001058:	f001 fa1e 	bl	8002498 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001062:	f000 fc0f 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001066:	2302      	movs	r3, #2
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800106a:	2302      	movs	r3, #2
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4829      	ldr	r0, [pc, #164]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001074:	f001 fa10 	bl	8002498 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800107e:	f000 fc01 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001082:	2303      	movs	r3, #3
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001086:	2303      	movs	r3, #3
 8001088:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4822      	ldr	r0, [pc, #136]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001090:	f001 fa02 	bl	8002498 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800109a:	f000 fbf3 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800109e:	2304      	movs	r3, #4
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010a2:	2304      	movs	r3, #4
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	481b      	ldr	r0, [pc, #108]	@ (8001118 <MX_ADC1_Init+0x188>)
 80010ac:	f001 f9f4 	bl	8002498 <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 80010b6:	f000 fbe5 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010ba:	2306      	movs	r3, #6
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010be:	2305      	movs	r3, #5
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x188>)
 80010c8:	f001 f9e6 	bl	8002498 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80010d2:	f000 fbd7 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010d6:	2307      	movs	r3, #7
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010da:	2306      	movs	r3, #6
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x188>)
 80010e4:	f001 f9d8 	bl	8002498 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80010ee:	f000 fbc9 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010f2:	2308      	movs	r3, #8
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_ADC1_Init+0x188>)
 8001100:	f001 f9ca 	bl	8002498 <HAL_ADC_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 800110a:	f000 fbbb 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0

0800111c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001132:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001134:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <MX_ADC2_Init+0xd8>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001146:	2201      	movs	r2, #1
 8001148:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800114a:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 800114c:	2200      	movs	r2, #0
 800114e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001158:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 800115a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001162:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001166:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001170:	2202      	movs	r2, #2
 8001172:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 800117e:	2208      	movs	r2, #8
 8001180:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001184:	2200      	movs	r2, #0
 8001186:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800118e:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 8001190:	f000 ff16 	bl	8001fc0 <HAL_ADC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 800119a:	f000 fb73 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800119e:	2302      	movs	r3, #2
 80011a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 80011bc:	f001 f96c 	bl	8002498 <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 80011c6:	f000 fb5d 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <MX_ADC2_Init+0xd4>)
 80011d8:	f001 f95e 	bl	8002498 <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80011e2:	f000 fb4f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000100 	.word	0x20000100
 80011f4:	50000100 	.word	0x50000100

080011f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80011fe:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001200:	4a30      	ldr	r2, [pc, #192]	@ (80012c4 <MX_CAN_Init+0xcc>)
 8001202:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001204:	4b2e      	ldr	r3, [pc, #184]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001206:	2204      	movs	r2, #4
 8001208:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800120a:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <MX_CAN_Init+0xc8>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001210:	4b2b      	ldr	r3, [pc, #172]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001216:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001218:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800121c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001220:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001224:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001228:	2200      	movs	r2, #0
 800122a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800122c:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <MX_CAN_Init+0xc8>)
 800122e:	2200      	movs	r2, #0
 8001230:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001232:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001234:	2200      	movs	r2, #0
 8001236:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001238:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <MX_CAN_Init+0xc8>)
 800123a:	2200      	movs	r2, #0
 800123c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001240:	2200      	movs	r2, #0
 8001242:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001246:	2200      	movs	r2, #0
 8001248:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800124a:	481d      	ldr	r0, [pc, #116]	@ (80012c0 <MX_CAN_Init+0xc8>)
 800124c:	f001 fdd8 	bl	8002e00 <HAL_CAN_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001256:	f000 fb15 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001262:	2301      	movs	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800127e:	230e      	movs	r3, #14
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001288:	f001 feb5 	bl	8002ff6 <HAL_CAN_ConfigFilter>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001292:	f000 faf7 	bl	8001884 <Error_Handler>
  }
 /* Starting the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001296:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <MX_CAN_Init+0xc8>)
 8001298:	f001 ff77 	bl	800318a <HAL_CAN_Start>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_CAN_Init+0xae>
  {
    /* Start Error */
    Error_Handler();
 80012a2:	f000 faef 	bl	8001884 <Error_Handler>
  }
 /* Activate CAN RX notification on FIFO0 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80012a6:	2102      	movs	r1, #2
 80012a8:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_CAN_Init+0xc8>)
 80012aa:	f002 f9d9 	bl	8003660 <HAL_CAN_ActivateNotification>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_CAN_Init+0xc0>
  {
    /* Notification Error */
    Error_Handler();
 80012b4:	f000 fae6 	bl	8001884 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	@ 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200001d8 	.word	0x200001d8
 80012c4:	40006400 	.word	0x40006400

080012c8 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0aa      	sub	sp, #168	@ 0xa8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80012ce:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80012dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012e0:	2254      	movs	r2, #84	@ 0x54
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f006 f975 	bl	80075d4 <memset>
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2224      	movs	r2, #36	@ 0x24
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f96e 	bl	80075d4 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2220      	movs	r2, #32
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f006 f968 	bl	80075d4 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8001304:	4bba      	ldr	r3, [pc, #744]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001306:	4abb      	ldr	r2, [pc, #748]	@ (80015f4 <MX_HRTIM1_Init+0x32c>)
 8001308:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800130a:	4bb9      	ldr	r3, [pc, #740]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001310:	4bb7      	ldr	r3, [pc, #732]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001316:	48b6      	ldr	r0, [pc, #728]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001318:	f003 f82a 	bl	8004370 <HAL_HRTIM_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_HRTIM1_Init+0x5e>
  {
    Error_Handler();
 8001322:	f000 faaf 	bl	8001884 <Error_Handler>
  }
  pTimeBaseCfg.Period = 16000;
 8001326:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800132a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8001334:	2305      	movs	r3, #5
 8001336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800133a:	2308      	movs	r3, #8
 800133c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001340:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001344:	461a      	mov	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	48a9      	ldr	r0, [pc, #676]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 800134a:	f003 f8dd 	bl	8004508 <HAL_HRTIM_TimeBaseConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_HRTIM1_Init+0x90>
  {
    Error_Handler();
 8001354:	f000 fa96 	bl	8001884 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.DMASrcAddress = 0x0000;
 8001360:	2300      	movs	r3, #0
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DMADstAddress = 0x0000;
 8001364:	2300      	movs	r3, #0
 8001366:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.DMASize = 0x1;
 8001368:	2301      	movs	r3, #1
 800136a:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_ENABLED;
 800136c:	2320      	movs	r3, #32
 800136e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001370:	2300      	movs	r3, #0
 8001372:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001374:	2300      	movs	r3, #0
 8001376:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800137c:	2300      	movs	r3, #0
 800137e:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001380:	2300      	movs	r3, #0
 8001382:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001384:	2300      	movs	r3, #0
 8001386:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001388:	2300      	movs	r3, #0
 800138a:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800138c:	2300      	movs	r3, #0
 800138e:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800139a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80013ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013be:	461a      	mov	r2, r3
 80013c0:	2100      	movs	r1, #0
 80013c2:	488b      	ldr	r0, [pc, #556]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80013c4:	f003 f8c8 	bl	8004558 <HAL_HRTIM_WaveformTimerConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_HRTIM1_Init+0x10a>
  {
    Error_Handler();
 80013ce:	f000 fa59 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80013d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013d6:	461a      	mov	r2, r3
 80013d8:	2101      	movs	r1, #1
 80013da:	4885      	ldr	r0, [pc, #532]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80013dc:	f003 f8bc 	bl	8004558 <HAL_HRTIM_WaveformTimerConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_HRTIM1_Init+0x122>
  {
    Error_Handler();
 80013e6:	f000 fa4d 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80013ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013ee:	461a      	mov	r2, r3
 80013f0:	2102      	movs	r1, #2
 80013f2:	487f      	ldr	r0, [pc, #508]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80013f4:	f003 f8b0 	bl	8004558 <HAL_HRTIM_WaveformTimerConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_HRTIM1_Init+0x13a>
  {
    Error_Handler();
 80013fe:	f000 fa41 	bl	8001884 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8001408:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800140c:	461a      	mov	r2, r3
 800140e:	2103      	movs	r1, #3
 8001410:	4877      	ldr	r0, [pc, #476]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001412:	f003 f8a1 	bl	8004558 <HAL_HRTIM_WaveformTimerConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_HRTIM1_Init+0x158>
  {
    Error_Handler();
 800141c:	f000 fa32 	bl	8001884 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  pDeadTimeCfg.RisingValue = 0x000;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.FallingValue = 0x000;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 800143c:	2300      	movs	r3, #0
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8001440:	2300      	movs	r3, #0
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	461a      	mov	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	4868      	ldr	r0, [pc, #416]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 800144e:	f003 f8f5 	bl	800463c <HAL_HRTIM_DeadTimeConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_HRTIM1_Init+0x194>
  {
    Error_Handler();
 8001458:	f000 fa14 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	461a      	mov	r2, r3
 8001462:	2101      	movs	r1, #1
 8001464:	4862      	ldr	r0, [pc, #392]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001466:	f003 f8e9 	bl	800463c <HAL_HRTIM_DeadTimeConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_HRTIM1_Init+0x1ac>
  {
    Error_Handler();
 8001470:	f000 fa08 	bl	8001884 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001478:	623b      	str	r3, [r7, #32]
  pDeadTimeCfg.RisingValue = 510;
 800147a:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.FallingValue = 510;
 8001480:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8001484:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	461a      	mov	r2, r3
 800148c:	2102      	movs	r1, #2
 800148e:	4858      	ldr	r0, [pc, #352]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001490:	f003 f8d4 	bl	800463c <HAL_HRTIM_DeadTimeConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_HRTIM1_Init+0x1d6>
  {
    Error_Handler();
 800149a:	f000 f9f3 	bl	8001884 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  pDeadTimeCfg.RisingValue = 0x000;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.FallingValue = 0x000;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	461a      	mov	r2, r3
 80014b0:	2103      	movs	r1, #3
 80014b2:	484f      	ldr	r0, [pc, #316]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80014b4:	f003 f8c2 	bl	800463c <HAL_HRTIM_DeadTimeConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 80014be:	f000 f9e1 	bl	8001884 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 80014c6:	2308      	movs	r3, #8
 80014c8:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80014ca:	2308      	movs	r3, #8
 80014cc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	2100      	movs	r1, #0
 80014e8:	4841      	ldr	r0, [pc, #260]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80014ea:	f003 f927 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_HRTIM1_Init+0x230>
  {
    Error_Handler();
 80014f4:	f000 f9c6 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	2204      	movs	r2, #4
 80014fc:	2101      	movs	r1, #1
 80014fe:	483c      	ldr	r0, [pc, #240]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001500:	f003 f91c 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_HRTIM1_Init+0x246>
  {
    Error_Handler();
 800150a:	f000 f9bb 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	2210      	movs	r2, #16
 8001512:	2102      	movs	r1, #2
 8001514:	4836      	ldr	r0, [pc, #216]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001516:	f003 f911 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_HRTIM1_Init+0x25c>
  {
    Error_Handler();
 8001520:	f000 f9b0 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	2240      	movs	r2, #64	@ 0x40
 8001528:	2103      	movs	r1, #3
 800152a:	4831      	ldr	r0, [pc, #196]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 800152c:	f003 f906 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_HRTIM1_Init+0x272>
  {
    Error_Handler();
 8001536:	f000 f9a5 	bl	8001884 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	2202      	movs	r2, #2
 8001546:	2100      	movs	r1, #0
 8001548:	4829      	ldr	r0, [pc, #164]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 800154a:	f003 f8f7 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_HRTIM1_Init+0x290>
  {
    Error_Handler();
 8001554:	f000 f996 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2208      	movs	r2, #8
 800155c:	2101      	movs	r1, #1
 800155e:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001560:	f003 f8ec 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_HRTIM1_Init+0x2a6>
  {
    Error_Handler();
 800156a:	f000 f98b 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2220      	movs	r2, #32
 8001572:	2102      	movs	r1, #2
 8001574:	481e      	ldr	r0, [pc, #120]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 8001576:	f003 f8e1 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_HRTIM1_Init+0x2bc>
  {
    Error_Handler();
 8001580:	f000 f980 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	2280      	movs	r2, #128	@ 0x80
 8001588:	2103      	movs	r1, #3
 800158a:	4819      	ldr	r0, [pc, #100]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 800158c:	f003 f8d6 	bl	800473c <HAL_HRTIM_WaveformOutputConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_HRTIM1_Init+0x2d2>
  {
    Error_Handler();
 8001596:	f000 f975 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 800159a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800159e:	461a      	mov	r2, r3
 80015a0:	2101      	movs	r1, #1
 80015a2:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80015a4:	f002 ffb0 	bl	8004508 <HAL_HRTIM_TimeBaseConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_HRTIM1_Init+0x2ea>
  {
    Error_Handler();
 80015ae:	f000 f969 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 80015b2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80015b6:	461a      	mov	r2, r3
 80015b8:	2102      	movs	r1, #2
 80015ba:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80015bc:	f002 ffa4 	bl	8004508 <HAL_HRTIM_TimeBaseConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_HRTIM1_Init+0x302>
  {
    Error_Handler();
 80015c6:	f000 f95d 	bl	8001884 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 80015ca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80015ce:	461a      	mov	r2, r3
 80015d0:	2103      	movs	r1, #3
 80015d2:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80015d4:	f002 ff98 	bl	8004508 <HAL_HRTIM_TimeBaseConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_HRTIM1_Init+0x31a>
  {
    Error_Handler();
 80015de:	f000 f951 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80015e2:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_HRTIM1_Init+0x328>)
 80015e4:	f000 fafe 	bl	8001be4 <HAL_HRTIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	37a8      	adds	r7, #168	@ 0xa8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000200 	.word	0x20000200
 80015f4:	40017400 	.word	0x40017400

080015f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	@ 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <MX_TIM3_Init+0xe4>)
 800162c:	4a2c      	ldr	r2, [pc, #176]	@ (80016e0 <MX_TIM3_Init+0xe8>)
 800162e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <MX_TIM3_Init+0xe4>)
 8001632:	220f      	movs	r2, #15
 8001634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <MX_TIM3_Init+0xe4>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <MX_TIM3_Init+0xe4>)
 800163e:	2263      	movs	r2, #99	@ 0x63
 8001640:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <MX_TIM3_Init+0xe4>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <MX_TIM3_Init+0xe4>)
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164e:	4823      	ldr	r0, [pc, #140]	@ (80016dc <MX_TIM3_Init+0xe4>)
 8001650:	f004 ff90 	bl	8006574 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800165a:	f000 f913 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001668:	4619      	mov	r1, r3
 800166a:	481c      	ldr	r0, [pc, #112]	@ (80016dc <MX_TIM3_Init+0xe4>)
 800166c:	f005 fa90 	bl	8006b90 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001676:	f000 f905 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800167a:	4818      	ldr	r0, [pc, #96]	@ (80016dc <MX_TIM3_Init+0xe4>)
 800167c:	f005 f826 	bl	80066cc <HAL_TIM_PWM_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001686:	f000 f8fd 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800168a:	2310      	movs	r3, #16
 800168c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4810      	ldr	r0, [pc, #64]	@ (80016dc <MX_TIM3_Init+0xe4>)
 800169a:	f005 ff2d 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016a4:	f000 f8ee 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a8:	2360      	movs	r3, #96	@ 0x60
 80016aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016b4:	2304      	movs	r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	220c      	movs	r2, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	4807      	ldr	r0, [pc, #28]	@ (80016dc <MX_TIM3_Init+0xe4>)
 80016c0:	f005 f952 	bl	8006968 <HAL_TIM_PWM_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016ca:	f000 f8db 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ce:	4803      	ldr	r0, [pc, #12]	@ (80016dc <MX_TIM3_Init+0xe4>)
 80016d0:	f000 fb12 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 80016d4:	bf00      	nop
 80016d6:	3738      	adds	r7, #56	@ 0x38
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200002dc 	.word	0x200002dc
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001702:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <MX_TIM15_Init+0x9c>)
 8001704:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <MX_TIM15_Init+0xa0>)
 8001706:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001708:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <MX_TIM15_Init+0x9c>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <MX_TIM15_Init+0x9c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001714:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_TIM15_Init+0x9c>)
 8001716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_TIM15_Init+0x9c>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <MX_TIM15_Init+0x9c>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <MX_TIM15_Init+0x9c>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	@ (8001780 <MX_TIM15_Init+0x9c>)
 8001730:	f004 ff20 	bl	8006574 <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800173a:	f000 f8a3 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	@ (8001780 <MX_TIM15_Init+0x9c>)
 800174c:	f005 fa20 	bl	8006b90 <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001756:	f000 f895 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800175a:	2320      	movs	r3, #32
 800175c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <MX_TIM15_Init+0x9c>)
 8001768:	f005 fec6 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001772:	f000 f887 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000328 	.word	0x20000328
 8001784:	40014000 	.word	0x40014000

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <MX_DMA_Init+0x48>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a0f      	ldr	r2, [pc, #60]	@ (80017d0 <MX_DMA_Init+0x48>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <MX_DMA_Init+0x48>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200b      	movs	r0, #11
 80017ac:	f002 fa89 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017b0:	200b      	movs	r0, #11
 80017b2:	f002 faa2 	bl	8003cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	200c      	movs	r0, #12
 80017bc:	f002 fa81 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017c0:	200c      	movs	r0, #12
 80017c2:	f002 fa9a 	bl	8003cfa <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b24      	ldr	r3, [pc, #144]	@ (800187c <MX_GPIO_Init+0xa8>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <MX_GPIO_Init+0xa8>)
 80017f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_GPIO_Init+0xa8>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001802:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001808:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800180c:	6153      	str	r3, [r2, #20]
 800180e:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <MX_GPIO_Init+0xa8>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a17      	ldr	r2, [pc, #92]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4a11      	ldr	r2, [pc, #68]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183c:	6153      	str	r3, [r2, #20]
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_GPIO_Init+0xa8>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PFC_CTRL_out_Pin|RLY_CTRL_output_Pin|SD_OD_output_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f648 0108 	movw	r1, #34824	@ 0x8808
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <MX_GPIO_Init+0xac>)
 8001852:	f002 fd75 	bl	8004340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFC_CTRL_out_Pin RLY_CTRL_output_Pin SD_OD_output_Pin */
  GPIO_InitStruct.Pin = PFC_CTRL_out_Pin|RLY_CTRL_output_Pin|SD_OD_output_Pin;
 8001856:	f648 0308 	movw	r3, #34824	@ 0x8808
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_GPIO_Init+0xac>)
 8001870:	f002 fbf4 	bl	800405c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	@ 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	48000800 	.word	0x48000800

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <Error_Handler+0x8>

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_MspInit+0x44>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <HAL_MspInit+0x44>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_MspInit+0x44>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x44>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x44>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x44>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	@ 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018f8:	d16e      	bne.n	80019d8 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018fa:	4b67      	ldr	r3, [pc, #412]	@ (8001a98 <HAL_ADC_MspInit+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a65      	ldr	r2, [pc, #404]	@ (8001a98 <HAL_ADC_MspInit+0x1c0>)
 8001902:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001904:	4b64      	ldr	r3, [pc, #400]	@ (8001a98 <HAL_ADC_MspInit+0x1c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10b      	bne.n	8001924 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800190c:	4b63      	ldr	r3, [pc, #396]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	4a62      	ldr	r2, [pc, #392]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001916:	6153      	str	r3, [r2, #20]
 8001918:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001924:	4b5d      	ldr	r3, [pc, #372]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	4a5c      	ldr	r2, [pc, #368]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 800192a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800192e:	6153      	str	r3, [r2, #20]
 8001930:	4b5a      	ldr	r3, [pc, #360]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001946:	6153      	str	r3, [r2, #20]
 8001948:	4b54      	ldr	r3, [pc, #336]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = EXT_TEMP_adc_input_Pin|DC_Vout_Trmnl_adc_input_Pin|AC_VSNS_adc_input_Pin;
 8001954:	2307      	movs	r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	484e      	ldr	r0, [pc, #312]	@ (8001aa0 <HAL_ADC_MspInit+0x1c8>)
 8001968:	f002 fb78 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_Vout_Monitor_adc_input_Pin|DC_Output_Current_adc_input_Pin|DC_Bus_Monitor_adc_input_Pin|V_DS_SR1_adc_input_Pin;
 800196c:	230f      	movs	r3, #15
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001982:	f002 fb6b 	bl	800405c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001986:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 8001988:	4a47      	ldr	r2, [pc, #284]	@ (8001aa8 <HAL_ADC_MspInit+0x1d0>)
 800198a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800198c:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001992:	4b44      	ldr	r3, [pc, #272]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001998:	4b42      	ldr	r3, [pc, #264]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 800199a:	2280      	movs	r2, #128	@ 0x80
 800199c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199e:	4b41      	ldr	r3, [pc, #260]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019ae:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019b0:	2220      	movs	r2, #32
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019b4:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ba:	483a      	ldr	r0, [pc, #232]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019bc:	f002 f9b7 	bl	8003d2e <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80019c6:	f7ff ff5d 	bl	8001884 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a35      	ldr	r2, [pc, #212]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80019d0:	4a34      	ldr	r2, [pc, #208]	@ (8001aa4 <HAL_ADC_MspInit+0x1cc>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80019d6:	e05a      	b.n	8001a8e <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a33      	ldr	r2, [pc, #204]	@ (8001aac <HAL_ADC_MspInit+0x1d4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d155      	bne.n	8001a8e <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <HAL_ADC_MspInit+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a98 <HAL_ADC_MspInit+0x1c0>)
 80019ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <HAL_ADC_MspInit+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10b      	bne.n	8001a0c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019f4:	4b29      	ldr	r3, [pc, #164]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	4a28      	ldr	r2, [pc, #160]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	6153      	str	r3, [r2, #20]
 8001a00:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	4a22      	ldr	r2, [pc, #136]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a16:	6153      	str	r3, [r2, #20]
 8001a18:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <HAL_ADC_MspInit+0x1c4>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VDS_SR2_sensing_adc_input_Pin|GPIO_PIN_5;
 8001a24:	2330      	movs	r3, #48	@ 0x30
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3a:	f002 fb0f 	bl	800405c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a40:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab4 <HAL_ADC_MspInit+0x1dc>)
 8001a42:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a64:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a68:	2220      	movs	r2, #32
 8001a6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a72:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a74:	f002 f95b 	bl	8003d2e <HAL_DMA_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8001a7e:	f7ff ff01 	bl	8001884 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a86:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a88:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_ADC_MspInit+0x1d8>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001a8e:	bf00      	nop
 8001a90:	3730      	adds	r7, #48	@ 0x30
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000390 	.word	0x20000390
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000800 	.word	0x48000800
 8001aa4:	20000150 	.word	0x20000150
 8001aa8:	40020008 	.word	0x40020008
 8001aac:	50000100 	.word	0x50000100
 8001ab0:	20000194 	.word	0x20000194
 8001ab4:	4002001c 	.word	0x4002001c

08001ab8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a30      	ldr	r2, [pc, #192]	@ (8001b98 <HAL_CAN_MspInit+0xe0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d159      	bne.n	8001b8e <HAL_CAN_MspInit+0xd6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ada:	4b30      	ldr	r3, [pc, #192]	@ (8001b9c <HAL_CAN_MspInit+0xe4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a2f      	ldr	r2, [pc, #188]	@ (8001b9c <HAL_CAN_MspInit+0xe4>)
 8001ae0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_CAN_MspInit+0xe4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_CAN_MspInit+0xe4>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a29      	ldr	r2, [pc, #164]	@ (8001b9c <HAL_CAN_MspInit+0xe4>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_CAN_MspInit+0xe4>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	481e      	ldr	r0, [pc, #120]	@ (8001ba0 <HAL_CAN_MspInit+0xe8>)
 8001b28:	f002 fa98 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001b3e:	2309      	movs	r3, #9
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <HAL_CAN_MspInit+0xe8>)
 8001b4a:	f002 fa87 	bl	800405c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2013      	movs	r0, #19
 8001b54:	f002 f8b5 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8001b58:	2013      	movs	r0, #19
 8001b5a:	f002 f8ce 	bl	8003cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2014      	movs	r0, #20
 8001b64:	f002 f8ad 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001b68:	2014      	movs	r0, #20
 8001b6a:	f002 f8c6 	bl	8003cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2015      	movs	r0, #21
 8001b74:	f002 f8a5 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001b78:	2015      	movs	r0, #21
 8001b7a:	f002 f8be 	bl	8003cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	2016      	movs	r0, #22
 8001b84:	f002 f89d 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001b88:	2016      	movs	r0, #22
 8001b8a:	f002 f8b6 	bl	8003cfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40006400 	.word	0x40006400
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000400 	.word	0x48000400

08001ba4 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_HRTIM_MspInit+0x38>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10b      	bne.n	8001bce <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_HRTIM_MspInit+0x3c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_HRTIM_MspInit+0x3c>)
 8001bbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_HRTIM_MspInit+0x3c>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40017400 	.word	0x40017400
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a20      	ldr	r2, [pc, #128]	@ (8001c84 <HAL_HRTIM_MspPostInit+0xa0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d13a      	bne.n	8001c7c <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c10:	6153      	str	r3, [r2, #20]
 8001c12:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	6153      	str	r3, [r2, #20]
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_HRTIM_MspPostInit+0xa4>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    PA10     ------> HRTIM1_CHB1
    PA11     ------> HRTIM1_CHB2
    */
    GPIO_InitStruct.Pin = PWM_SR_HS2_Pin|PWM_SR_LS1_Pin|PWM_SR_HS1_Pin|PWM_SR_LS2_Pin;
 8001c36:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001c48:	230d      	movs	r3, #13
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480e      	ldr	r0, [pc, #56]	@ (8001c8c <HAL_HRTIM_MspPostInit+0xa8>)
 8001c54:	f002 fa02 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_FB_HS1_Pin|PWM_FB_LS1_Pin|PWM_FB_HS2_Pin|PWM_FB_LS2_Pin;
 8001c58:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001c6a:	230d      	movs	r3, #13
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f002 f9f0 	bl	800405c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40017400 	.word	0x40017400
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	48000400 	.word	0x48000400

08001c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <HAL_TIM_Base_MspInit+0x5c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10c      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001cba:	e010      	b.n	8001cde <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM15)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x64>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10b      	bne.n	8001cde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	4a09      	ldr	r2, [pc, #36]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd0:	6193      	str	r3, [r2, #24]
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x60>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40014000 	.word	0x40014000

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_TIM_MspPostInit+0x64>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11b      	bne.n	8001d52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8001d32:	2302      	movs	r3, #2
 8001d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d4e:	f002 f985 	bl	800405c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000400 	.word	0x48000400

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 f8c1 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dce:	f002 f854 	bl	8003e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000150 	.word	0x20000150

08001ddc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <DMA1_Channel2_IRQHandler+0x10>)
 8001de2:	f002 f84a 	bl	8003e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000194 	.word	0x20000194

08001df0 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <CAN_TX_IRQHandler+0x10>)
 8001df6:	f001 fc59 	bl	80036ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200001d8 	.word	0x200001d8

08001e04 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <CAN_RX0_IRQHandler+0x10>)
 8001e0a:	f001 fc4f 	bl	80036ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001d8 	.word	0x200001d8

08001e18 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <CAN_RX1_IRQHandler+0x10>)
 8001e1e:	f001 fc45 	bl	80036ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001d8 	.word	0x200001d8

08001e2c <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <CAN_SCE_IRQHandler+0x10>)
 8001e32:	f001 fc3b 	bl	80036ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001d8 	.word	0x200001d8

08001e40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e9c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e68:	f7ff ffea 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	@ (8001ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <LoopForever+0xe>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb0 <LoopForever+0x16>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f005 fbad 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e96:	f7fe ff9b 	bl	8000dd0 <main>

08001e9a <LoopForever>:

LoopForever:
    b LoopForever
 8001e9a:	e7fe      	b.n	8001e9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e9c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ea8:	08007a88 	.word	0x08007a88
  ldr r2, =_sbss
 8001eac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001eb0:	200004d0 	.word	0x200004d0

08001eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_2_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_Init+0x28>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_Init+0x28>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f001 feef 	bl	8003cac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fcdc 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f001 ff07 	bl	8003d16 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f001 fecf 	bl	8003cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000394 	.word	0x20000394

08001f6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000394 	.word	0x20000394

08001f84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09a      	sub	sp, #104	@ 0x68
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e172      	b.n	80022c6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d176      	bne.n	80020e0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d152      	bne.n	80020a0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fc5f 	bl	80018d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d13b      	bne.n	80020a0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fe83 	bl	8002d34 <ADC_Disable>
 800202e:	4603      	mov	r3, r0
 8002030:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d12f      	bne.n	80020a0 <HAL_ADC_Init+0xe0>
 8002040:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002044:	2b00      	cmp	r3, #0
 8002046:	d12b      	bne.n	80020a0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002050:	f023 0302 	bic.w	r3, r3, #2
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800206a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800207a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800207c:	4b94      	ldr	r3, [pc, #592]	@ (80022d0 <HAL_ADC_Init+0x310>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a94      	ldr	r2, [pc, #592]	@ (80022d4 <HAL_ADC_Init+0x314>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0c9a      	lsrs	r2, r3, #18
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002092:	e002      	b.n	800209a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3b01      	subs	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020bc:	d110      	bne.n	80020e0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f023 0312 	bic.w	r3, r3, #18
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 80df 	bne.w	80022ac <HAL_ADC_Init+0x2ec>
 80020ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 80da 	bne.w	80022ac <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 80d2 	bne.w	80022ac <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002118:	4b6f      	ldr	r3, [pc, #444]	@ (80022d8 <HAL_ADC_Init+0x318>)
 800211a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002124:	d102      	bne.n	800212c <HAL_ADC_Init+0x16c>
 8002126:	4b6d      	ldr	r3, [pc, #436]	@ (80022dc <HAL_ADC_Init+0x31c>)
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e002      	b.n	8002132 <HAL_ADC_Init+0x172>
 800212c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002130:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_ADC_Init+0x192>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Init+0x192>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_ADC_Init+0x194>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11c      	bne.n	8002192 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002158:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_ADC_Init+0x1ba>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x1ba>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_ADC_Init+0x1bc>
 800217a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	431a      	orrs	r2, r3
 800218e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002190:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7e5b      	ldrb	r3, [r3, #25]
 8002196:	035b      	lsls	r3, r3, #13
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800219c:	2a01      	cmp	r2, #1
 800219e:	d002      	beq.n	80021a6 <HAL_ADC_Init+0x1e6>
 80021a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021a4:	e000      	b.n	80021a8 <HAL_ADC_Init+0x1e8>
 80021a6:	2200      	movs	r2, #0
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021b8:	4313      	orrs	r3, r2
 80021ba:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d11b      	bne.n	80021fe <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7e5b      	ldrb	r3, [r3, #25]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	045a      	lsls	r2, r3, #17
 80021d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021d8:	4313      	orrs	r3, r2
 80021da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021de:	663b      	str	r3, [r7, #96]	@ 0x60
 80021e0:	e00d      	b.n	80021fe <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	2b01      	cmp	r3, #1
 8002204:	d007      	beq.n	8002216 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	4313      	orrs	r3, r2
 8002210:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002212:	4313      	orrs	r3, r2
 8002214:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	d114      	bne.n	800224e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002232:	f023 0302 	bic.w	r3, r3, #2
 8002236:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	039a      	lsls	r2, r3, #14
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4313      	orrs	r3, r2
 8002248:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800224a:	4313      	orrs	r3, r2
 800224c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <HAL_ADC_Init+0x320>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800225e:	430b      	orrs	r3, r1
 8002260:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10c      	bne.n	8002284 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	f023 010f 	bic.w	r1, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
 8002282:	e007      	b.n	8002294 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 020f 	bic.w	r2, r2, #15
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80022aa:	e00a      	b.n	80022c2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f023 0312 	bic.w	r3, r3, #18
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80022c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3768      	adds	r7, #104	@ 0x68
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000
 80022d4:	431bde83 	.word	0x431bde83
 80022d8:	50000300 	.word	0x50000300
 80022dc:	50000100 	.word	0x50000100
 80022e0:	fff0c007 	.word	0xfff0c007

080022e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80b9 	bne.w	8002476 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start_DMA+0x2e>
 800230e:	2302      	movs	r3, #2
 8002310:	e0b4      	b.n	800247c <HAL_ADC_Start_DMA+0x198>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800231a:	4b5a      	ldr	r3, [pc, #360]	@ (8002484 <HAL_ADC_Start_DMA+0x1a0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80a0 	bne.w	8002468 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fc9f 	bl	8002c6c <ADC_Enable>
 800232e:	4603      	mov	r3, r0
 8002330:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 8092 	bne.w	800245e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800234e:	4b4d      	ldr	r3, [pc, #308]	@ (8002484 <HAL_ADC_Start_DMA+0x1a0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_ADC_Start_DMA+0x80>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002362:	d115      	bne.n	8002390 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d027      	beq.n	80023ce <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002386:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800238e:	e01e      	b.n	80023ce <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023a4:	d004      	beq.n	80023b0 <HAL_ADC_Start_DMA+0xcc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <HAL_ADC_Start_DMA+0x1a4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10e      	bne.n	80023ce <HAL_ADC_Start_DMA+0xea>
 80023b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023da:	d106      	bne.n	80023ea <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	f023 0206 	bic.w	r2, r3, #6
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	4a23      	ldr	r2, [pc, #140]	@ (800248c <HAL_ADC_Start_DMA+0x1a8>)
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002404:	4a22      	ldr	r2, [pc, #136]	@ (8002490 <HAL_ADC_Start_DMA+0x1ac>)
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <HAL_ADC_Start_DMA+0x1b0>)
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	221c      	movs	r2, #28
 8002416:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0210 	orr.w	r2, r2, #16
 8002426:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3340      	adds	r3, #64	@ 0x40
 8002442:	4619      	mov	r1, r3
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f001 fcb8 	bl	8003dbc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0204 	orr.w	r2, r2, #4
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	e00d      	b.n	800247a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002466:	e008      	b.n	800247a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002474:	e001      	b.n	800247a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800247a:	7dfb      	ldrb	r3, [r7, #23]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	50000300 	.word	0x50000300
 8002488:	50000100 	.word	0x50000100
 800248c:	08002ba1 	.word	0x08002ba1
 8002490:	08002c1b 	.word	0x08002c1b
 8002494:	08002c37 	.word	0x08002c37

08002498 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002498:	b480      	push	{r7}
 800249a:	b09b      	sub	sp, #108	@ 0x6c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x22>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e2a1      	b.n	80029fe <HAL_ADC_ConfigChannel+0x566>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 8285 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d81c      	bhi.n	8002514 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	461a      	mov	r2, r3
 80024ee:	231f      	movs	r3, #31
 80024f0:	4093      	lsls	r3, r2
 80024f2:	43db      	mvns	r3, r3
 80024f4:	4019      	ands	r1, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa00 f203 	lsl.w	r2, r0, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
 8002512:	e063      	b.n	80025dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b09      	cmp	r3, #9
 800251a:	d81e      	bhi.n	800255a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	3b1e      	subs	r3, #30
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	3b1e      	subs	r3, #30
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	635a      	str	r2, [r3, #52]	@ 0x34
 8002558:	e040      	b.n	80025dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b0e      	cmp	r3, #14
 8002560:	d81e      	bhi.n	80025a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	3b3c      	subs	r3, #60	@ 0x3c
 8002576:	221f      	movs	r2, #31
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4019      	ands	r1, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	3b3c      	subs	r3, #60	@ 0x3c
 8002592:	fa00 f203 	lsl.w	r2, r0, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	639a      	str	r2, [r3, #56]	@ 0x38
 800259e:	e01d      	b.n	80025dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	3b5a      	subs	r3, #90	@ 0x5a
 80025b4:	221f      	movs	r2, #31
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	4019      	ands	r1, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	3b5a      	subs	r3, #90	@ 0x5a
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80e5 	bne.w	80027b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b09      	cmp	r3, #9
 80025f2:	d91c      	bls.n	800262e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	3b1e      	subs	r3, #30
 8002606:	2207      	movs	r2, #7
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	4019      	ands	r1, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6898      	ldr	r0, [r3, #8]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	3b1e      	subs	r3, #30
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	619a      	str	r2, [r3, #24]
 800262c:	e019      	b.n	8002662 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6959      	ldr	r1, [r3, #20]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	2207      	movs	r2, #7
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	4019      	ands	r1, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6898      	ldr	r0, [r3, #8]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	fa00 f203 	lsl.w	r2, r0, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	3b01      	subs	r3, #1
 8002680:	2b03      	cmp	r3, #3
 8002682:	d84f      	bhi.n	8002724 <HAL_ADC_ConfigChannel+0x28c>
 8002684:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <HAL_ADC_ConfigChannel+0x1f4>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026bf 	.word	0x080026bf
 8002694:	080026e1 	.word	0x080026e1
 8002698:	08002703 	.word	0x08002703
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002914 <HAL_ADC_ConfigChannel+0x47c>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	0691      	lsls	r1, r2, #26
 80026ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026ae:	430a      	orrs	r2, r1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026ba:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026bc:	e07b      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80026c4:	4b93      	ldr	r3, [pc, #588]	@ (8002914 <HAL_ADC_ConfigChannel+0x47c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	0691      	lsls	r1, r2, #26
 80026ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026d0:	430a      	orrs	r2, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026dc:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026de:	e06a      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80026e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002914 <HAL_ADC_ConfigChannel+0x47c>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	0691      	lsls	r1, r2, #26
 80026f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026f2:	430a      	orrs	r2, r1
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026fe:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002700:	e059      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002708:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_ADC_ConfigChannel+0x47c>)
 800270a:	4013      	ands	r3, r2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	0691      	lsls	r1, r2, #26
 8002712:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002714:	430a      	orrs	r2, r1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002720:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002722:	e048      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	069b      	lsls	r3, r3, #26
 8002734:	429a      	cmp	r2, r3
 8002736:	d107      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002746:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800274e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	069b      	lsls	r3, r3, #26
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800276a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002772:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	069b      	lsls	r3, r3, #26
 800277c:	429a      	cmp	r2, r3
 800277e:	d107      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800278e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002796:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	069b      	lsls	r3, r3, #26
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80027b4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x33e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x33e>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x340>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 810a 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d00f      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2201      	movs	r2, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002804:	e049      	b.n	800289a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	409a      	lsls	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b09      	cmp	r3, #9
 8002826:	d91c      	bls.n	8002862 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	3b1b      	subs	r3, #27
 800283a:	2207      	movs	r2, #7
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	4019      	ands	r1, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6898      	ldr	r0, [r3, #8]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	3b1b      	subs	r3, #27
 8002854:	fa00 f203 	lsl.w	r2, r0, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	619a      	str	r2, [r3, #24]
 8002860:	e01b      	b.n	800289a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6959      	ldr	r1, [r3, #20]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	2207      	movs	r2, #7
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	4019      	ands	r1, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6898      	ldr	r0, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289a:	4b1f      	ldr	r3, [pc, #124]	@ (8002918 <HAL_ADC_ConfigChannel+0x480>)
 800289c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d105      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028b6:	2b11      	cmp	r3, #17
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	f040 8091 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f040 808a 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e6:	d102      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x456>
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <HAL_ADC_ConfigChannel+0x484>)
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e002      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x45c>
 80028ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028f2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x488>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x488>
 8002910:	2301      	movs	r3, #1
 8002912:	e006      	b.n	8002922 <HAL_ADC_ConfigChannel+0x48a>
 8002914:	83fff000 	.word	0x83fff000
 8002918:	50000300 	.word	0x50000300
 800291c:	50000100 	.word	0x50000100
 8002920:	2300      	movs	r3, #0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d150      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002926:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x4b0>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x4b0>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0x4b2>
 8002948:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d13c      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b10      	cmp	r3, #16
 8002954:	d11d      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x4fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800295e:	d118      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800296a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_ADC_ConfigChannel+0x574>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <HAL_ADC_ConfigChannel+0x578>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9a      	lsrs	r2, r3, #18
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002982:	e002      	b.n	800298a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3b01      	subs	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002990:	e02e      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b11      	cmp	r3, #17
 8002998:	d10b      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x51a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80029ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029b0:	e01e      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d11a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029c6:	e013      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029da:	e00a      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029ee:	e000      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029f0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	376c      	adds	r7, #108	@ 0x6c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	431bde83 	.word	0x431bde83

08002a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b099      	sub	sp, #100	@ 0x64
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2c:	d102      	bne.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	e002      	b.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002a34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a38:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0a2      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e09b      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d17f      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d179      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a74:	4b49      	ldr	r3, [pc, #292]	@ (8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002a76:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d040      	beq.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a92:	035b      	lsls	r3, r3, #13
 8002a94:	430b      	orrs	r3, r1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d108      	bne.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d15c      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002ade:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d14b      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002aec:	f023 030f 	bic.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	6811      	ldr	r1, [r2, #0]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002afe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b00:	e03c      	b.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b0c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d108      	bne.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d123      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002b50:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d112      	bne.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b5e:	f023 030f 	bic.w	r3, r3, #15
 8002b62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b64:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b66:	e009      	b.n	8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002b7a:	e000      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3764      	adds	r7, #100	@ 0x64
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	50000100 	.word	0x50000100
 8002b9c:	50000300 	.word	0x50000300

08002ba0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d126      	bne.n	8002c08 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d115      	bne.n	8002c00 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d111      	bne.n	8002c00 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff f9bf 	bl	8001f84 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c06:	e004      	b.n	8002c12 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff f9b5 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff f9a5 	bl	8001fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <ADC_Enable+0x2c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <ADC_Enable+0x2c>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <ADC_Enable+0x2e>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d143      	bne.n	8002d26 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <ADC_Enable+0xc4>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	f043 0210 	orr.w	r2, r3, #16
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e02f      	b.n	8002d28 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002cd8:	f7ff f948 	bl	8001f6c <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cde:	e01b      	b.n	8002d18 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ce0:	f7ff f944 	bl	8001f6c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d914      	bls.n	8002d18 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d00d      	beq.n	8002d18 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d1dc      	bne.n	8002ce0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	8000003f 	.word	0x8000003f

08002d34 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <ADC_Disable+0x2c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <ADC_Disable+0x2c>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <ADC_Disable+0x2e>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d047      	beq.n	8002df6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 030d 	and.w	r3, r3, #13
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10f      	bne.n	8002d94 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0202 	orr.w	r2, r2, #2
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d8c:	f7ff f8ee 	bl	8001f6c <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d92:	e029      	b.n	8002de8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f043 0210 	orr.w	r2, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e023      	b.n	8002df8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002db0:	f7ff f8dc 	bl	8001f6c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d914      	bls.n	8002de8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e007      	b.n	8002df8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d0dc      	beq.n	8002db0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0ed      	b.n	8002fee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fe4a 	bl	8001ab8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e34:	f7ff f89a 	bl	8001f6c <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e3a:	e012      	b.n	8002e62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e3c:	f7ff f896 	bl	8001f6c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b0a      	cmp	r3, #10
 8002e48:	d90b      	bls.n	8002e62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0c5      	b.n	8002fee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0e5      	beq.n	8002e3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0202 	bic.w	r2, r2, #2
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e80:	f7ff f874 	bl	8001f6c <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e86:	e012      	b.n	8002eae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e88:	f7ff f870 	bl	8001f6c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d90b      	bls.n	8002eae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e09f      	b.n	8002fee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e5      	bne.n	8002e88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7e1b      	ldrb	r3, [r3, #24]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d108      	bne.n	8002ed6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e007      	b.n	8002ee6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7e5b      	ldrb	r3, [r3, #25]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e007      	b.n	8002f10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7e9b      	ldrb	r3, [r3, #26]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0220 	bic.w	r2, r2, #32
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7edb      	ldrb	r3, [r3, #27]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0210 	bic.w	r2, r2, #16
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0210 	orr.w	r2, r2, #16
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7f1b      	ldrb	r3, [r3, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e007      	b.n	8002f8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0208 	bic.w	r2, r2, #8
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7f5b      	ldrb	r3, [r3, #29]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d108      	bne.n	8002fa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0204 	orr.w	r2, r2, #4
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e007      	b.n	8002fb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0204 	bic.w	r2, r2, #4
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	ea42 0103 	orr.w	r1, r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d003      	beq.n	800301c <HAL_CAN_ConfigFilter+0x26>
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b02      	cmp	r3, #2
 8003018:	f040 80aa 	bne.w	8003170 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2201      	movs	r2, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d123      	bne.n	800309e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003078:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3248      	adds	r2, #72	@ 0x48
 800307e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003092:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003094:	6979      	ldr	r1, [r7, #20]
 8003096:	3348      	adds	r3, #72	@ 0x48
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d122      	bne.n	80030ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3248      	adds	r2, #72	@ 0x48
 80030cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	3348      	adds	r3, #72	@ 0x48
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003106:	e007      	b.n	8003118 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003132:	e007      	b.n	8003144 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	431a      	orrs	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e006      	b.n	800317e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d12e      	bne.n	80031fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031b6:	f7fe fed9 	bl	8001f6c <HAL_GetTick>
 80031ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031bc:	e012      	b.n	80031e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031be:	f7fe fed5 	bl	8001f6c <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b0a      	cmp	r3, #10
 80031ca:	d90b      	bls.n	80031e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2205      	movs	r2, #5
 80031dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e012      	b.n	800320a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e006      	b.n	800320a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003212:	b480      	push	{r7}
 8003214:	b089      	sub	sp, #36	@ 0x24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003226:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003230:	7ffb      	ldrb	r3, [r7, #31]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d003      	beq.n	800323e <HAL_CAN_AddTxMessage+0x2c>
 8003236:	7ffb      	ldrb	r3, [r7, #31]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f040 80ad 	bne.w	8003398 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8095 	beq.w	8003388 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003268:	2201      	movs	r2, #1
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	409a      	lsls	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	6809      	ldr	r1, [r1, #0]
 8003288:	431a      	orrs	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3318      	adds	r3, #24
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	440b      	add	r3, r1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e00f      	b.n	80032b6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3318      	adds	r3, #24
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	440b      	add	r3, r1
 80032b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3318      	adds	r3, #24
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	440b      	add	r3, r1
 80032c6:	3304      	adds	r3, #4
 80032c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	7d1b      	ldrb	r3, [r3, #20]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d111      	bne.n	80032f6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3318      	adds	r3, #24
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6811      	ldr	r1, [r2, #0]
 80032e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3318      	adds	r3, #24
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	440b      	add	r3, r1
 80032f2:	3304      	adds	r3, #4
 80032f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3307      	adds	r3, #7
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	061a      	lsls	r2, r3, #24
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3306      	adds	r3, #6
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3305      	adds	r3, #5
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	4313      	orrs	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	3204      	adds	r2, #4
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	4610      	mov	r0, r2
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	6811      	ldr	r1, [r2, #0]
 800331e:	ea43 0200 	orr.w	r2, r3, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	440b      	add	r3, r1
 8003328:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800332c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3303      	adds	r3, #3
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	061a      	lsls	r2, r3, #24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3302      	adds	r3, #2
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3301      	adds	r3, #1
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	4313      	orrs	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	4610      	mov	r0, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	6811      	ldr	r1, [r2, #0]
 8003354:	ea43 0200 	orr.w	r2, r3, r0
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	440b      	add	r3, r1
 800335e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003362:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3318      	adds	r3, #24
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	4413      	add	r3, r2
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3318      	adds	r3, #24
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	440b      	add	r3, r1
 8003382:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e00e      	b.n	80033a6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e006      	b.n	80033a6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d002      	beq.n	80033d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80033cc:	7afb      	ldrb	r3, [r7, #11]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d11d      	bne.n	800340e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003430:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d003      	beq.n	8003440 <HAL_CAN_GetRxMessage+0x24>
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b02      	cmp	r3, #2
 800343c:	f040 8103 	bne.w	8003646 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d116      	bne.n	8003482 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0f7      	b.n	8003654 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e8      	b.n	8003654 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	331b      	adds	r3, #27
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0204 	and.w	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10c      	bne.n	80034ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	331b      	adds	r3, #27
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0d5b      	lsrs	r3, r3, #21
 80034b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e00b      	b.n	80034d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	331b      	adds	r3, #27
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	4413      	add	r3, r2
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	08db      	lsrs	r3, r3, #3
 80034ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	331b      	adds	r3, #27
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0202 	and.w	r2, r3, #2
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	331b      	adds	r3, #27
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	3304      	adds	r3, #4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2208      	movs	r2, #8
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	e00b      	b.n	8003520 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	331b      	adds	r3, #27
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	331b      	adds	r3, #27
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	b2da      	uxtb	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	331b      	adds	r3, #27
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4413      	add	r3, r2
 800355a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	4413      	add	r3, r2
 8003570:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	0a1a      	lsrs	r2, r3, #8
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0c1a      	lsrs	r2, r3, #16
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	3302      	adds	r3, #2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e1a      	lsrs	r2, r3, #24
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3303      	adds	r3, #3
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	3304      	adds	r3, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0a1a      	lsrs	r2, r3, #8
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	3305      	adds	r3, #5
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0c1a      	lsrs	r2, r3, #16
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	3306      	adds	r3, #6
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e1a      	lsrs	r2, r3, #24
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3307      	adds	r3, #7
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	e007      	b.n	8003642 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e006      	b.n	8003654 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
  }
}
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003670:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d002      	beq.n	800367e <HAL_CAN_ActivateNotification+0x1e>
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d109      	bne.n	8003692 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6959      	ldr	r1, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e006      	b.n	80036a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d07c      	beq.n	80037ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f983 	bl	8003a1a <HAL_CAN_TxMailbox0CompleteCallback>
 8003714:	e016      	b.n	8003744 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
 8003728:	e00c      	b.n	8003744 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
 800373c:	e002      	b.n	8003744 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f989 	bl	8003a56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003756:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f963 	bl	8003a2e <HAL_CAN_TxMailbox1CompleteCallback>
 8003768:	e016      	b.n	8003798 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
 800377c:	e00c      	b.n	8003798 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003790:	e002      	b.n	8003798 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f969 	bl	8003a6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d024      	beq.n	80037ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80037aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f943 	bl	8003a42 <HAL_CAN_TxMailbox2CompleteCallback>
 80037bc:	e016      	b.n	80037ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d0:	e00c      	b.n	80037ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	e002      	b.n	80037ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f949 	bl	8003a7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2210      	movs	r2, #16
 800380e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d006      	beq.n	8003832 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f930 	bl	8003a92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd faa8 	bl	8000da0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f912 	bl	8003aba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8f9 	bl	8003aa6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8fc 	bl	8003ace <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2208      	movs	r2, #8
 80038f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8f5 	bl	8003ae2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07b      	beq.n	80039fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d072      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003966:	2b00      	cmp	r3, #0
 8003968:	d043      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03e      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800397a:	2b60      	cmp	r3, #96	@ 0x60
 800397c:	d02b      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x32a>
 800397e:	2b60      	cmp	r3, #96	@ 0x60
 8003980:	d82e      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 8003982:	2b50      	cmp	r3, #80	@ 0x50
 8003984:	d022      	beq.n	80039cc <HAL_CAN_IRQHandler+0x320>
 8003986:	2b50      	cmp	r3, #80	@ 0x50
 8003988:	d82a      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d019      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x316>
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d826      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 8003992:	2b30      	cmp	r3, #48	@ 0x30
 8003994:	d010      	beq.n	80039b8 <HAL_CAN_IRQHandler+0x30c>
 8003996:	2b30      	cmp	r3, #48	@ 0x30
 8003998:	d822      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 800399a:	2b10      	cmp	r3, #16
 800399c:	d002      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x2f8>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d005      	beq.n	80039ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039a2:	e01d      	b.n	80039e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	f043 0308 	orr.w	r3, r3, #8
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80039ac:	e019      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	f043 0310 	orr.w	r3, r3, #16
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80039b6:	e014      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	f043 0320 	orr.w	r3, r3, #32
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80039c0:	e00f      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80039ca:	e00a      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80039d4:	e005      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80039de:	e000      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80039e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80039f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2204      	movs	r2, #4
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f872 	bl	8003af6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a12:	bf00      	nop
 8003a14:	3728      	adds	r7, #40	@ 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3e:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <__NVIC_SetPriorityGrouping+0x44>)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b58:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <__NVIC_GetPriorityGrouping+0x18>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 0307 	and.w	r3, r3, #7
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db0b      	blt.n	8003b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4907      	ldr	r1, [pc, #28]	@ (8003ba8 <__NVIC_EnableIRQ+0x38>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2001      	movs	r0, #1
 8003b92:	fa00 f202 	lsl.w	r2, r0, r2
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000e100 	.word	0xe000e100

08003bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	db0a      	blt.n	8003bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	490c      	ldr	r1, [pc, #48]	@ (8003bf8 <__NVIC_SetPriority+0x4c>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd4:	e00a      	b.n	8003bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4908      	ldr	r1, [pc, #32]	@ (8003bfc <__NVIC_SetPriority+0x50>)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	3b04      	subs	r3, #4
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	761a      	strb	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	@ 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f1c3 0307 	rsb	r3, r3, #7
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	bf28      	it	cs
 8003c1e:	2304      	movcs	r3, #4
 8003c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d902      	bls.n	8003c30 <NVIC_EncodePriority+0x30>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3b03      	subs	r3, #3
 8003c2e:	e000      	b.n	8003c32 <NVIC_EncodePriority+0x32>
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43d9      	mvns	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	4313      	orrs	r3, r2
         );
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3724      	adds	r7, #36	@ 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c78:	d301      	bcc.n	8003c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00f      	b.n	8003c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca8 <SysTick_Config+0x40>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c86:	210f      	movs	r1, #15
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f7ff ff8e 	bl	8003bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <SysTick_Config+0x40>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c96:	4b04      	ldr	r3, [pc, #16]	@ (8003ca8 <SysTick_Config+0x40>)
 8003c98:	2207      	movs	r2, #7
 8003c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff29 	bl	8003b0c <__NVIC_SetPriorityGrouping>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd4:	f7ff ff3e 	bl	8003b54 <__NVIC_GetPriorityGrouping>
 8003cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7ff ff8e 	bl	8003c00 <NVIC_EncodePriority>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff5d 	bl	8003bac <__NVIC_SetPriority>
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	4603      	mov	r3, r0
 8003d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff31 	bl	8003b70 <__NVIC_EnableIRQ>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffa2 	bl	8003c68 <SysTick_Config>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e037      	b.n	8003db4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f940 	bl	800401c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_DMA_Start_IT+0x20>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e04a      	b.n	8003e72 <HAL_DMA_Start_IT+0xb6>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d13a      	bne.n	8003e64 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f8d4 	bl	8003fc0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 020e 	orr.w	r2, r2, #14
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e00f      	b.n	8003e52 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 020a 	orr.w	r2, r2, #10
 8003e40:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0204 	bic.w	r2, r2, #4
 8003e50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e005      	b.n	8003e70 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	2204      	movs	r2, #4
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d024      	beq.n	8003eec <HAL_DMA_IRQHandler+0x72>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01f      	beq.n	8003eec <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0204 	bic.w	r2, r2, #4
 8003ec8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d06a      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003eea:	e065      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02c      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xdc>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d027      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 020a 	bic.w	r2, r2, #10
 8003f22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	2102      	movs	r1, #2
 8003f36:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d035      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f54:	e030      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d028      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 020e 	bic.w	r2, r2, #14
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
    }
  }
}
 8003fb6:	e7ff      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x13e>
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d108      	bne.n	8004000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ffe:	e007      	b.n	8004010 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <DMA_CalcBaseAndBitshift+0x34>)
 800402c:	4413      	add	r3, r2
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <DMA_CalcBaseAndBitshift+0x38>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a06      	ldr	r2, [pc, #24]	@ (8004058 <DMA_CalcBaseAndBitshift+0x3c>)
 8004040:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	bffdfff8 	.word	0xbffdfff8
 8004054:	cccccccd 	.word	0xcccccccd
 8004058:	40020000 	.word	0x40020000

0800405c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406a:	e14e      	b.n	800430a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa01 f303 	lsl.w	r3, r1, r3
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8140 	beq.w	8004304 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d005      	beq.n	800409c <HAL_GPIO_Init+0x40>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d130      	bne.n	80040fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040d2:	2201      	movs	r2, #1
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	f003 0201 	and.w	r2, r3, #1
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b03      	cmp	r3, #3
 8004108:	d017      	beq.n	800413a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d123      	bne.n	800418e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3208      	adds	r2, #8
 800414e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	220f      	movs	r2, #15
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	08da      	lsrs	r2, r3, #3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3208      	adds	r2, #8
 8004188:	6939      	ldr	r1, [r7, #16]
 800418a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	2203      	movs	r2, #3
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0203 	and.w	r2, r3, #3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 809a 	beq.w	8004304 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041d0:	4b55      	ldr	r3, [pc, #340]	@ (8004328 <HAL_GPIO_Init+0x2cc>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4a54      	ldr	r2, [pc, #336]	@ (8004328 <HAL_GPIO_Init+0x2cc>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6193      	str	r3, [r2, #24]
 80041dc:	4b52      	ldr	r3, [pc, #328]	@ (8004328 <HAL_GPIO_Init+0x2cc>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041e8:	4a50      	ldr	r2, [pc, #320]	@ (800432c <HAL_GPIO_Init+0x2d0>)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	3302      	adds	r3, #2
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	220f      	movs	r2, #15
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004212:	d013      	beq.n	800423c <HAL_GPIO_Init+0x1e0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a46      	ldr	r2, [pc, #280]	@ (8004330 <HAL_GPIO_Init+0x2d4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00d      	beq.n	8004238 <HAL_GPIO_Init+0x1dc>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a45      	ldr	r2, [pc, #276]	@ (8004334 <HAL_GPIO_Init+0x2d8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <HAL_GPIO_Init+0x1d8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a44      	ldr	r2, [pc, #272]	@ (8004338 <HAL_GPIO_Init+0x2dc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_GPIO_Init+0x1d4>
 800422c:	2303      	movs	r3, #3
 800422e:	e006      	b.n	800423e <HAL_GPIO_Init+0x1e2>
 8004230:	2305      	movs	r3, #5
 8004232:	e004      	b.n	800423e <HAL_GPIO_Init+0x1e2>
 8004234:	2302      	movs	r3, #2
 8004236:	e002      	b.n	800423e <HAL_GPIO_Init+0x1e2>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_GPIO_Init+0x1e2>
 800423c:	2300      	movs	r3, #0
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	f002 0203 	and.w	r2, r2, #3
 8004244:	0092      	lsls	r2, r2, #2
 8004246:	4093      	lsls	r3, r2
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800424e:	4937      	ldr	r1, [pc, #220]	@ (800432c <HAL_GPIO_Init+0x2d0>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	3302      	adds	r3, #2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800425c:	4b37      	ldr	r3, [pc, #220]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004280:	4a2e      	ldr	r2, [pc, #184]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004286:	4b2d      	ldr	r3, [pc, #180]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042aa:	4a24      	ldr	r2, [pc, #144]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042b0:	4b22      	ldr	r3, [pc, #136]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042d4:	4a19      	ldr	r2, [pc, #100]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042fe:	4a0f      	ldr	r2, [pc, #60]	@ (800433c <HAL_GPIO_Init+0x2e0>)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f aea9 	bne.w	800406c <HAL_GPIO_Init+0x10>
  }
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40021000 	.word	0x40021000
 800432c:	40010000 	.word	0x40010000
 8004330:	48000400 	.word	0x48000400
 8004334:	48000800 	.word	0x48000800
 8004338:	48000c00 	.word	0x48000c00
 800433c:	40010400 	.word	0x40010400

08004340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
 800434c:	4613      	mov	r3, r2
 800434e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004350:	787b      	ldrb	r3, [r7, #1]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800435c:	e002      	b.n	8004364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0ba      	b.n	80044f8 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02e      	beq.n	8004424 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a4d      	ldr	r2, [pc, #308]	@ (8004500 <HAL_HRTIM_Init+0x190>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10b      	bne.n	80043e8 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80043d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004504 <HAL_HRTIM_Init+0x194>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004504 <HAL_HRTIM_Init+0x194>)
 80043d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043da:	6193      	str	r3, [r2, #24]
 80043dc:	4b49      	ldr	r3, [pc, #292]	@ (8004504 <HAL_HRTIM_Init+0x194>)
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80043f6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800440c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fd fbbd 	bl	8001ba4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004444:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800446c:	2300      	movs	r3, #0
 800446e:	75fb      	strb	r3, [r7, #23]
 8004470:	e03e      	b.n	80044f0 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004472:	7dfa      	ldrb	r2, [r7, #23]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3318      	adds	r3, #24
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004486:	7dfa      	ldrb	r2, [r7, #23]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	331c      	adds	r3, #28
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800449a:	7dfa      	ldrb	r2, [r7, #23]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3320      	adds	r3, #32
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80044ae:	7dfa      	ldrb	r2, [r7, #23]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3324      	adds	r3, #36	@ 0x24
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80044c2:	7dfa      	ldrb	r2, [r7, #23]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3328      	adds	r3, #40	@ 0x28
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80044d6:	7dfa      	ldrb	r2, [r7, #23]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3330      	adds	r3, #48	@ 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	3301      	adds	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d9bd      	bls.n	8004472 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40017400 	.word	0x40017400
 8004504:	40021000 	.word	0x40021000

08004508 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d101      	bne.n	8004524 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
 8004522:	e015      	b.n	8004550 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b05      	cmp	r3, #5
 8004530:	d104      	bne.n	800453c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f98a 	bl	800484e <HRTIM_MasterBase_Config>
 800453a:	e004      	b.n	8004546 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f9b3 	bl	80048ac <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d101      	bne.n	8004574 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
 8004572:	e05f      	b.n	8004634 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800457e:	2302      	movs	r3, #2
 8004580:	e058      	b.n	8004634 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b05      	cmp	r3, #5
 8004596:	d104      	bne.n	80045a2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f9c6 	bl	800492c <HRTIM_MasterWaveform_Config>
 80045a0:	e004      	b.n	80045ac <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa26 	bl	80049f8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4403      	add	r3, r0
 80045be:	3320      	adds	r3, #32
 80045c0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4403      	add	r3, r0
 80045d4:	3324      	adds	r3, #36	@ 0x24
 80045d6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4403      	add	r3, r0
 80045ea:	3328      	adds	r3, #40	@ 0x28
 80045ec:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68d9      	ldr	r1, [r3, #12]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4403      	add	r3, r0
 8004600:	332c      	adds	r3, #44	@ 0x2c
 8004602:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6919      	ldr	r1, [r3, #16]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4403      	add	r3, r0
 8004616:	3330      	adds	r3, #48	@ 0x30
 8004618:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fc03 	bl	8004e28 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d101      	bne.n	8004658 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
 8004656:	e067      	b.n	8004728 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_HRTIM_DeadTimeConfig+0x2a>
 8004662:	2302      	movs	r3, #2
 8004664:	e060      	b.n	8004728 <HAL_HRTIM_DeadTimeConfig+0xec>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800467e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	041a      	lsls	r2, r3, #16
 80046be:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	33b8      	adds	r3, #184	@ 0xb8
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8004702:	4013      	ands	r3, r2
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	6811      	ldr	r1, [r2, #0]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	01db      	lsls	r3, r3, #7
 8004710:	440b      	add	r3, r1
 8004712:	33b8      	adds	r3, #184	@ 0xb8
 8004714:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	01ff0000 	.word	0x01ff0000
 8004738:	3c002000 	.word	0x3c002000

0800473c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d101      	bne.n	800475a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	e01d      	b.n	8004796 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8004764:	2302      	movs	r3, #2
 8004766:	e016      	b.n	8004796 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fa7a 	bl	8004c78 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_HRTIM_WaveformOutputStart+0x18>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e01a      	b.n	80047ec <HAL_HRTIM_WaveformOutputStart+0x4e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_HRTIM_WaveformCountStart+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e018      	b.n	8004842 <HAL_HRTIM_WaveformCountStart+0x4a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f023 0318 	bic.w	r3, r3, #24
 8004878:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	6852      	ldr	r2, [r2, #4]
 800489e:	619a      	str	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3301      	adds	r3, #1
 80048c0:	01db      	lsls	r3, r3, #7
 80048c2:	4413      	add	r3, r2
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0307 	bic.w	r3, r3, #7
 80048ce:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0318 	bic.w	r3, r3, #24
 80048e0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	3301      	adds	r3, #1
 80048f4:	01db      	lsls	r3, r3, #7
 80048f6:	4413      	add	r3, r2
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	01db      	lsls	r3, r3, #7
 8004908:	440b      	add	r3, r1
 800490a:	3394      	adds	r3, #148	@ 0x94
 800490c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	440b      	add	r3, r1
 800491c:	3398      	adds	r3, #152	@ 0x98
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004946:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004960:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004972:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004984:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004996:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80049a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80049bc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ce:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b08b      	sub	sp, #44	@ 0x2c
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	01db      	lsls	r3, r3, #7
 8004a0e:	4413      	add	r3, r2
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	01db      	lsls	r3, r3, #7
 8004a20:	440b      	add	r3, r1
 8004a22:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	01db      	lsls	r3, r3, #7
 8004a2e:	4413      	add	r3, r2
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	4413      	add	r3, r2
 8004a3e:	33e8      	adds	r3, #232	@ 0xe8
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4413      	add	r3, r2
 8004a4e:	33e4      	adds	r3, #228	@ 0xe4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004a5c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	f023 0320 	bic.w	r3, r3, #32
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a90:	4313      	orrs	r3, r2
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ada:	d103      	bne.n	8004ae4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af2:	4313      	orrs	r3, r2
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	4313      	orrs	r3, r2
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b16:	4313      	orrs	r3, r2
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f023 031f 	bic.w	r3, r3, #31
 8004b20:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b36:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	6a3a      	ldr	r2, [r7, #32]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004b64:	d004      	beq.n	8004b70 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004b6e:	d103      	bne.n	8004b78 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b74:	2b40      	cmp	r3, #64	@ 0x40
 8004b76:	d108      	bne.n	8004b8a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004b7e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d843      	bhi.n	8004c1e <HRTIM_TimingUnitWaveform_Config+0x226>
 8004b96:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bb1 	.word	0x08004bb1
 8004ba0:	08004bc7 	.word	0x08004bc7
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bf3 	.word	0x08004bf3
 8004bac:	08004c09 	.word	0x08004c09
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004bb6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61fb      	str	r3, [r7, #28]
      break;
 8004bc4:	e02c      	b.n	8004c20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bcc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61fb      	str	r3, [r7, #28]
      break;
 8004bda:	e021      	b.n	8004c20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004be2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
      break;
 8004bf0:	e016      	b.n	8004c20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004bf8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61fb      	str	r3, [r7, #28]
      break;
 8004c06:	e00b      	b.n	8004c20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c0e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	015b      	lsls	r3, r3, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
      break;
 8004c1c:	e000      	b.n	8004c20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8004c1e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3301      	adds	r3, #1
 8004c28:	01db      	lsls	r3, r3, #7
 8004c2a:	4413      	add	r3, r2
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	01db      	lsls	r3, r3, #7
 8004c38:	4413      	add	r3, r2
 8004c3a:	33e8      	adds	r3, #232	@ 0xe8
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	01db      	lsls	r3, r3, #7
 8004c48:	4413      	add	r3, r2
 8004c4a:	33e4      	adds	r3, #228	@ 0xe4
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	4413      	add	r3, r2
 8004c5a:	33d4      	adds	r3, #212	@ 0xd4
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004c6a:	bf00      	nop
 8004c6c:	372c      	adds	r7, #44	@ 0x2c
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b089      	sub	sp, #36	@ 0x24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	01db      	lsls	r3, r3, #7
 8004c92:	4413      	add	r3, r2
 8004c94:	33e4      	adds	r3, #228	@ 0xe4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	01db      	lsls	r3, r3, #7
 8004ca2:	4413      	add	r3, r2
 8004ca4:	33b8      	adds	r3, #184	@ 0xb8
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb0:	d04d      	beq.n	8004d4e <HRTIM_OutputConfig+0xd6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb8:	d85e      	bhi.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc0:	d032      	beq.n	8004d28 <HRTIM_OutputConfig+0xb0>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc8:	d856      	bhi.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d03e      	beq.n	8004d4e <HRTIM_OutputConfig+0xd6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b80      	cmp	r3, #128	@ 0x80
 8004cd4:	d850      	bhi.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d025      	beq.n	8004d28 <HRTIM_OutputConfig+0xb0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b40      	cmp	r3, #64	@ 0x40
 8004ce0:	d84a      	bhi.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d01f      	beq.n	8004d28 <HRTIM_OutputConfig+0xb0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d044      	beq.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d841      	bhi.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d33e      	bcc.n	8004d78 <HRTIM_OutputConfig+0x100>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3b02      	subs	r3, #2
 8004cfe:	2201      	movs	r2, #1
 8004d00:	409a      	lsls	r2, r3
 8004d02:	4b48      	ldr	r3, [pc, #288]	@ (8004e24 <HRTIM_OutputConfig+0x1ac>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11c      	bne.n	8004d4e <HRTIM_OutputConfig+0xd6>
 8004d14:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d027      	beq.n	8004d78 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	01db      	lsls	r3, r3, #7
 8004d34:	440b      	add	r3, r1
 8004d36:	33bc      	adds	r3, #188	@ 0xbc
 8004d38:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	01db      	lsls	r3, r3, #7
 8004d46:	440b      	add	r3, r1
 8004d48:	33c0      	adds	r3, #192	@ 0xc0
 8004d4a:	601a      	str	r2, [r3, #0]
      break;
 8004d4c:	e015      	b.n	8004d7a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	01db      	lsls	r3, r3, #7
 8004d5a:	440b      	add	r3, r1
 8004d5c:	33c4      	adds	r3, #196	@ 0xc4
 8004d5e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	01db      	lsls	r3, r3, #7
 8004d6c:	440b      	add	r3, r1
 8004d6e:	33c8      	adds	r3, #200	@ 0xc8
 8004d70:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004d72:	2310      	movs	r3, #16
 8004d74:	61bb      	str	r3, [r7, #24]
      break;
 8004d76:	e000      	b.n	8004d7a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8004d78:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8004d7a:	22fe      	movs	r2, #254	@ 0xfe
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d111      	bne.n	8004e06 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10c      	bne.n	8004e06 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	01db      	lsls	r3, r3, #7
 8004e0e:	4413      	add	r3, r2
 8004e10:	33e4      	adds	r3, #228	@ 0xe4
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	3724      	adds	r7, #36	@ 0x24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40000041 	.word	0x40000041

08004e28 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d851      	bhi.n	8004edc <HRTIM_ForceRegistersUpdate+0xb4>
 8004e38:	a201      	add	r2, pc, #4	@ (adr r2, 8004e40 <HRTIM_ForceRegistersUpdate+0x18>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e6f 	.word	0x08004e6f
 8004e44:	08004e85 	.word	0x08004e85
 8004e48:	08004e9b 	.word	0x08004e9b
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004ec7 	.word	0x08004ec7
 8004e54:	08004e59 	.word	0x08004e59
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004e6c:	e037      	b.n	8004ede <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0202 	orr.w	r2, r2, #2
 8004e7e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004e82:	e02c      	b.n	8004ede <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0204 	orr.w	r2, r2, #4
 8004e94:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004e98:	e021      	b.n	8004ede <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004eae:	e016      	b.n	8004ede <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0210 	orr.w	r2, r2, #16
 8004ec0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004ec4:	e00b      	b.n	8004ede <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0220 	orr.w	r2, r2, #32
 8004ed6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8004eda:	e000      	b.n	8004ede <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8004edc:	bf00      	nop
  }
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004efc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f001 b823 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 817d 	beq.w	8005222 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f28:	4bbc      	ldr	r3, [pc, #752]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d00c      	beq.n	8004f4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f34:	4bb9      	ldr	r3, [pc, #740]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d15c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x10e>
 8004f40:	4bb6      	ldr	r3, [pc, #728]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4c:	d155      	bne.n	8004ffa <HAL_RCC_OscConfig+0x10e>
 8004f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_RCC_OscConfig+0x94>
 8004f7a:	4ba8      	ldr	r3, [pc, #672]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	e015      	b.n	8004fac <HAL_RCC_OscConfig+0xc0>
 8004f80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f84:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f98:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004f9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004fb0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004fb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004fb8:	fa92 f2a2 	rbit	r2, r2
 8004fbc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004fc0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004fc4:	fab2 f282 	clz	r2, r2
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f042 0220 	orr.w	r2, r2, #32
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	f002 021f 	and.w	r2, r2, #31
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 811f 	beq.w	8005220 <HAL_RCC_OscConfig+0x334>
 8004fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 8116 	bne.w	8005220 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f000 bfaf 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x12e>
 800500c:	4b83      	ldr	r3, [pc, #524]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a82      	ldr	r2, [pc, #520]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e036      	b.n	8005088 <HAL_RCC_OscConfig+0x19c>
 800501a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x158>
 800502a:	4b7c      	ldr	r3, [pc, #496]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7b      	ldr	r2, [pc, #492]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b79      	ldr	r3, [pc, #484]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a78      	ldr	r2, [pc, #480]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800503c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e021      	b.n	8005088 <HAL_RCC_OscConfig+0x19c>
 8005044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005048:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x184>
 8005056:	4b71      	ldr	r3, [pc, #452]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a70      	ldr	r2, [pc, #448]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800505c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b6e      	ldr	r3, [pc, #440]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6d      	ldr	r2, [pc, #436]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0x19c>
 8005070:	4b6a      	ldr	r3, [pc, #424]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a69      	ldr	r2, [pc, #420]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b67      	ldr	r3, [pc, #412]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a66      	ldr	r2, [pc, #408]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005086:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005088:	4b64      	ldr	r3, [pc, #400]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	f023 020f 	bic.w	r2, r3, #15
 8005090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005094:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	495f      	ldr	r1, [pc, #380]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d059      	beq.n	8005166 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fc ff5b 	bl	8001f6c <HAL_GetTick>
 80050b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fc ff56 	bl	8001f6c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b64      	cmp	r3, #100	@ 0x64
 80050ca:	d902      	bls.n	80050d2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	f000 bf43 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
 80050d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050d6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80050e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_OscConfig+0x218>
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	e015      	b.n	8005130 <HAL_RCC_OscConfig+0x244>
 8005104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005108:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005110:	fa93 f3a3 	rbit	r3, r3
 8005114:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005118:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800511c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005120:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800512c:	4b3b      	ldr	r3, [pc, #236]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 800512e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005130:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005134:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005138:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800513c:	fa92 f2a2 	rbit	r2, r2
 8005140:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005144:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005148:	fab2 f282 	clz	r2, r2
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	f042 0220 	orr.w	r2, r2, #32
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	f002 021f 	and.w	r2, r2, #31
 8005158:	2101      	movs	r1, #1
 800515a:	fa01 f202 	lsl.w	r2, r1, r2
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0ab      	beq.n	80050bc <HAL_RCC_OscConfig+0x1d0>
 8005164:	e05d      	b.n	8005222 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005166:	f7fc ff01 	bl	8001f6c <HAL_GetTick>
 800516a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005170:	f7fc fefc 	bl	8001f6c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b64      	cmp	r3, #100	@ 0x64
 800517e:	d902      	bls.n	8005186 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	f000 bee9 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
 8005186:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800518a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800519a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519e:	fab3 f383 	clz	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d102      	bne.n	80051b8 <HAL_RCC_OscConfig+0x2cc>
 80051b2:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	e015      	b.n	80051e4 <HAL_RCC_OscConfig+0x2f8>
 80051b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80051c4:	fa93 f3a3 	rbit	r3, r3
 80051c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80051cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051d0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80051d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80051e0:	4b0e      	ldr	r3, [pc, #56]	@ (800521c <HAL_RCC_OscConfig+0x330>)
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051e8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80051ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80051f0:	fa92 f2a2 	rbit	r2, r2
 80051f4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80051f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80051fc:	fab2 f282 	clz	r2, r2
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	f042 0220 	orr.w	r2, r2, #32
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	f002 021f 	and.w	r2, r2, #31
 800520c:	2101      	movs	r1, #1
 800520e:	fa01 f202 	lsl.w	r2, r1, r2
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ab      	bne.n	8005170 <HAL_RCC_OscConfig+0x284>
 8005218:	e003      	b.n	8005222 <HAL_RCC_OscConfig+0x336>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 817d 	beq.w	8005532 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005238:	4ba6      	ldr	r3, [pc, #664]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005244:	4ba3      	ldr	r3, [pc, #652]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 030c 	and.w	r3, r3, #12
 800524c:	2b08      	cmp	r3, #8
 800524e:	d172      	bne.n	8005336 <HAL_RCC_OscConfig+0x44a>
 8005250:	4ba0      	ldr	r3, [pc, #640]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d16c      	bne.n	8005336 <HAL_RCC_OscConfig+0x44a>
 800525c:	2302      	movs	r3, #2
 800525e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005266:	fa93 f3a3 	rbit	r3, r3
 800526a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800526e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005272:	fab3 f383 	clz	r3, r3
 8005276:	b2db      	uxtb	r3, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d102      	bne.n	800528c <HAL_RCC_OscConfig+0x3a0>
 8005286:	4b93      	ldr	r3, [pc, #588]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	e013      	b.n	80052b4 <HAL_RCC_OscConfig+0x3c8>
 800528c:	2302      	movs	r3, #2
 800528e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005296:	fa93 f3a3 	rbit	r3, r3
 800529a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800529e:	2302      	movs	r3, #2
 80052a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80052a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80052b0:	4b88      	ldr	r3, [pc, #544]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	2202      	movs	r2, #2
 80052b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80052ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80052be:	fa92 f2a2 	rbit	r2, r2
 80052c2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80052c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80052ca:	fab2 f282 	clz	r2, r2
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	f042 0220 	orr.w	r2, r2, #32
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	f002 021f 	and.w	r2, r2, #31
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f202 	lsl.w	r2, r1, r2
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCC_OscConfig+0x410>
 80052e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f000 be2e 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b75      	ldr	r3, [pc, #468]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	21f8      	movs	r1, #248	@ 0xf8
 8005312:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800531a:	fa91 f1a1 	rbit	r1, r1
 800531e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005322:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005326:	fab1 f181 	clz	r1, r1
 800532a:	b2c9      	uxtb	r1, r1
 800532c:	408b      	lsls	r3, r1
 800532e:	4969      	ldr	r1, [pc, #420]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005334:	e0fd      	b.n	8005532 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8088 	beq.w	8005458 <HAL_RCC_OscConfig+0x56c>
 8005348:	2301      	movs	r3, #1
 800534a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005352:	fa93 f3a3 	rbit	r3, r3
 8005356:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800535a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800535e:	fab3 f383 	clz	r3, r3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005368:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	461a      	mov	r2, r3
 8005370:	2301      	movs	r3, #1
 8005372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7fc fdfa 	bl	8001f6c <HAL_GetTick>
 8005378:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537e:	f7fc fdf5 	bl	8001f6c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d902      	bls.n	8005394 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	f000 bde2 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
 8005394:	2302      	movs	r3, #2
 8005396:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80053a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4d8>
 80053be:	4b45      	ldr	r3, [pc, #276]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	e013      	b.n	80053ec <HAL_RCC_OscConfig+0x500>
 80053c4:	2302      	movs	r3, #2
 80053c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80053d6:	2302      	movs	r3, #2
 80053d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80053dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80053e0:	fa93 f3a3 	rbit	r3, r3
 80053e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80053e8:	4b3a      	ldr	r3, [pc, #232]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	2202      	movs	r2, #2
 80053ee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80053f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80053f6:	fa92 f2a2 	rbit	r2, r2
 80053fa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80053fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005402:	fab2 f282 	clz	r2, r2
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	f042 0220 	orr.w	r2, r2, #32
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	f002 021f 	and.w	r2, r2, #31
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f202 	lsl.w	r2, r1, r2
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0af      	beq.n	800537e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b2d      	ldr	r3, [pc, #180]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800542a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	21f8      	movs	r1, #248	@ 0xf8
 8005434:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800543c:	fa91 f1a1 	rbit	r1, r1
 8005440:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005444:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005448:	fab1 f181 	clz	r1, r1
 800544c:	b2c9      	uxtb	r1, r1
 800544e:	408b      	lsls	r3, r1
 8005450:	4920      	ldr	r1, [pc, #128]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
 8005456:	e06c      	b.n	8005532 <HAL_RCC_OscConfig+0x646>
 8005458:	2301      	movs	r3, #1
 800545a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800546a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005478:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	461a      	mov	r2, r3
 8005480:	2300      	movs	r3, #0
 8005482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fc fd72 	bl	8001f6c <HAL_GetTick>
 8005488:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548c:	e00a      	b.n	80054a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548e:	f7fc fd6d 	bl	8001f6c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d902      	bls.n	80054a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	f000 bd5a 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
 80054a4:	2302      	movs	r3, #2
 80054a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d104      	bne.n	80054d8 <HAL_RCC_OscConfig+0x5ec>
 80054ce:	4b01      	ldr	r3, [pc, #4]	@ (80054d4 <HAL_RCC_OscConfig+0x5e8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	e015      	b.n	8005500 <HAL_RCC_OscConfig+0x614>
 80054d4:	40021000 	.word	0x40021000
 80054d8:	2302      	movs	r3, #2
 80054da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054e2:	fa93 f3a3 	rbit	r3, r3
 80054e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80054ea:	2302      	movs	r3, #2
 80054ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80054f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054f4:	fa93 f3a3 	rbit	r3, r3
 80054f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80054fc:	4bc8      	ldr	r3, [pc, #800]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	2202      	movs	r2, #2
 8005502:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005506:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800550a:	fa92 f2a2 	rbit	r2, r2
 800550e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005512:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005516:	fab2 f282 	clz	r2, r2
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f042 0220 	orr.w	r2, r2, #32
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	f002 021f 	and.w	r2, r2, #31
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ad      	bne.n	800548e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8110 	beq.w	8005768 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800554c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d079      	beq.n	800564c <HAL_RCC_OscConfig+0x760>
 8005558:	2301      	movs	r3, #1
 800555a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	4bab      	ldr	r3, [pc, #684]	@ (8005824 <HAL_RCC_OscConfig+0x938>)
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	461a      	mov	r2, r3
 800557e:	2301      	movs	r3, #1
 8005580:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005582:	f7fc fcf3 	bl	8001f6c <HAL_GetTick>
 8005586:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7fc fcee 	bl	8001f6c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d902      	bls.n	80055a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	f000 bcdb 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
 80055a2:	2302      	movs	r3, #2
 80055a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80055bc:	2202      	movs	r2, #2
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	fa93 f2a3 	rbit	r2, r3
 80055ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e0:	2202      	movs	r2, #2
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	fa93 f2a3 	rbit	r2, r3
 80055f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fc:	4b88      	ldr	r3, [pc, #544]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 80055fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005604:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005608:	2102      	movs	r1, #2
 800560a:	6019      	str	r1, [r3, #0]
 800560c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005610:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	fa93 f1a3 	rbit	r1, r3
 800561a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800561e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005622:	6019      	str	r1, [r3, #0]
  return result;
 8005624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005628:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2101      	movs	r1, #1
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0a0      	beq.n	800558c <HAL_RCC_OscConfig+0x6a0>
 800564a:	e08d      	b.n	8005768 <HAL_RCC_OscConfig+0x87c>
 800564c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005650:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800565c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	fa93 f2a3 	rbit	r2, r3
 8005666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800566a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800566e:	601a      	str	r2, [r3, #0]
  return result;
 8005670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005678:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	4b68      	ldr	r3, [pc, #416]	@ (8005824 <HAL_RCC_OscConfig+0x938>)
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	461a      	mov	r2, r3
 800568a:	2300      	movs	r3, #0
 800568c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568e:	f7fc fc6d 	bl	8001f6c <HAL_GetTick>
 8005692:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005698:	f7fc fc68 	bl	8001f6c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d902      	bls.n	80056ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	f000 bc55 	b.w	8005f58 <HAL_RCC_OscConfig+0x106c>
 80056ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80056b6:	2202      	movs	r2, #2
 80056b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	fa93 f2a3 	rbit	r2, r3
 80056c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056da:	2202      	movs	r2, #2
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056fe:	2202      	movs	r2, #2
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005706:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	fa93 f2a3 	rbit	r2, r3
 8005710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005714:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005718:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571a:	4b41      	ldr	r3, [pc, #260]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 800571c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800571e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005722:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005726:	2102      	movs	r1, #2
 8005728:	6019      	str	r1, [r3, #0]
 800572a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800572e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	fa93 f1a3 	rbit	r1, r3
 8005738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800573c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005740:	6019      	str	r1, [r3, #0]
  return result;
 8005742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005746:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	fab3 f383 	clz	r3, r3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d197      	bne.n	8005698 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800576c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 81a1 	beq.w	8005ac0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005784:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005790:	4b23      	ldr	r3, [pc, #140]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 8005796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800579a:	61d3      	str	r3, [r2, #28]
 800579c:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80057a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057a8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057b2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80057b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057be:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <HAL_RCC_OscConfig+0x93c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11a      	bne.n	8005800 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ca:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <HAL_RCC_OscConfig+0x93c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <HAL_RCC_OscConfig+0x93c>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d6:	f7fc fbc9 	bl	8001f6c <HAL_GetTick>
 80057da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	e009      	b.n	80057f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e0:	f7fc fbc4 	bl	8001f6c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b64      	cmp	r3, #100	@ 0x64
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e3b1      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005828 <HAL_RCC_OscConfig+0x93c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005804:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10d      	bne.n	800582c <HAL_RCC_OscConfig+0x940>
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4a02      	ldr	r2, [pc, #8]	@ (8005820 <HAL_RCC_OscConfig+0x934>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	6213      	str	r3, [r2, #32]
 800581c:	e03c      	b.n	8005898 <HAL_RCC_OscConfig+0x9ac>
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000
 8005824:	10908120 	.word	0x10908120
 8005828:	40007000 	.word	0x40007000
 800582c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005830:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10c      	bne.n	8005856 <HAL_RCC_OscConfig+0x96a>
 800583c:	4bc1      	ldr	r3, [pc, #772]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	4ac0      	ldr	r2, [pc, #768]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	6213      	str	r3, [r2, #32]
 8005848:	4bbe      	ldr	r3, [pc, #760]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4abd      	ldr	r2, [pc, #756]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 800584e:	f023 0304 	bic.w	r3, r3, #4
 8005852:	6213      	str	r3, [r2, #32]
 8005854:	e020      	b.n	8005898 <HAL_RCC_OscConfig+0x9ac>
 8005856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800585a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	2b05      	cmp	r3, #5
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x994>
 8005866:	4bb7      	ldr	r3, [pc, #732]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	4ab6      	ldr	r2, [pc, #728]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	6213      	str	r3, [r2, #32]
 8005872:	4bb4      	ldr	r3, [pc, #720]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	4ab3      	ldr	r2, [pc, #716]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6213      	str	r3, [r2, #32]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0x9ac>
 8005880:	4bb0      	ldr	r3, [pc, #704]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	4aaf      	ldr	r2, [pc, #700]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	6213      	str	r3, [r2, #32]
 800588c:	4bad      	ldr	r3, [pc, #692]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4aac      	ldr	r2, [pc, #688]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005892:	f023 0304 	bic.w	r3, r3, #4
 8005896:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800589c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8081 	beq.w	80059ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058aa:	f7fc fb5f 	bl	8001f6c <HAL_GetTick>
 80058ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b2:	e00b      	b.n	80058cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b4:	f7fc fb5a 	bl	8001f6c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e345      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
 80058cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058d4:	2202      	movs	r2, #2
 80058d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	fa93 f2a3 	rbit	r2, r3
 80058e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058f8:	2202      	movs	r2, #2
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005900:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	fa93 f2a3 	rbit	r2, r3
 800590a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800590e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005912:	601a      	str	r2, [r3, #0]
  return result;
 8005914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005918:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800591c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d102      	bne.n	8005938 <HAL_RCC_OscConfig+0xa4c>
 8005932:	4b84      	ldr	r3, [pc, #528]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	e013      	b.n	8005960 <HAL_RCC_OscConfig+0xa74>
 8005938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800593c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005940:	2202      	movs	r2, #2
 8005942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005948:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	fa93 f2a3 	rbit	r2, r3
 8005952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005956:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	4b79      	ldr	r3, [pc, #484]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005964:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005968:	2102      	movs	r1, #2
 800596a:	6011      	str	r1, [r2, #0]
 800596c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005970:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	fa92 f1a2 	rbit	r1, r2
 800597a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800597e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005982:	6011      	str	r1, [r2, #0]
  return result;
 8005984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005988:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	fab2 f282 	clz	r2, r2
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	f002 021f 	and.w	r2, r2, #31
 800599e:	2101      	movs	r1, #1
 80059a0:	fa01 f202 	lsl.w	r2, r1, r2
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d084      	beq.n	80058b4 <HAL_RCC_OscConfig+0x9c8>
 80059aa:	e07f      	b.n	8005aac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ac:	f7fc fade 	bl	8001f6c <HAL_GetTick>
 80059b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b4:	e00b      	b.n	80059ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b6:	f7fc fad9 	bl	8001f6c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e2c4      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
 80059ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80059d6:	2202      	movs	r2, #2
 80059d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	fa93 f2a3 	rbit	r2, r3
 80059e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059f6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059fa:	2202      	movs	r2, #2
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a02:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	fa93 f2a3 	rbit	r2, r3
 8005a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005a14:	601a      	str	r2, [r3, #0]
  return result;
 8005a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005a1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f043 0302 	orr.w	r3, r3, #2
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d102      	bne.n	8005a3a <HAL_RCC_OscConfig+0xb4e>
 8005a34:	4b43      	ldr	r3, [pc, #268]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	e013      	b.n	8005a62 <HAL_RCC_OscConfig+0xb76>
 8005a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a3e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a42:	2202      	movs	r2, #2
 8005a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	fa93 f2a3 	rbit	r2, r3
 8005a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a58:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	4b39      	ldr	r3, [pc, #228]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a66:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	6011      	str	r1, [r2, #0]
 8005a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a72:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	fa92 f1a2 	rbit	r1, r2
 8005a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a80:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005a84:	6011      	str	r1, [r2, #0]
  return result;
 8005a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a8a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	fab2 f282 	clz	r2, r2
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	f002 021f 	and.w	r2, r2, #31
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d184      	bne.n	80059b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005aac:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab4:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005abe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8242 	beq.w	8005f56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b44 <HAL_RCC_OscConfig+0xc58>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	f000 8213 	beq.w	8005f06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f040 8162 	bne.w	8005db6 <HAL_RCC_OscConfig+0xeca>
 8005af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005af6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005afa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b04:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	fa93 f2a3 	rbit	r2, r3
 8005b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b12:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005b16:	601a      	str	r2, [r3, #0]
  return result;
 8005b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005b20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b22:	fab3 f383 	clz	r3, r3
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fc fa18 	bl	8001f6c <HAL_GetTick>
 8005b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b40:	e00c      	b.n	8005b5c <HAL_RCC_OscConfig+0xc70>
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b48:	f7fc fa10 	bl	8001f6c <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e1fd      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
 8005b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b6e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	fa93 f2a3 	rbit	r2, r3
 8005b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005b80:	601a      	str	r2, [r3, #0]
  return result;
 8005b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b86:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005b8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8c:	fab3 f383 	clz	r3, r3
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <HAL_RCC_OscConfig+0xcba>
 8005ba0:	4bb0      	ldr	r3, [pc, #704]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	e027      	b.n	8005bf6 <HAL_RCC_OscConfig+0xd0a>
 8005ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005baa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005bae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bb8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	fa93 f2a3 	rbit	r2, r3
 8005bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bc6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bd0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bde:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	fa93 f2a3 	rbit	r2, r3
 8005be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bfa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005bfe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005c02:	6011      	str	r1, [r2, #0]
 8005c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005c08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	fa92 f1a2 	rbit	r1, r2
 8005c12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005c16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005c1a:	6011      	str	r1, [r2, #0]
  return result;
 8005c1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005c20:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	fab2 f282 	clz	r2, r2
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	f042 0220 	orr.w	r2, r2, #32
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	f002 021f 	and.w	r2, r2, #31
 8005c36:	2101      	movs	r1, #1
 8005c38:	fa01 f202 	lsl.w	r2, r1, r2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d182      	bne.n	8005b48 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c42:	4b88      	ldr	r3, [pc, #544]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	430b      	orrs	r3, r1
 8005c64:	497f      	ldr	r1, [pc, #508]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	604b      	str	r3, [r1, #4]
 8005c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c6e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005c72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	fa93 f2a3 	rbit	r2, r3
 8005c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005c8e:	601a      	str	r2, [r3, #0]
  return result;
 8005c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c94:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005c98:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c9a:	fab3 f383 	clz	r3, r3
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ca4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	461a      	mov	r2, r3
 8005cac:	2301      	movs	r3, #1
 8005cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb0:	f7fc f95c 	bl	8001f6c <HAL_GetTick>
 8005cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cb8:	e009      	b.n	8005cce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cba:	f7fc f957 	bl	8001f6c <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e144      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
 8005cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cd2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005cd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ce0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	fa93 f2a3 	rbit	r2, r3
 8005cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005cf2:	601a      	str	r2, [r3, #0]
  return result;
 8005cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cf8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005cfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d102      	bne.n	8005d18 <HAL_RCC_OscConfig+0xe2c>
 8005d12:	4b54      	ldr	r3, [pc, #336]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	e027      	b.n	8005d68 <HAL_RCC_OscConfig+0xe7c>
 8005d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005d20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d2a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	fa93 f2a3 	rbit	r2, r3
 8005d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d42:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d50:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	fa93 f2a3 	rbit	r2, r3
 8005d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	4b3f      	ldr	r3, [pc, #252]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d6c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005d70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d7a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	fa92 f1a2 	rbit	r1, r2
 8005d84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005d8c:	6011      	str	r1, [r2, #0]
  return result;
 8005d8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d92:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	fab2 f282 	clz	r2, r2
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	f042 0220 	orr.w	r2, r2, #32
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	f002 021f 	and.w	r2, r2, #31
 8005da8:	2101      	movs	r1, #1
 8005daa:	fa01 f202 	lsl.w	r2, r1, r2
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d082      	beq.n	8005cba <HAL_RCC_OscConfig+0xdce>
 8005db4:	e0cf      	b.n	8005f56 <HAL_RCC_OscConfig+0x106a>
 8005db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005dbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	fa93 f2a3 	rbit	r2, r3
 8005dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005dda:	601a      	str	r2, [r3, #0]
  return result;
 8005ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005de0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005de4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de6:	fab3 f383 	clz	r3, r3
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005df0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	461a      	mov	r2, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fc f8b6 	bl	8001f6c <HAL_GetTick>
 8005e00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e04:	e009      	b.n	8005e1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e06:	f7fc f8b1 	bl	8001f6c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e09e      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
 8005e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e2c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	fa93 f2a3 	rbit	r2, r3
 8005e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005e3e:	601a      	str	r2, [r3, #0]
  return result;
 8005e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e44:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005e48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e4a:	fab3 f383 	clz	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d104      	bne.n	8005e68 <HAL_RCC_OscConfig+0xf7c>
 8005e5e:	4b01      	ldr	r3, [pc, #4]	@ (8005e64 <HAL_RCC_OscConfig+0xf78>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	e029      	b.n	8005eb8 <HAL_RCC_OscConfig+0xfcc>
 8005e64:	40021000 	.word	0x40021000
 8005e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	fa93 f2a3 	rbit	r2, r3
 8005e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e88:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005e96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ea0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	fa93 f2a3 	rbit	r2, r3
 8005eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8005f64 <HAL_RCC_OscConfig+0x1078>)
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ebc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005ec0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005eca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	fa92 f1a2 	rbit	r1, r2
 8005ed4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ed8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005edc:	6011      	str	r1, [r2, #0]
  return result;
 8005ede:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ee2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	fab2 f282 	clz	r2, r2
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	f042 0220 	orr.w	r2, r2, #32
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	f002 021f 	and.w	r2, r2, #31
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f202 	lsl.w	r2, r1, r2
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d180      	bne.n	8005e06 <HAL_RCC_OscConfig+0xf1a>
 8005f04:	e027      	b.n	8005f56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e01e      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f1a:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <HAL_RCC_OscConfig+0x1078>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005f26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d10b      	bne.n	8005f52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005f3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000

08005f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b09e      	sub	sp, #120	@ 0x78
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e162      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b90      	ldr	r3, [pc, #576]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d910      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 0207 	bic.w	r2, r3, #7
 8005f96:	498b      	ldr	r1, [pc, #556]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b89      	ldr	r3, [pc, #548]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e14a      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b82      	ldr	r3, [pc, #520]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	497f      	ldr	r1, [pc, #508]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80dc 	beq.w	8006194 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d13c      	bne.n	800605e <HAL_RCC_ClockConfig+0xf6>
 8005fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fe8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fec:	fa93 f3a3 	rbit	r3, r3
 8005ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff4:	fab3 f383 	clz	r3, r3
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <HAL_RCC_ClockConfig+0xa6>
 8006008:	4b6f      	ldr	r3, [pc, #444]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	e00f      	b.n	800602e <HAL_RCC_ClockConfig+0xc6>
 800600e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006012:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006016:	fa93 f3a3 	rbit	r3, r3
 800601a:	667b      	str	r3, [r7, #100]	@ 0x64
 800601c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006020:	663b      	str	r3, [r7, #96]	@ 0x60
 8006022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006024:	fa93 f3a3 	rbit	r3, r3
 8006028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800602a:	4b67      	ldr	r3, [pc, #412]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 800602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006032:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006036:	fa92 f2a2 	rbit	r2, r2
 800603a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800603c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800603e:	fab2 f282 	clz	r2, r2
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	f042 0220 	orr.w	r2, r2, #32
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	f002 021f 	and.w	r2, r2, #31
 800604e:	2101      	movs	r1, #1
 8006050:	fa01 f202 	lsl.w	r2, r1, r2
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d17b      	bne.n	8006152 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e0f3      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d13c      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x178>
 8006066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800606a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d102      	bne.n	8006090 <HAL_RCC_ClockConfig+0x128>
 800608a:	4b4f      	ldr	r3, [pc, #316]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	e00f      	b.n	80060b0 <HAL_RCC_ClockConfig+0x148>
 8006090:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006094:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006098:	fa93 f3a3 	rbit	r3, r3
 800609c:	647b      	str	r3, [r7, #68]	@ 0x44
 800609e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80060a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a6:	fa93 f3a3 	rbit	r3, r3
 80060aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ac:	4b46      	ldr	r3, [pc, #280]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060b4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80060b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060b8:	fa92 f2a2 	rbit	r2, r2
 80060bc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80060be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060c0:	fab2 f282 	clz	r2, r2
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	f042 0220 	orr.w	r2, r2, #32
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	f002 021f 	and.w	r2, r2, #31
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f202 	lsl.w	r2, r1, r2
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d13a      	bne.n	8006152 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0b2      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
 80060e0:	2302      	movs	r3, #2
 80060e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	fa93 f3a3 	rbit	r3, r3
 80060ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d102      	bne.n	8006108 <HAL_RCC_ClockConfig+0x1a0>
 8006102:	4b31      	ldr	r3, [pc, #196]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	e00d      	b.n	8006124 <HAL_RCC_ClockConfig+0x1bc>
 8006108:	2302      	movs	r3, #2
 800610a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610e:	fa93 f3a3 	rbit	r3, r3
 8006112:	627b      	str	r3, [r7, #36]	@ 0x24
 8006114:	2302      	movs	r3, #2
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	4b29      	ldr	r3, [pc, #164]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	2202      	movs	r2, #2
 8006126:	61ba      	str	r2, [r7, #24]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	fa92 f2a2 	rbit	r2, r2
 800612e:	617a      	str	r2, [r7, #20]
  return result;
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	fab2 f282 	clz	r2, r2
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	f042 0220 	orr.w	r2, r2, #32
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	f002 021f 	and.w	r2, r2, #31
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f202 	lsl.w	r2, r1, r2
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e079      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006152:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f023 0203 	bic.w	r2, r3, #3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	491a      	ldr	r1, [pc, #104]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006164:	f7fb ff02 	bl	8001f6c <HAL_GetTick>
 8006168:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616a:	e00a      	b.n	8006182 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800616c:	f7fb fefe 	bl	8001f6c <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e061      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006182:	4b11      	ldr	r3, [pc, #68]	@ (80061c8 <HAL_RCC_ClockConfig+0x260>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 020c 	and.w	r2, r3, #12
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	429a      	cmp	r2, r3
 8006192:	d1eb      	bne.n	800616c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006194:	4b0b      	ldr	r3, [pc, #44]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d214      	bcs.n	80061cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b08      	ldr	r3, [pc, #32]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f023 0207 	bic.w	r2, r3, #7
 80061aa:	4906      	ldr	r1, [pc, #24]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b04      	ldr	r3, [pc, #16]	@ (80061c4 <HAL_RCC_ClockConfig+0x25c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e040      	b.n	8006246 <HAL_RCC_ClockConfig+0x2de>
 80061c4:	40022000 	.word	0x40022000
 80061c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <HAL_RCC_ClockConfig+0x2e8>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	491a      	ldr	r1, [pc, #104]	@ (8006250 <HAL_RCC_ClockConfig+0x2e8>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f6:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <HAL_RCC_ClockConfig+0x2e8>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4912      	ldr	r1, [pc, #72]	@ (8006250 <HAL_RCC_ClockConfig+0x2e8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800620a:	f000 f829 	bl	8006260 <HAL_RCC_GetSysClockFreq>
 800620e:	4601      	mov	r1, r0
 8006210:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <HAL_RCC_ClockConfig+0x2e8>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006218:	22f0      	movs	r2, #240	@ 0xf0
 800621a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	fa92 f2a2 	rbit	r2, r2
 8006222:	60fa      	str	r2, [r7, #12]
  return result;
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	fab2 f282 	clz	r2, r2
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	40d3      	lsrs	r3, r2
 800622e:	4a09      	ldr	r2, [pc, #36]	@ (8006254 <HAL_RCC_ClockConfig+0x2ec>)
 8006230:	5cd3      	ldrb	r3, [r2, r3]
 8006232:	fa21 f303 	lsr.w	r3, r1, r3
 8006236:	4a08      	ldr	r2, [pc, #32]	@ (8006258 <HAL_RCC_ClockConfig+0x2f0>)
 8006238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800623a:	4b08      	ldr	r3, [pc, #32]	@ (800625c <HAL_RCC_ClockConfig+0x2f4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7fb fe50 	bl	8001ee4 <HAL_InitTick>
  
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3778      	adds	r7, #120	@ 0x78
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
 8006254:	08007a4c 	.word	0x08007a4c
 8006258:	20000000 	.word	0x20000000
 800625c:	20000004 	.word	0x20000004

08006260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800627a:	4b1e      	ldr	r3, [pc, #120]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b04      	cmp	r3, #4
 8006288:	d002      	beq.n	8006290 <HAL_RCC_GetSysClockFreq+0x30>
 800628a:	2b08      	cmp	r3, #8
 800628c:	d003      	beq.n	8006296 <HAL_RCC_GetSysClockFreq+0x36>
 800628e:	e026      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006290:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006292:	613b      	str	r3, [r7, #16]
      break;
 8006294:	e026      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	0c9b      	lsrs	r3, r3, #18
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	4a17      	ldr	r2, [pc, #92]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80062a0:	5cd3      	ldrb	r3, [r2, r3]
 80062a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80062a4:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80062ae:	5cd3      	ldrb	r3, [r2, r3]
 80062b0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062bc:	4a0e      	ldr	r2, [pc, #56]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e004      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	613b      	str	r3, [r7, #16]
      break;
 80062dc:	e002      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80062e0:	613b      	str	r3, [r7, #16]
      break;
 80062e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e4:	693b      	ldr	r3, [r7, #16]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40021000 	.word	0x40021000
 80062f8:	007a1200 	.word	0x007a1200
 80062fc:	08007a5c 	.word	0x08007a5c
 8006300:	08007a6c 	.word	0x08007a6c
 8006304:	003d0900 	.word	0x003d0900

08006308 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b092      	sub	sp, #72	@ 0x48
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006318:	2300      	movs	r3, #0
 800631a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80cd 	beq.w	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800632c:	4b8e      	ldr	r3, [pc, #568]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10e      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006338:	4b8b      	ldr	r3, [pc, #556]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4a8a      	ldr	r2, [pc, #552]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006342:	61d3      	str	r3, [r2, #28]
 8006344:	4b88      	ldr	r3, [pc, #544]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634c:	60bb      	str	r3, [r7, #8]
 800634e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006356:	4b85      	ldr	r3, [pc, #532]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d118      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006362:	4b82      	ldr	r3, [pc, #520]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a81      	ldr	r2, [pc, #516]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800636c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800636e:	f7fb fdfd 	bl	8001f6c <HAL_GetTick>
 8006372:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006374:	e008      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006376:	f7fb fdf9 	bl	8001f6c <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b64      	cmp	r3, #100	@ 0x64
 8006382:	d901      	bls.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e0ea      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006388:	4b78      	ldr	r3, [pc, #480]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006394:	4b74      	ldr	r3, [pc, #464]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800639e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d07d      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d076      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063c0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	fa93 f3a3 	rbit	r3, r3
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063cc:	fab3 f383 	clz	r3, r3
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	4b66      	ldr	r3, [pc, #408]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	461a      	mov	r2, r3
 80063dc:	2301      	movs	r3, #1
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	fa93 f3a3 	rbit	r3, r3
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063f0:	fab3 f383 	clz	r3, r3
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	4b5d      	ldr	r3, [pc, #372]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006404:	4a58      	ldr	r2, [pc, #352]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006408:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800640a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d045      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006414:	f7fb fdaa 	bl	8001f6c <HAL_GetTick>
 8006418:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800641a:	e00a      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fb fda6 	bl	8001f6c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e095      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006432:	2302      	movs	r3, #2
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
 800643e:	2302      	movs	r3, #2
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	61fb      	str	r3, [r7, #28]
  return result;
 800644a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800644c:	fab3 f383 	clz	r3, r3
 8006450:	b2db      	uxtb	r3, r3
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d102      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006460:	4b41      	ldr	r3, [pc, #260]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	e007      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006466:	2302      	movs	r3, #2
 8006468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	fa93 f3a3 	rbit	r3, r3
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	4b3d      	ldr	r3, [pc, #244]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2202      	movs	r2, #2
 8006478:	613a      	str	r2, [r7, #16]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	fa92 f2a2 	rbit	r2, r2
 8006480:	60fa      	str	r2, [r7, #12]
  return result;
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	fab2 f282 	clz	r2, r2
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	f002 021f 	and.w	r2, r2, #31
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f202 	lsl.w	r2, r1, r2
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0bd      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80064a0:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	492e      	ldr	r1, [pc, #184]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d105      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064d2:	4b25      	ldr	r3, [pc, #148]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d6:	f023 0203 	bic.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4922      	ldr	r1, [pc, #136]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f4:	f023 0210 	bic.w	r2, r3, #16
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	491a      	ldr	r1, [pc, #104]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800650e:	4b16      	ldr	r3, [pc, #88]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	4913      	ldr	r1, [pc, #76]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800651c:	4313      	orrs	r3, r2
 800651e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800652c:	4b0e      	ldr	r3, [pc, #56]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	490b      	ldr	r1, [pc, #44]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800653a:	4313      	orrs	r3, r2
 800653c:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d008      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800654a:	4b07      	ldr	r3, [pc, #28]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	4904      	ldr	r1, [pc, #16]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006558:	4313      	orrs	r3, r2
 800655a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3748      	adds	r7, #72	@ 0x48
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40021000 	.word	0x40021000
 800656c:	40007000 	.word	0x40007000
 8006570:	10908100 	.word	0x10908100

08006574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e049      	b.n	800661a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fb fb78 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f000 fbb6 	bl	8006d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d001      	beq.n	800663c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e038      	b.n	80066ae <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1c      	ldr	r2, [pc, #112]	@ (80066bc <HAL_TIM_Base_Start+0x98>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_TIM_Base_Start+0x48>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006656:	d009      	beq.n	800666c <HAL_TIM_Base_Start+0x48>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <HAL_TIM_Base_Start+0x9c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIM_Base_Start+0x48>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a17      	ldr	r2, [pc, #92]	@ (80066c4 <HAL_TIM_Base_Start+0xa0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d115      	bne.n	8006698 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <HAL_TIM_Base_Start+0xa4>)
 8006674:	4013      	ands	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b06      	cmp	r3, #6
 800667c:	d015      	beq.n	80066aa <HAL_TIM_Base_Start+0x86>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006684:	d011      	beq.n	80066aa <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006696:	e008      	b.n	80066aa <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e000      	b.n	80066ac <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40000400 	.word	0x40000400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	00010007 	.word	0x00010007

080066cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e049      	b.n	8006772 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f841 	bl	800677a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 fb0a 	bl	8006d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <HAL_TIM_PWM_Start+0x24>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e03c      	b.n	800682e <HAL_TIM_PWM_Start+0x9e>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d109      	bne.n	80067ce <HAL_TIM_PWM_Start+0x3e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	bf14      	ite	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	2300      	moveq	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	e02f      	b.n	800682e <HAL_TIM_PWM_Start+0x9e>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d109      	bne.n	80067e8 <HAL_TIM_PWM_Start+0x58>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	bf14      	ite	ne
 80067e0:	2301      	movne	r3, #1
 80067e2:	2300      	moveq	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	e022      	b.n	800682e <HAL_TIM_PWM_Start+0x9e>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b0c      	cmp	r3, #12
 80067ec:	d109      	bne.n	8006802 <HAL_TIM_PWM_Start+0x72>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	bf14      	ite	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	2300      	moveq	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e015      	b.n	800682e <HAL_TIM_PWM_Start+0x9e>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b10      	cmp	r3, #16
 8006806:	d109      	bne.n	800681c <HAL_TIM_PWM_Start+0x8c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	e008      	b.n	800682e <HAL_TIM_PWM_Start+0x9e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e088      	b.n	8006948 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0xb6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006844:	e023      	b.n	800688e <HAL_TIM_PWM_Start+0xfe>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b04      	cmp	r3, #4
 800684a:	d104      	bne.n	8006856 <HAL_TIM_PWM_Start+0xc6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006854:	e01b      	b.n	800688e <HAL_TIM_PWM_Start+0xfe>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d104      	bne.n	8006866 <HAL_TIM_PWM_Start+0xd6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006864:	e013      	b.n	800688e <HAL_TIM_PWM_Start+0xfe>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d104      	bne.n	8006876 <HAL_TIM_PWM_Start+0xe6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006874:	e00b      	b.n	800688e <HAL_TIM_PWM_Start+0xfe>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b10      	cmp	r3, #16
 800687a:	d104      	bne.n	8006886 <HAL_TIM_PWM_Start+0xf6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006884:	e003      	b.n	800688e <HAL_TIM_PWM_Start+0xfe>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2201      	movs	r2, #1
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fe08 	bl	80074ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006950 <HAL_TIM_PWM_Start+0x1c0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_TIM_PWM_Start+0x134>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006954 <HAL_TIM_PWM_Start+0x1c4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_TIM_PWM_Start+0x134>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a28      	ldr	r2, [pc, #160]	@ (8006958 <HAL_TIM_PWM_Start+0x1c8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIM_PWM_Start+0x134>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a27      	ldr	r2, [pc, #156]	@ (800695c <HAL_TIM_PWM_Start+0x1cc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d101      	bne.n	80068c8 <HAL_TIM_PWM_Start+0x138>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_TIM_PWM_Start+0x13a>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006950 <HAL_TIM_PWM_Start+0x1c0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_TIM_PWM_Start+0x176>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f0:	d009      	beq.n	8006906 <HAL_TIM_PWM_Start+0x176>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006960 <HAL_TIM_PWM_Start+0x1d0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_TIM_PWM_Start+0x176>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a14      	ldr	r2, [pc, #80]	@ (8006954 <HAL_TIM_PWM_Start+0x1c4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d115      	bne.n	8006932 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <HAL_TIM_PWM_Start+0x1d4>)
 800690e:	4013      	ands	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d015      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1b4>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800691e:	d011      	beq.n	8006944 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006930:	e008      	b.n	8006944 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0201 	orr.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e000      	b.n	8006946 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006944:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800
 8006960:	40000400 	.word	0x40000400
 8006964:	00010007 	.word	0x00010007

08006968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006982:	2302      	movs	r3, #2
 8006984:	e0ff      	b.n	8006b86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b14      	cmp	r3, #20
 8006992:	f200 80f0 	bhi.w	8006b76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006996:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069f1 	.word	0x080069f1
 80069a0:	08006b77 	.word	0x08006b77
 80069a4:	08006b77 	.word	0x08006b77
 80069a8:	08006b77 	.word	0x08006b77
 80069ac:	08006a31 	.word	0x08006a31
 80069b0:	08006b77 	.word	0x08006b77
 80069b4:	08006b77 	.word	0x08006b77
 80069b8:	08006b77 	.word	0x08006b77
 80069bc:	08006a73 	.word	0x08006a73
 80069c0:	08006b77 	.word	0x08006b77
 80069c4:	08006b77 	.word	0x08006b77
 80069c8:	08006b77 	.word	0x08006b77
 80069cc:	08006ab3 	.word	0x08006ab3
 80069d0:	08006b77 	.word	0x08006b77
 80069d4:	08006b77 	.word	0x08006b77
 80069d8:	08006b77 	.word	0x08006b77
 80069dc:	08006af5 	.word	0x08006af5
 80069e0:	08006b77 	.word	0x08006b77
 80069e4:	08006b77 	.word	0x08006b77
 80069e8:	08006b77 	.word	0x08006b77
 80069ec:	08006b35 	.word	0x08006b35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fa18 	bl	8006e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0208 	orr.w	r2, r2, #8
 8006a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0204 	bic.w	r2, r2, #4
 8006a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	619a      	str	r2, [r3, #24]
      break;
 8006a2e:	e0a5      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fa7e 	bl	8006f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6999      	ldr	r1, [r3, #24]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	021a      	lsls	r2, r3, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	619a      	str	r2, [r3, #24]
      break;
 8006a70:	e084      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fadd 	bl	8007038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0208 	orr.w	r2, r2, #8
 8006a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0204 	bic.w	r2, r2, #4
 8006a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69d9      	ldr	r1, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	61da      	str	r2, [r3, #28]
      break;
 8006ab0:	e064      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fb3b 	bl	8007134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69d9      	ldr	r1, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	021a      	lsls	r2, r3, #8
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	61da      	str	r2, [r3, #28]
      break;
 8006af2:	e043      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fb7e 	bl	80071fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0208 	orr.w	r2, r2, #8
 8006b0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0204 	bic.w	r2, r2, #4
 8006b1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b32:	e023      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fbbc 	bl	80072b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006b74:	e002      	b.n	8006b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop

08006b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_TIM_ConfigClockSource+0x1c>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e0b6      	b.n	8006d1a <HAL_TIM_ConfigClockSource+0x18a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006be8:	d03e      	beq.n	8006c68 <HAL_TIM_ConfigClockSource+0xd8>
 8006bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bee:	f200 8087 	bhi.w	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf6:	f000 8086 	beq.w	8006d06 <HAL_TIM_ConfigClockSource+0x176>
 8006bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bfe:	d87f      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c00:	2b70      	cmp	r3, #112	@ 0x70
 8006c02:	d01a      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0xaa>
 8006c04:	2b70      	cmp	r3, #112	@ 0x70
 8006c06:	d87b      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c08:	2b60      	cmp	r3, #96	@ 0x60
 8006c0a:	d050      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x11e>
 8006c0c:	2b60      	cmp	r3, #96	@ 0x60
 8006c0e:	d877      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c10:	2b50      	cmp	r3, #80	@ 0x50
 8006c12:	d03c      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0xfe>
 8006c14:	2b50      	cmp	r3, #80	@ 0x50
 8006c16:	d873      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d058      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x13e>
 8006c1c:	2b40      	cmp	r3, #64	@ 0x40
 8006c1e:	d86f      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c20:	2b30      	cmp	r3, #48	@ 0x30
 8006c22:	d064      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x15e>
 8006c24:	2b30      	cmp	r3, #48	@ 0x30
 8006c26:	d86b      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d060      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x15e>
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d867      	bhi.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d05c      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x15e>
 8006c34:	2b10      	cmp	r3, #16
 8006c36:	d05a      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x15e>
 8006c38:	e062      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c4a:	f000 fc0f 	bl	800746c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	609a      	str	r2, [r3, #8]
      break;
 8006c66:	e04f      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c78:	f000 fbf8 	bl	800746c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c8a:	609a      	str	r2, [r3, #8]
      break;
 8006c8c:	e03c      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fb6c 	bl	8007378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2150      	movs	r1, #80	@ 0x50
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fbc5 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e02c      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 fb8b 	bl	80073d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2160      	movs	r1, #96	@ 0x60
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fbb5 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e01c      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f000 fb4c 	bl	8007378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2140      	movs	r1, #64	@ 0x40
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fba5 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006cec:	e00c      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f000 fb9c 	bl	8007436 <TIM_ITRx_SetConfig>
      break;
 8006cfe:	e003      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
      break;
 8006d04:	e000      	b.n	8006d08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a38      	ldr	r2, [pc, #224]	@ (8006e18 <TIM_Base_SetConfig+0xf4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_Base_SetConfig+0x28>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d42:	d003      	beq.n	8006d4c <TIM_Base_SetConfig+0x28>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a35      	ldr	r2, [pc, #212]	@ (8006e1c <TIM_Base_SetConfig+0xf8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d108      	bne.n	8006d5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2d      	ldr	r2, [pc, #180]	@ (8006e18 <TIM_Base_SetConfig+0xf4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <TIM_Base_SetConfig+0x6a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d6c:	d00f      	beq.n	8006d8e <TIM_Base_SetConfig+0x6a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2a      	ldr	r2, [pc, #168]	@ (8006e1c <TIM_Base_SetConfig+0xf8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00b      	beq.n	8006d8e <TIM_Base_SetConfig+0x6a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a29      	ldr	r2, [pc, #164]	@ (8006e20 <TIM_Base_SetConfig+0xfc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <TIM_Base_SetConfig+0x6a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a28      	ldr	r2, [pc, #160]	@ (8006e24 <TIM_Base_SetConfig+0x100>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d003      	beq.n	8006d8e <TIM_Base_SetConfig+0x6a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a27      	ldr	r2, [pc, #156]	@ (8006e28 <TIM_Base_SetConfig+0x104>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d108      	bne.n	8006da0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <TIM_Base_SetConfig+0xf4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_Base_SetConfig+0xc0>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a14      	ldr	r2, [pc, #80]	@ (8006e20 <TIM_Base_SetConfig+0xfc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_Base_SetConfig+0xc0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a13      	ldr	r2, [pc, #76]	@ (8006e24 <TIM_Base_SetConfig+0x100>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_Base_SetConfig+0xc0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a12      	ldr	r2, [pc, #72]	@ (8006e28 <TIM_Base_SetConfig+0x104>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d103      	bne.n	8006dec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d105      	bne.n	8006e0a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	611a      	str	r2, [r3, #16]
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f023 0201 	bic.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 0302 	bic.w	r3, r3, #2
 8006e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a28      	ldr	r2, [pc, #160]	@ (8006f28 <TIM_OC1_SetConfig+0xfc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00b      	beq.n	8006ea4 <TIM_OC1_SetConfig+0x78>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a27      	ldr	r2, [pc, #156]	@ (8006f2c <TIM_OC1_SetConfig+0x100>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d007      	beq.n	8006ea4 <TIM_OC1_SetConfig+0x78>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a26      	ldr	r2, [pc, #152]	@ (8006f30 <TIM_OC1_SetConfig+0x104>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC1_SetConfig+0x78>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a25      	ldr	r2, [pc, #148]	@ (8006f34 <TIM_OC1_SetConfig+0x108>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d10c      	bne.n	8006ebe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0308 	bic.w	r3, r3, #8
 8006eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f023 0304 	bic.w	r3, r3, #4
 8006ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a19      	ldr	r2, [pc, #100]	@ (8006f28 <TIM_OC1_SetConfig+0xfc>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00b      	beq.n	8006ede <TIM_OC1_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a18      	ldr	r2, [pc, #96]	@ (8006f2c <TIM_OC1_SetConfig+0x100>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d007      	beq.n	8006ede <TIM_OC1_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <TIM_OC1_SetConfig+0x104>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC1_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a16      	ldr	r2, [pc, #88]	@ (8006f34 <TIM_OC1_SetConfig+0x108>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d111      	bne.n	8006f02 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	621a      	str	r2, [r3, #32]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f023 0210 	bic.w	r2, r3, #16
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0320 	bic.w	r3, r3, #32
 8006f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a24      	ldr	r2, [pc, #144]	@ (8007028 <TIM_OC2_SetConfig+0xf0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d10d      	bne.n	8006fb8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a1b      	ldr	r2, [pc, #108]	@ (8007028 <TIM_OC2_SetConfig+0xf0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xa0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800702c <TIM_OC2_SetConfig+0xf4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xa0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a19      	ldr	r2, [pc, #100]	@ (8007030 <TIM_OC2_SetConfig+0xf8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xa0>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a18      	ldr	r2, [pc, #96]	@ (8007034 <TIM_OC2_SetConfig+0xfc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d113      	bne.n	8007000 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fde:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a23      	ldr	r2, [pc, #140]	@ (8007124 <TIM_OC3_SetConfig+0xec>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d10d      	bne.n	80070b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007124 <TIM_OC3_SetConfig+0xec>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <TIM_OC3_SetConfig+0x9e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a19      	ldr	r2, [pc, #100]	@ (8007128 <TIM_OC3_SetConfig+0xf0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d007      	beq.n	80070d6 <TIM_OC3_SetConfig+0x9e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a18      	ldr	r2, [pc, #96]	@ (800712c <TIM_OC3_SetConfig+0xf4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_OC3_SetConfig+0x9e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a17      	ldr	r2, [pc, #92]	@ (8007130 <TIM_OC3_SetConfig+0xf8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d113      	bne.n	80070fe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	621a      	str	r2, [r3, #32]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40014000 	.word	0x40014000
 800712c:	40014400 	.word	0x40014400
 8007130:	40014800 	.word	0x40014800

08007134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800716e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	031b      	lsls	r3, r3, #12
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a16      	ldr	r2, [pc, #88]	@ (80071ec <TIM_OC4_SetConfig+0xb8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00b      	beq.n	80071b0 <TIM_OC4_SetConfig+0x7c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a15      	ldr	r2, [pc, #84]	@ (80071f0 <TIM_OC4_SetConfig+0xbc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d007      	beq.n	80071b0 <TIM_OC4_SetConfig+0x7c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a14      	ldr	r2, [pc, #80]	@ (80071f4 <TIM_OC4_SetConfig+0xc0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_OC4_SetConfig+0x7c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a13      	ldr	r2, [pc, #76]	@ (80071f8 <TIM_OC4_SetConfig+0xc4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800

080071fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800722a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007240:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <TIM_OC5_SetConfig+0xac>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00b      	beq.n	800726e <TIM_OC5_SetConfig+0x72>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a14      	ldr	r2, [pc, #80]	@ (80072ac <TIM_OC5_SetConfig+0xb0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d007      	beq.n	800726e <TIM_OC5_SetConfig+0x72>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a13      	ldr	r2, [pc, #76]	@ (80072b0 <TIM_OC5_SetConfig+0xb4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC5_SetConfig+0x72>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a12      	ldr	r2, [pc, #72]	@ (80072b4 <TIM_OC5_SetConfig+0xb8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d109      	bne.n	8007282 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	621a      	str	r2, [r3, #32]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800

080072b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	4313      	orrs	r3, r2
 800730a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a16      	ldr	r2, [pc, #88]	@ (8007368 <TIM_OC6_SetConfig+0xb0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_OC6_SetConfig+0x74>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a15      	ldr	r2, [pc, #84]	@ (800736c <TIM_OC6_SetConfig+0xb4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_OC6_SetConfig+0x74>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a14      	ldr	r2, [pc, #80]	@ (8007370 <TIM_OC6_SetConfig+0xb8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC6_SetConfig+0x74>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a13      	ldr	r2, [pc, #76]	@ (8007374 <TIM_OC6_SetConfig+0xbc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d109      	bne.n	8007340 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40014000 	.word	0x40014000
 8007370:	40014400 	.word	0x40014400
 8007374:	40014800 	.word	0x40014800

08007378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0201 	bic.w	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f023 030a 	bic.w	r3, r3, #10
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	621a      	str	r2, [r3, #32]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b087      	sub	sp, #28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0210 	bic.w	r2, r3, #16
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	031b      	lsls	r3, r3, #12
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007412:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	f043 0307 	orr.w	r3, r3, #7
 8007458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	021a      	lsls	r2, r3, #8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	431a      	orrs	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4313      	orrs	r3, r2
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2201      	movs	r2, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	401a      	ands	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1a      	ldr	r2, [r3, #32]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	fa01 f303 	lsl.w	r3, r1, r3
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e054      	b.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a24      	ldr	r2, [pc, #144]	@ (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d108      	bne.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007540:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a17      	ldr	r2, [pc, #92]	@ (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00e      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007578:	d009      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a13      	ldr	r2, [pc, #76]	@ (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d004      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a11      	ldr	r2, [pc, #68]	@ (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10c      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40012c00 	.word	0x40012c00
 80075cc:	40000400 	.word	0x40000400
 80075d0:	40014000 	.word	0x40014000

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <__errno>:
 80075e4:	4b01      	ldr	r3, [pc, #4]	@ (80075ec <__errno+0x8>)
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	2000000c 	.word	0x2000000c

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	@ (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	@ (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	@ (8007634 <__libc_init_array+0x44>)
 8007604:	f000 fa16 	bl	8007a34 <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	08007a80 	.word	0x08007a80
 800762c:	08007a80 	.word	0x08007a80
 8007630:	08007a80 	.word	0x08007a80
 8007634:	08007a84 	.word	0x08007a84

08007638 <log>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	ed2d 8b02 	vpush	{d8}
 800763e:	ec55 4b10 	vmov	r4, r5, d0
 8007642:	f000 f841 	bl	80076c8 <__ieee754_log>
 8007646:	4622      	mov	r2, r4
 8007648:	462b      	mov	r3, r5
 800764a:	4620      	mov	r0, r4
 800764c:	4629      	mov	r1, r5
 800764e:	eeb0 8a40 	vmov.f32	s16, s0
 8007652:	eef0 8a60 	vmov.f32	s17, s1
 8007656:	f7f9 fa0d 	bl	8000a74 <__aeabi_dcmpun>
 800765a:	b998      	cbnz	r0, 8007684 <log+0x4c>
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	f7f9 f9fc 	bl	8000a60 <__aeabi_dcmpgt>
 8007668:	b960      	cbnz	r0, 8007684 <log+0x4c>
 800766a:	2200      	movs	r2, #0
 800766c:	2300      	movs	r3, #0
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 f9cd 	bl	8000a10 <__aeabi_dcmpeq>
 8007676:	b160      	cbz	r0, 8007692 <log+0x5a>
 8007678:	f7ff ffb4 	bl	80075e4 <__errno>
 800767c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80076a8 <log+0x70>
 8007680:	2322      	movs	r3, #34	@ 0x22
 8007682:	6003      	str	r3, [r0, #0]
 8007684:	eeb0 0a48 	vmov.f32	s0, s16
 8007688:	eef0 0a68 	vmov.f32	s1, s17
 800768c:	ecbd 8b02 	vpop	{d8}
 8007690:	bd38      	pop	{r3, r4, r5, pc}
 8007692:	f7ff ffa7 	bl	80075e4 <__errno>
 8007696:	ecbd 8b02 	vpop	{d8}
 800769a:	2321      	movs	r3, #33	@ 0x21
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a2:	4803      	ldr	r0, [pc, #12]	@ (80076b0 <log+0x78>)
 80076a4:	f000 b808 	b.w	80076b8 <nan>
 80076a8:	00000000 	.word	0x00000000
 80076ac:	fff00000 	.word	0xfff00000
 80076b0:	08007a7c 	.word	0x08007a7c
 80076b4:	00000000 	.word	0x00000000

080076b8 <nan>:
 80076b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80076c0 <nan+0x8>
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	00000000 	.word	0x00000000
 80076c4:	7ff80000 	.word	0x7ff80000

080076c8 <__ieee754_log>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	ec51 0b10 	vmov	r0, r1, d0
 80076d0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80076d4:	b087      	sub	sp, #28
 80076d6:	460d      	mov	r5, r1
 80076d8:	da26      	bge.n	8007728 <__ieee754_log+0x60>
 80076da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076de:	4303      	orrs	r3, r0
 80076e0:	4602      	mov	r2, r0
 80076e2:	d10a      	bne.n	80076fa <__ieee754_log+0x32>
 80076e4:	49ce      	ldr	r1, [pc, #824]	@ (8007a20 <__ieee754_log+0x358>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7f9 f852 	bl	8000794 <__aeabi_ddiv>
 80076f0:	ec41 0b10 	vmov	d0, r0, r1
 80076f4:	b007      	add	sp, #28
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	2900      	cmp	r1, #0
 80076fc:	da05      	bge.n	800770a <__ieee754_log+0x42>
 80076fe:	460b      	mov	r3, r1
 8007700:	f7f8 fd66 	bl	80001d0 <__aeabi_dsub>
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	e7f0      	b.n	80076ec <__ieee754_log+0x24>
 800770a:	4bc6      	ldr	r3, [pc, #792]	@ (8007a24 <__ieee754_log+0x35c>)
 800770c:	2200      	movs	r2, #0
 800770e:	f7f8 ff17 	bl	8000540 <__aeabi_dmul>
 8007712:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8007716:	460d      	mov	r5, r1
 8007718:	4ac3      	ldr	r2, [pc, #780]	@ (8007a28 <__ieee754_log+0x360>)
 800771a:	4295      	cmp	r5, r2
 800771c:	dd06      	ble.n	800772c <__ieee754_log+0x64>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	f7f8 fd57 	bl	80001d4 <__adddf3>
 8007726:	e7e3      	b.n	80076f0 <__ieee754_log+0x28>
 8007728:	2300      	movs	r3, #0
 800772a:	e7f5      	b.n	8007718 <__ieee754_log+0x50>
 800772c:	152c      	asrs	r4, r5, #20
 800772e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007732:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007736:	441c      	add	r4, r3
 8007738:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800773c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8007740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007744:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8007748:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800774c:	ea42 0105 	orr.w	r1, r2, r5
 8007750:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007754:	2200      	movs	r2, #0
 8007756:	4bb5      	ldr	r3, [pc, #724]	@ (8007a2c <__ieee754_log+0x364>)
 8007758:	f7f8 fd3a 	bl	80001d0 <__aeabi_dsub>
 800775c:	1cab      	adds	r3, r5, #2
 800775e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007762:	2b02      	cmp	r3, #2
 8007764:	4682      	mov	sl, r0
 8007766:	468b      	mov	fp, r1
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	dc53      	bgt.n	8007816 <__ieee754_log+0x14e>
 800776e:	2300      	movs	r3, #0
 8007770:	f7f9 f94e 	bl	8000a10 <__aeabi_dcmpeq>
 8007774:	b1d0      	cbz	r0, 80077ac <__ieee754_log+0xe4>
 8007776:	2c00      	cmp	r4, #0
 8007778:	f000 8120 	beq.w	80079bc <__ieee754_log+0x2f4>
 800777c:	4620      	mov	r0, r4
 800777e:	f7f8 fe75 	bl	800046c <__aeabi_i2d>
 8007782:	a391      	add	r3, pc, #580	@ (adr r3, 80079c8 <__ieee754_log+0x300>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	4606      	mov	r6, r0
 800778a:	460f      	mov	r7, r1
 800778c:	f7f8 fed8 	bl	8000540 <__aeabi_dmul>
 8007790:	a38f      	add	r3, pc, #572	@ (adr r3, 80079d0 <__ieee754_log+0x308>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	4604      	mov	r4, r0
 8007798:	460d      	mov	r5, r1
 800779a:	4630      	mov	r0, r6
 800779c:	4639      	mov	r1, r7
 800779e:	f7f8 fecf 	bl	8000540 <__aeabi_dmul>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	e7ba      	b.n	8007722 <__ieee754_log+0x5a>
 80077ac:	a38a      	add	r3, pc, #552	@ (adr r3, 80079d8 <__ieee754_log+0x310>)
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	f7f8 fec3 	bl	8000540 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	2000      	movs	r0, #0
 80077c0:	499b      	ldr	r1, [pc, #620]	@ (8007a30 <__ieee754_log+0x368>)
 80077c2:	f7f8 fd05 	bl	80001d0 <__aeabi_dsub>
 80077c6:	4652      	mov	r2, sl
 80077c8:	4606      	mov	r6, r0
 80077ca:	460f      	mov	r7, r1
 80077cc:	465b      	mov	r3, fp
 80077ce:	4650      	mov	r0, sl
 80077d0:	4659      	mov	r1, fp
 80077d2:	f7f8 feb5 	bl	8000540 <__aeabi_dmul>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4630      	mov	r0, r6
 80077dc:	4639      	mov	r1, r7
 80077de:	f7f8 feaf 	bl	8000540 <__aeabi_dmul>
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	b914      	cbnz	r4, 80077ee <__ieee754_log+0x126>
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	e0a0      	b.n	8007930 <__ieee754_log+0x268>
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7f8 fe3c 	bl	800046c <__aeabi_i2d>
 80077f4:	a374      	add	r3, pc, #464	@ (adr r3, 80079c8 <__ieee754_log+0x300>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	4680      	mov	r8, r0
 80077fc:	4689      	mov	r9, r1
 80077fe:	f7f8 fe9f 	bl	8000540 <__aeabi_dmul>
 8007802:	a373      	add	r3, pc, #460	@ (adr r3, 80079d0 <__ieee754_log+0x308>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	4604      	mov	r4, r0
 800780a:	460d      	mov	r5, r1
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f8 fe96 	bl	8000540 <__aeabi_dmul>
 8007814:	e0a5      	b.n	8007962 <__ieee754_log+0x29a>
 8007816:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800781a:	f7f8 fcdb 	bl	80001d4 <__adddf3>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4650      	mov	r0, sl
 8007824:	4659      	mov	r1, fp
 8007826:	f7f8 ffb5 	bl	8000794 <__aeabi_ddiv>
 800782a:	e9cd 0100 	strd	r0, r1, [sp]
 800782e:	4620      	mov	r0, r4
 8007830:	f7f8 fe1c 	bl	800046c <__aeabi_i2d>
 8007834:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800783c:	4610      	mov	r0, r2
 800783e:	4619      	mov	r1, r3
 8007840:	f7f8 fe7e 	bl	8000540 <__aeabi_dmul>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800784c:	f7f8 fe78 	bl	8000540 <__aeabi_dmul>
 8007850:	a363      	add	r3, pc, #396	@ (adr r3, 80079e0 <__ieee754_log+0x318>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	4680      	mov	r8, r0
 8007858:	4689      	mov	r9, r1
 800785a:	f7f8 fe71 	bl	8000540 <__aeabi_dmul>
 800785e:	a362      	add	r3, pc, #392	@ (adr r3, 80079e8 <__ieee754_log+0x320>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fcb6 	bl	80001d4 <__adddf3>
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	f7f8 fe68 	bl	8000540 <__aeabi_dmul>
 8007870:	a35f      	add	r3, pc, #380	@ (adr r3, 80079f0 <__ieee754_log+0x328>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fcad 	bl	80001d4 <__adddf3>
 800787a:	4642      	mov	r2, r8
 800787c:	464b      	mov	r3, r9
 800787e:	f7f8 fe5f 	bl	8000540 <__aeabi_dmul>
 8007882:	a35d      	add	r3, pc, #372	@ (adr r3, 80079f8 <__ieee754_log+0x330>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fca4 	bl	80001d4 <__adddf3>
 800788c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007890:	f7f8 fe56 	bl	8000540 <__aeabi_dmul>
 8007894:	a35a      	add	r3, pc, #360	@ (adr r3, 8007a00 <__ieee754_log+0x338>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f8 fe4d 	bl	8000540 <__aeabi_dmul>
 80078a6:	a358      	add	r3, pc, #352	@ (adr r3, 8007a08 <__ieee754_log+0x340>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f8 fc92 	bl	80001d4 <__adddf3>
 80078b0:	4642      	mov	r2, r8
 80078b2:	464b      	mov	r3, r9
 80078b4:	f7f8 fe44 	bl	8000540 <__aeabi_dmul>
 80078b8:	a355      	add	r3, pc, #340	@ (adr r3, 8007a10 <__ieee754_log+0x348>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fc89 	bl	80001d4 <__adddf3>
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	f7f8 fe3b 	bl	8000540 <__aeabi_dmul>
 80078ca:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80078d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078da:	f7f8 fc7b 	bl	80001d4 <__adddf3>
 80078de:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80078e2:	3551      	adds	r5, #81	@ 0x51
 80078e4:	4335      	orrs	r5, r6
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	dd48      	ble.n	8007980 <__ieee754_log+0x2b8>
 80078ee:	4b50      	ldr	r3, [pc, #320]	@ (8007a30 <__ieee754_log+0x368>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	4650      	mov	r0, sl
 80078f4:	4659      	mov	r1, fp
 80078f6:	f7f8 fe23 	bl	8000540 <__aeabi_dmul>
 80078fa:	4652      	mov	r2, sl
 80078fc:	465b      	mov	r3, fp
 80078fe:	f7f8 fe1f 	bl	8000540 <__aeabi_dmul>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	f7f8 fc61 	bl	80001d4 <__adddf3>
 8007912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007916:	f7f8 fe13 	bl	8000540 <__aeabi_dmul>
 800791a:	4680      	mov	r8, r0
 800791c:	4689      	mov	r9, r1
 800791e:	b964      	cbnz	r4, 800793a <__ieee754_log+0x272>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4630      	mov	r0, r6
 8007926:	4639      	mov	r1, r7
 8007928:	f7f8 fc52 	bl	80001d0 <__aeabi_dsub>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4650      	mov	r0, sl
 8007932:	4659      	mov	r1, fp
 8007934:	f7f8 fc4c 	bl	80001d0 <__aeabi_dsub>
 8007938:	e6da      	b.n	80076f0 <__ieee754_log+0x28>
 800793a:	a323      	add	r3, pc, #140	@ (adr r3, 80079c8 <__ieee754_log+0x300>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007944:	f7f8 fdfc 	bl	8000540 <__aeabi_dmul>
 8007948:	a321      	add	r3, pc, #132	@ (adr r3, 80079d0 <__ieee754_log+0x308>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	4604      	mov	r4, r0
 8007950:	460d      	mov	r5, r1
 8007952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007956:	f7f8 fdf3 	bl	8000540 <__aeabi_dmul>
 800795a:	4642      	mov	r2, r8
 800795c:	464b      	mov	r3, r9
 800795e:	f7f8 fc39 	bl	80001d4 <__adddf3>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4630      	mov	r0, r6
 8007968:	4639      	mov	r1, r7
 800796a:	f7f8 fc31 	bl	80001d0 <__aeabi_dsub>
 800796e:	4652      	mov	r2, sl
 8007970:	465b      	mov	r3, fp
 8007972:	f7f8 fc2d 	bl	80001d0 <__aeabi_dsub>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4620      	mov	r0, r4
 800797c:	4629      	mov	r1, r5
 800797e:	e7d9      	b.n	8007934 <__ieee754_log+0x26c>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4650      	mov	r0, sl
 8007986:	4659      	mov	r1, fp
 8007988:	f7f8 fc22 	bl	80001d0 <__aeabi_dsub>
 800798c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007990:	f7f8 fdd6 	bl	8000540 <__aeabi_dmul>
 8007994:	4606      	mov	r6, r0
 8007996:	460f      	mov	r7, r1
 8007998:	2c00      	cmp	r4, #0
 800799a:	f43f af25 	beq.w	80077e8 <__ieee754_log+0x120>
 800799e:	a30a      	add	r3, pc, #40	@ (adr r3, 80079c8 <__ieee754_log+0x300>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a8:	f7f8 fdca 	bl	8000540 <__aeabi_dmul>
 80079ac:	a308      	add	r3, pc, #32	@ (adr r3, 80079d0 <__ieee754_log+0x308>)
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	4604      	mov	r4, r0
 80079b4:	460d      	mov	r5, r1
 80079b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ba:	e729      	b.n	8007810 <__ieee754_log+0x148>
 80079bc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007a18 <__ieee754_log+0x350>
 80079c0:	e698      	b.n	80076f4 <__ieee754_log+0x2c>
 80079c2:	bf00      	nop
 80079c4:	f3af 8000 	nop.w
 80079c8:	fee00000 	.word	0xfee00000
 80079cc:	3fe62e42 	.word	0x3fe62e42
 80079d0:	35793c76 	.word	0x35793c76
 80079d4:	3dea39ef 	.word	0x3dea39ef
 80079d8:	55555555 	.word	0x55555555
 80079dc:	3fd55555 	.word	0x3fd55555
 80079e0:	df3e5244 	.word	0xdf3e5244
 80079e4:	3fc2f112 	.word	0x3fc2f112
 80079e8:	96cb03de 	.word	0x96cb03de
 80079ec:	3fc74664 	.word	0x3fc74664
 80079f0:	94229359 	.word	0x94229359
 80079f4:	3fd24924 	.word	0x3fd24924
 80079f8:	55555593 	.word	0x55555593
 80079fc:	3fe55555 	.word	0x3fe55555
 8007a00:	d078c69f 	.word	0xd078c69f
 8007a04:	3fc39a09 	.word	0x3fc39a09
 8007a08:	1d8e78af 	.word	0x1d8e78af
 8007a0c:	3fcc71c5 	.word	0x3fcc71c5
 8007a10:	9997fa04 	.word	0x9997fa04
 8007a14:	3fd99999 	.word	0x3fd99999
	...
 8007a20:	c3500000 	.word	0xc3500000
 8007a24:	43500000 	.word	0x43500000
 8007a28:	7fefffff 	.word	0x7fefffff
 8007a2c:	3ff00000 	.word	0x3ff00000
 8007a30:	3fe00000 	.word	0x3fe00000

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
