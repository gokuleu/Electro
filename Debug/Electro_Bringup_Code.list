
Electro_Bringup_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d2c  08004d2c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d2c  08004d2c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d30  08004d30  00005d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000016c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e722  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002384  00000000  00000000  0001475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00016ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac0  00000000  00000000  000178d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203c7  00000000  00000000  00018398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010dd7  00000000  00000000  0003875f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d6a  00000000  00000000  00049536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e2a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a70  00000000  00000000  0010e2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00111d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ce4 	.word	0x08004ce4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ce4 	.word	0x08004ce4

080001c8 <Send_on_CAN>:
extern uint16_t ADC_VAL[7];

uint8_t RxData[8];
uint8_t TxData[8];

void Send_on_CAN(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	  uint32_t time_count = HAL_GetTick();
 80001ce:	f000 fd2d 	bl	8000c2c <HAL_GetTick>
 80001d2:	6078      	str	r0, [r7, #4]
	  static uint32_t Prev_time = 0;
	  if(time_count - Prev_time > 100){
 80001d4:	4b20      	ldr	r3, [pc, #128]	@ (8000258 <Send_on_CAN+0x90>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	1ad3      	subs	r3, r2, r3
 80001dc:	2b64      	cmp	r3, #100	@ 0x64
 80001de:	d937      	bls.n	8000250 <Send_on_CAN+0x88>
		  	Prev_time = time_count;
 80001e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000258 <Send_on_CAN+0x90>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	6013      	str	r3, [r2, #0]

		  	TxData[0] = ADC_VAL[0]&0xff;
 80001e6:	4b1d      	ldr	r3, [pc, #116]	@ (800025c <Send_on_CAN+0x94>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000260 <Send_on_CAN+0x98>)
 80001ee:	701a      	strb	r2, [r3, #0]
		  	TxData[1] = (ADC_VAL[0]&0xff00)>>8;
 80001f0:	4b1a      	ldr	r3, [pc, #104]	@ (800025c <Send_on_CAN+0x94>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	0a1b      	lsrs	r3, r3, #8
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b19      	ldr	r3, [pc, #100]	@ (8000260 <Send_on_CAN+0x98>)
 80001fc:	705a      	strb	r2, [r3, #1]
		  	TxData[2] = ADC_VAL[1]&0xff;
 80001fe:	4b17      	ldr	r3, [pc, #92]	@ (800025c <Send_on_CAN+0x94>)
 8000200:	885b      	ldrh	r3, [r3, #2]
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b16      	ldr	r3, [pc, #88]	@ (8000260 <Send_on_CAN+0x98>)
 8000206:	709a      	strb	r2, [r3, #2]
		  	TxData[3] = (ADC_VAL[1]&0xff00)>>8;
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <Send_on_CAN+0x94>)
 800020a:	885b      	ldrh	r3, [r3, #2]
 800020c:	0a1b      	lsrs	r3, r3, #8
 800020e:	b29b      	uxth	r3, r3
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <Send_on_CAN+0x98>)
 8000214:	70da      	strb	r2, [r3, #3]
		  	TxData[4] = ADC_VAL[2]&0xff;
 8000216:	4b11      	ldr	r3, [pc, #68]	@ (800025c <Send_on_CAN+0x94>)
 8000218:	889b      	ldrh	r3, [r3, #4]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <Send_on_CAN+0x98>)
 800021e:	711a      	strb	r2, [r3, #4]
		  	TxData[5] = (ADC_VAL[2]&0xff00)>>8;
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <Send_on_CAN+0x94>)
 8000222:	889b      	ldrh	r3, [r3, #4]
 8000224:	0a1b      	lsrs	r3, r3, #8
 8000226:	b29b      	uxth	r3, r3
 8000228:	b2da      	uxtb	r2, r3
 800022a:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <Send_on_CAN+0x98>)
 800022c:	715a      	strb	r2, [r3, #5]
		  	TxData[6] = ADC_VAL[3]&0xff;
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <Send_on_CAN+0x94>)
 8000230:	88db      	ldrh	r3, [r3, #6]
 8000232:	b2da      	uxtb	r2, r3
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <Send_on_CAN+0x98>)
 8000236:	719a      	strb	r2, [r3, #6]
		  	TxData[7] = (ADC_VAL[3]&0xff00)>>8;
 8000238:	4b08      	ldr	r3, [pc, #32]	@ (800025c <Send_on_CAN+0x94>)
 800023a:	88db      	ldrh	r3, [r3, #6]
 800023c:	0a1b      	lsrs	r3, r3, #8
 800023e:	b29b      	uxth	r3, r3
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <Send_on_CAN+0x98>)
 8000244:	71da      	strb	r2, [r3, #7]

		  	Transmit_On_CAN(0x123, TxData);
 8000246:	4906      	ldr	r1, [pc, #24]	@ (8000260 <Send_on_CAN+0x98>)
 8000248:	f240 1023 	movw	r0, #291	@ 0x123
 800024c:	f000 f80a 	bl	8000264 <Transmit_On_CAN>
		  }
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000054 	.word	0x20000054
 800025c:	20000160 	.word	0x20000160
 8000260:	2000004c 	.word	0x2000004c

08000264 <Transmit_On_CAN>:

void Transmit_On_CAN(uint16_t id, uint8_t data[8]){
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	@ 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxHeader = {
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
 8000280:	615a      	str	r2, [r3, #20]
 8000282:	88fb      	ldrh	r3, [r7, #6]
 8000284:	613b      	str	r3, [r7, #16]
 8000286:	2308      	movs	r3, #8
 8000288:	623b      	str	r3, [r7, #32]
		    .DLC = 8	,
		    .TransmitGlobalTime = DISABLE
	};

	uint32_t txMailbox;
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0){}
 800028a:	bf00      	nop
 800028c:	480b      	ldr	r0, [pc, #44]	@ (80002bc <Transmit_On_CAN+0x58>)
 800028e:	f001 fef0 	bl	8002072 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <Transmit_On_CAN+0x28>
	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, (uint8_t*)data , &txMailbox) != HAL_OK){
 8000298:	f107 030c 	add.w	r3, r7, #12
 800029c:	f107 0110 	add.w	r1, r7, #16
 80002a0:	683a      	ldr	r2, [r7, #0]
 80002a2:	4806      	ldr	r0, [pc, #24]	@ (80002bc <Transmit_On_CAN+0x58>)
 80002a4:	f001 fe15 	bl	8001ed2 <HAL_CAN_AddTxMessage>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <Transmit_On_CAN+0x4e>
		Error_Handler();
 80002ae:	f000 fa83 	bl	80007b8 <Error_Handler>
	}

}
 80002b2:	bf00      	nop
 80002b4:	3728      	adds	r7, #40	@ 0x28
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	200000ec 	.word	0x200000ec

080002c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage (CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80002ca:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f001 ff04 	bl	80020dc <HAL_CAN_GetRxMessage>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 80002da:	f000 fa6d 	bl	80007b8 <Error_Handler>

	if(RxHeader.StdId == 0x001){

	}

}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000044 	.word	0x20000044
 80002ec:	20000028 	.word	0x20000028

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fc40 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f828 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 fa20 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000300:	f000 fa00 	bl	8000704 <MX_DMA_Init>
  MX_CAN_Init();
 8000304:	f000 f944 	bl	8000590 <MX_CAN_Init>
  MX_ADC1_Init();
 8000308:	f000 f87c 	bl	8000404 <MX_ADC1_Init>
  MX_TIM15_Init();
 800030c:	f000 f9a8 	bl	8000660 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADC_Start_DMA(&hadc1, ADC_VAL, 7) != HAL_OK) {
 8000310:	2207      	movs	r2, #7
 8000312:	490a      	ldr	r1, [pc, #40]	@ (800033c <main+0x4c>)
 8000314:	480a      	ldr	r0, [pc, #40]	@ (8000340 <main+0x50>)
 8000316:	f000 fe45 	bl	8000fa4 <HAL_ADC_Start_DMA>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <main+0x34>
       Error_Handler();  // <-- Might be going here
 8000320:	f000 fa4a 	bl	80007b8 <Error_Handler>
   }
  HAL_TIM_Base_Start(&htim15);
 8000324:	4807      	ldr	r0, [pc, #28]	@ (8000344 <main+0x54>)
 8000326:	f004 fa07 	bl	8004738 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Send_on_CAN();
 800032a:	f7ff ff4d 	bl	80001c8 <Send_on_CAN>
	count++;
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <main+0x58>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <main+0x58>)
 8000336:	6013      	str	r3, [r2, #0]
	Send_on_CAN();
 8000338:	bf00      	nop
 800033a:	e7f6      	b.n	800032a <main+0x3a>
 800033c:	20000160 	.word	0x20000160
 8000340:	20000058 	.word	0x20000058
 8000344:	20000114 	.word	0x20000114
 8000348:	20000170 	.word	0x20000170

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b096      	sub	sp, #88	@ 0x58
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000356:	2228      	movs	r2, #40	@ 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 fc96 	bl	8004c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000382:	2301      	movs	r3, #1
 8000384:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800038a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000394:	2302      	movs	r3, #2
 8000396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800039e:	2300      	movs	r3, #0
 80003a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fe2a 	bl	8003000 <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003b2:	f000 fa01 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	230f      	movs	r3, #15
 80003b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	2302      	movs	r3, #2
 80003bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ca:	f107 031c 	add.w	r3, r7, #28
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 fe53 	bl	800407c <HAL_RCC_ClockConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003dc:	f000 f9ec 	bl	80007b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003e0:	2380      	movs	r3, #128	@ 0x80
 80003e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ea:	463b      	mov	r3, r7
 80003ec:	4618      	mov	r0, r3
 80003ee:	f004 f815 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003f8:	f000 f9de 	bl	80007b8 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3758      	adds	r7, #88	@ 0x58
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	@ 0x28
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000426:	4b59      	ldr	r3, [pc, #356]	@ (800058c <MX_ADC1_Init+0x188>)
 8000428:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800042e:	4b57      	ldr	r3, [pc, #348]	@ (800058c <MX_ADC1_Init+0x188>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000434:	4b55      	ldr	r3, [pc, #340]	@ (800058c <MX_ADC1_Init+0x188>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043a:	4b54      	ldr	r3, [pc, #336]	@ (800058c <MX_ADC1_Init+0x188>)
 800043c:	2201      	movs	r2, #1
 800043e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000440:	4b52      	ldr	r3, [pc, #328]	@ (800058c <MX_ADC1_Init+0x188>)
 8000442:	2200      	movs	r2, #0
 8000444:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b51      	ldr	r3, [pc, #324]	@ (800058c <MX_ADC1_Init+0x188>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800044e:	4b4f      	ldr	r3, [pc, #316]	@ (800058c <MX_ADC1_Init+0x188>)
 8000450:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000454:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000456:	4b4d      	ldr	r3, [pc, #308]	@ (800058c <MX_ADC1_Init+0x188>)
 8000458:	f44f 7260 	mov.w	r2, #896	@ 0x380
 800045c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045e:	4b4b      	ldr	r3, [pc, #300]	@ (800058c <MX_ADC1_Init+0x188>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000464:	4b49      	ldr	r3, [pc, #292]	@ (800058c <MX_ADC1_Init+0x188>)
 8000466:	2207      	movs	r2, #7
 8000468:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800046a:	4b48      	ldr	r3, [pc, #288]	@ (800058c <MX_ADC1_Init+0x188>)
 800046c:	2201      	movs	r2, #1
 800046e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000472:	4b46      	ldr	r3, [pc, #280]	@ (800058c <MX_ADC1_Init+0x188>)
 8000474:	2208      	movs	r2, #8
 8000476:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000478:	4b44      	ldr	r3, [pc, #272]	@ (800058c <MX_ADC1_Init+0x188>)
 800047a:	2200      	movs	r2, #0
 800047c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800047e:	4b43      	ldr	r3, [pc, #268]	@ (800058c <MX_ADC1_Init+0x188>)
 8000480:	2200      	movs	r2, #0
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000484:	4841      	ldr	r0, [pc, #260]	@ (800058c <MX_ADC1_Init+0x188>)
 8000486:	f000 fbfb 	bl	8000c80 <HAL_ADC_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000490:	f000 f992 	bl	80007b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000498:	f107 031c 	add.w	r3, r7, #28
 800049c:	4619      	mov	r1, r3
 800049e:	483b      	ldr	r0, [pc, #236]	@ (800058c <MX_ADC1_Init+0x188>)
 80004a0:	f001 f918 	bl	80016d4 <HAL_ADCEx_MultiModeConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80004aa:	f000 f985 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4830      	ldr	r0, [pc, #192]	@ (800058c <MX_ADC1_Init+0x188>)
 80004cc:	f000 fe44 	bl	8001158 <HAL_ADC_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80004d6:	f000 f96f 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004da:	2302      	movs	r3, #2
 80004dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004de:	2302      	movs	r3, #2
 80004e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	4619      	mov	r1, r3
 80004e6:	4829      	ldr	r0, [pc, #164]	@ (800058c <MX_ADC1_Init+0x188>)
 80004e8:	f000 fe36 	bl	8001158 <HAL_ADC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80004f2:	f000 f961 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004f6:	2303      	movs	r3, #3
 80004f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004fa:	2303      	movs	r3, #3
 80004fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4822      	ldr	r0, [pc, #136]	@ (800058c <MX_ADC1_Init+0x188>)
 8000504:	f000 fe28 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800050e:	f000 f953 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000512:	2304      	movs	r3, #4
 8000514:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000516:	2304      	movs	r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	481b      	ldr	r0, [pc, #108]	@ (800058c <MX_ADC1_Init+0x188>)
 8000520:	f000 fe1a 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 800052a:	f000 f945 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800052e:	2306      	movs	r3, #6
 8000530:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000532:	2305      	movs	r3, #5
 8000534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4619      	mov	r1, r3
 800053a:	4814      	ldr	r0, [pc, #80]	@ (800058c <MX_ADC1_Init+0x188>)
 800053c:	f000 fe0c 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8000546:	f000 f937 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800054a:	2307      	movs	r3, #7
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800054e:	2306      	movs	r3, #6
 8000550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	480d      	ldr	r0, [pc, #52]	@ (800058c <MX_ADC1_Init+0x188>)
 8000558:	f000 fdfe 	bl	8001158 <HAL_ADC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8000562:	f000 f929 	bl	80007b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000566:	2308      	movs	r3, #8
 8000568:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800056a:	2307      	movs	r3, #7
 800056c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	@ (800058c <MX_ADC1_Init+0x188>)
 8000574:	f000 fdf0 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 800057e:	f000 f91b 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	@ 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000058 	.word	0x20000058

08000590 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000596:	4b30      	ldr	r3, [pc, #192]	@ (8000658 <MX_CAN_Init+0xc8>)
 8000598:	4a30      	ldr	r2, [pc, #192]	@ (800065c <MX_CAN_Init+0xcc>)
 800059a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800059c:	4b2e      	ldr	r3, [pc, #184]	@ (8000658 <MX_CAN_Init+0xc8>)
 800059e:	2204      	movs	r2, #4
 80005a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005b0:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80005b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005b6:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005bc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005d6:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005e2:	481d      	ldr	r0, [pc, #116]	@ (8000658 <MX_CAN_Init+0xc8>)
 80005e4:	f001 fa6c 	bl	8001ac0 <HAL_CAN_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80005ee:	f000 f8e3 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000612:	2301      	movs	r3, #1
 8000614:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000616:	230e      	movs	r3, #14
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	480e      	ldr	r0, [pc, #56]	@ (8000658 <MX_CAN_Init+0xc8>)
 8000620:	f001 fb49 	bl	8001cb6 <HAL_CAN_ConfigFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 800062a:	f000 f8c5 	bl	80007b8 <Error_Handler>
  }
 /* Starting the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800062e:	480a      	ldr	r0, [pc, #40]	@ (8000658 <MX_CAN_Init+0xc8>)
 8000630:	f001 fc0b 	bl	8001e4a <HAL_CAN_Start>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_CAN_Init+0xae>
  {
    /* Start Error */
    Error_Handler();
 800063a:	f000 f8bd 	bl	80007b8 <Error_Handler>
  }
 /* Activate CAN RX notification on FIFO0 */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800063e:	2102      	movs	r1, #2
 8000640:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_CAN_Init+0xc8>)
 8000642:	f001 fe6d 	bl	8002320 <HAL_CAN_ActivateNotification>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_CAN_Init+0xc0>
  {
    /* Notification Error */
    Error_Handler();
 800064c:	f000 f8b4 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	@ 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000ec 	.word	0x200000ec
 800065c:	40006400 	.word	0x40006400

08000660 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800067e:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_TIM15_Init+0x9c>)
 8000680:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <MX_TIM15_Init+0xa0>)
 8000682:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_TIM15_Init+0x9c>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_TIM15_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000690:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_TIM15_Init+0x9c>)
 8000692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000696:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_TIM15_Init+0x9c>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_TIM15_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_TIM15_Init+0x9c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006aa:	4814      	ldr	r0, [pc, #80]	@ (80006fc <MX_TIM15_Init+0x9c>)
 80006ac:	f003 ffec 	bl	8004688 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80006b6:	f000 f87f 	bl	80007b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	480d      	ldr	r0, [pc, #52]	@ (80006fc <MX_TIM15_Init+0x9c>)
 80006c8:	f004 f88a 	bl	80047e0 <HAL_TIM_ConfigClockSource>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80006d2:	f000 f871 	bl	80007b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006d6:	2320      	movs	r3, #32
 80006d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_TIM15_Init+0x9c>)
 80006e4:	f004 fa64 	bl	8004bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80006ee:	f000 f863 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000114 	.word	0x20000114
 8000700:	40014000 	.word	0x40014000

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_DMA_Init+0x38>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a0b      	ldr	r2, [pc, #44]	@ (800073c <MX_DMA_Init+0x38>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_DMA_Init+0x38>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	200b      	movs	r0, #11
 8000728:	f002 f92b 	bl	8002982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800072c:	200b      	movs	r0, #11
 800072e:	f002 f944 	bl	80029ba <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a1a      	ldr	r2, [pc, #104]	@ (80007b4 <MX_GPIO_Init+0x74>)
 800074c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_GPIO_Init+0x74>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <MX_GPIO_Init+0x74>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <MX_GPIO_Init+0x74>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_GPIO_Init+0x74>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <HAL_MspInit+0x44>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <HAL_MspInit+0x44>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <HAL_MspInit+0x44>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_MspInit+0x44>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_MspInit+0x44>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_MspInit+0x44>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800082c:	d164      	bne.n	80008f8 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800082e:	4b34      	ldr	r3, [pc, #208]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a33      	ldr	r2, [pc, #204]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b31      	ldr	r3, [pc, #196]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a2d      	ldr	r2, [pc, #180]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 800084c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a27      	ldr	r2, [pc, #156]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <HAL_ADC_MspInit+0xf4>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000876:	2307      	movs	r3, #7
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087a:	2303      	movs	r3, #3
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	481e      	ldr	r0, [pc, #120]	@ (8000904 <HAL_ADC_MspInit+0xf8>)
 800088a:	f002 fa47 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800088e:	230f      	movs	r3, #15
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000892:	2303      	movs	r3, #3
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f002 fa3a 	bl	8002d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_ADC_MspInit+0x100>)
 80008ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008bc:	2280      	movs	r2, #128	@ 0x80
 80008be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008d2:	2220      	movs	r2, #32
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008dc:	480a      	ldr	r0, [pc, #40]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008de:	f002 f886 	bl	80029ee <HAL_DMA_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80008e8:	f7ff ff66 	bl	80007b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80008f2:	4a05      	ldr	r2, [pc, #20]	@ (8000908 <HAL_ADC_MspInit+0xfc>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800
 8000908:	200000a8 	.word	0x200000a8
 800090c:	40020008 	.word	0x40020008

08000910 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a30      	ldr	r2, [pc, #192]	@ (80009f0 <HAL_CAN_MspInit+0xe0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d159      	bne.n	80009e6 <HAL_CAN_MspInit+0xd6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000932:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <HAL_CAN_MspInit+0xe4>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a2f      	ldr	r2, [pc, #188]	@ (80009f4 <HAL_CAN_MspInit+0xe4>)
 8000938:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b2d      	ldr	r3, [pc, #180]	@ (80009f4 <HAL_CAN_MspInit+0xe4>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <HAL_CAN_MspInit+0xe4>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a29      	ldr	r2, [pc, #164]	@ (80009f4 <HAL_CAN_MspInit+0xe4>)
 8000950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <HAL_CAN_MspInit+0xe4>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000962:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000974:	2309      	movs	r3, #9
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	481e      	ldr	r0, [pc, #120]	@ (80009f8 <HAL_CAN_MspInit+0xe8>)
 8000980:	f002 f9cc 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000996:	2309      	movs	r3, #9
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4815      	ldr	r0, [pc, #84]	@ (80009f8 <HAL_CAN_MspInit+0xe8>)
 80009a2:	f002 f9bb 	bl	8002d1c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2013      	movs	r0, #19
 80009ac:	f001 ffe9 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 80009b0:	2013      	movs	r0, #19
 80009b2:	f002 f802 	bl	80029ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2014      	movs	r0, #20
 80009bc:	f001 ffe1 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80009c0:	2014      	movs	r0, #20
 80009c2:	f001 fffa 	bl	80029ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2015      	movs	r0, #21
 80009cc:	f001 ffd9 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80009d0:	2015      	movs	r0, #21
 80009d2:	f001 fff2 	bl	80029ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2016      	movs	r0, #22
 80009dc:	f001 ffd1 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80009e0:	2016      	movs	r0, #22
 80009e2:	f001 ffea 	bl	80029ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40006400 	.word	0x40006400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000400 	.word	0x48000400

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10b      	bne.n	8000a26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a09      	ldr	r2, [pc, #36]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40014000 	.word	0x40014000
 8000a38:	40021000 	.word	0x40021000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <MemManage_Handler+0x4>

08000a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a92:	f000 f8b7 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <DMA1_Channel1_IRQHandler+0x10>)
 8000aa2:	f002 f84a 	bl	8002b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000a8 	.word	0x200000a8

08000ab0 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <CAN_TX_IRQHandler+0x10>)
 8000ab6:	f001 fc59 	bl	800236c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000ec 	.word	0x200000ec

08000ac4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <CAN_RX0_IRQHandler+0x10>)
 8000aca:	f001 fc4f 	bl	800236c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000ec 	.word	0x200000ec

08000ad8 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <CAN_RX1_IRQHandler+0x10>)
 8000ade:	f001 fc45 	bl	800236c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000ec 	.word	0x200000ec

08000aec <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <CAN_SCE_IRQHandler+0x10>)
 8000af2:	f001 fc3b 	bl	800236c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000ec 	.word	0x200000ec

08000b00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b5c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b28:	f7ff ffea 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	@ (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	@ (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b52:	f004 f8a3 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b56:	f7ff fbcb 	bl	80002f0 <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b5c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b68:	08004d34 	.word	0x08004d34
  ldr r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b70:	20000178 	.word	0x20000178

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f001 feef 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fe16 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 ff07 	bl	80029d6 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f001 fecf 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000174 	.word	0x20000174

08000c2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000174 	.word	0x20000174

08000c44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09a      	sub	sp, #104	@ 0x68
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e172      	b.n	8000f86 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d176      	bne.n	8000da0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d152      	bne.n	8000d60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff fd99 	bl	800080c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d13b      	bne.n	8000d60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 fe83 	bl	80019f4 <ADC_Disable>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d12f      	bne.n	8000d60 <HAL_ADC_Init+0xe0>
 8000d00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12b      	bne.n	8000d60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d10:	f023 0302 	bic.w	r3, r3, #2
 8000d14:	f043 0202 	orr.w	r2, r3, #2
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000d2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d3c:	4b94      	ldr	r3, [pc, #592]	@ (8000f90 <HAL_ADC_Init+0x310>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a94      	ldr	r2, [pc, #592]	@ (8000f94 <HAL_ADC_Init+0x314>)
 8000d42:	fba2 2303 	umull	r2, r3, r2, r3
 8000d46:	0c9a      	lsrs	r2, r3, #18
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d52:	e002      	b.n	8000d5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1f9      	bne.n	8000d54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d7c:	d110      	bne.n	8000da0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f023 0312 	bic.w	r3, r3, #18
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 80df 	bne.w	8000f6c <HAL_ADC_Init+0x2ec>
 8000dae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 80da 	bne.w	8000f6c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 80d2 	bne.w	8000f6c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000dd0:	f043 0202 	orr.w	r2, r3, #2
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8000f98 <HAL_ADC_Init+0x318>)
 8000dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000de4:	d102      	bne.n	8000dec <HAL_ADC_Init+0x16c>
 8000de6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f9c <HAL_ADC_Init+0x31c>)
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e002      	b.n	8000df2 <HAL_ADC_Init+0x172>
 8000dec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000df0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d108      	bne.n	8000e12 <HAL_ADC_Init+0x192>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d101      	bne.n	8000e12 <HAL_ADC_Init+0x192>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <HAL_ADC_Init+0x194>
 8000e12:	2300      	movs	r3, #0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11c      	bne.n	8000e52 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e18:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d010      	beq.n	8000e40 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d107      	bne.n	8000e3a <HAL_ADC_Init+0x1ba>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x1ba>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_ADC_Init+0x1bc>
 8000e3a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d108      	bne.n	8000e52 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e50:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7e5b      	ldrb	r3, [r3, #25]
 8000e56:	035b      	lsls	r3, r3, #13
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e5c:	2a01      	cmp	r2, #1
 8000e5e:	d002      	beq.n	8000e66 <HAL_ADC_Init+0x1e6>
 8000e60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e64:	e000      	b.n	8000e68 <HAL_ADC_Init+0x1e8>
 8000e66:	2200      	movs	r2, #0
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d11b      	bne.n	8000ebe <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7e5b      	ldrb	r3, [r3, #25]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d109      	bne.n	8000ea2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	3b01      	subs	r3, #1
 8000e94:	045a      	lsls	r2, r3, #17
 8000e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ea0:	e00d      	b.n	8000ebe <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000eaa:	f043 0220 	orr.w	r2, r3, #32
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d007      	beq.n	8000ed6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d114      	bne.n	8000f0e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ef2:	f023 0302 	bic.w	r3, r3, #2
 8000ef6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7e1b      	ldrb	r3, [r3, #24]
 8000efc:	039a      	lsls	r2, r3, #14
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4313      	orrs	r3, r2
 8000f08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <HAL_ADC_Init+0x320>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d10c      	bne.n	8000f44 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	f023 010f 	bic.w	r1, r3, #15
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f42:	e007      	b.n	8000f54 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020f 	bic.w	r2, r2, #15
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f023 0303 	bic.w	r3, r3, #3
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f6a:	e00a      	b.n	8000f82 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	f023 0312 	bic.w	r3, r3, #18
 8000f74:	f043 0210 	orr.w	r2, r3, #16
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3768      	adds	r7, #104	@ 0x68
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000
 8000f94:	431bde83 	.word	0x431bde83
 8000f98:	50000300 	.word	0x50000300
 8000f9c:	50000100 	.word	0x50000100
 8000fa0:	fff0c007 	.word	0xfff0c007

08000fa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f040 80b9 	bne.w	8001136 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Start_DMA+0x2e>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e0b4      	b.n	800113c <HAL_ADC_Start_DMA+0x198>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fda:	4b5a      	ldr	r3, [pc, #360]	@ (8001144 <HAL_ADC_Start_DMA+0x1a0>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 80a0 	bne.w	8001128 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 fc9f 	bl	800192c <ADC_Enable>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f040 8092 	bne.w	800111e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001002:	f023 0301 	bic.w	r3, r3, #1
 8001006:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800100e:	4b4d      	ldr	r3, [pc, #308]	@ (8001144 <HAL_ADC_Start_DMA+0x1a0>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <HAL_ADC_Start_DMA+0x80>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001022:	d115      	bne.n	8001050 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d027      	beq.n	800108e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001046:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800104e:	e01e      	b.n	800108e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001064:	d004      	beq.n	8001070 <HAL_ADC_Start_DMA+0xcc>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a37      	ldr	r2, [pc, #220]	@ (8001148 <HAL_ADC_Start_DMA+0x1a4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d10e      	bne.n	800108e <HAL_ADC_Start_DMA+0xea>
 8001070:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001086:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800109a:	d106      	bne.n	80010aa <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a0:	f023 0206 	bic.w	r2, r3, #6
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80010a8:	e002      	b.n	80010b0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010bc:	4a23      	ldr	r2, [pc, #140]	@ (800114c <HAL_ADC_Start_DMA+0x1a8>)
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c4:	4a22      	ldr	r2, [pc, #136]	@ (8001150 <HAL_ADC_Start_DMA+0x1ac>)
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010cc:	4a21      	ldr	r2, [pc, #132]	@ (8001154 <HAL_ADC_Start_DMA+0x1b0>)
 80010ce:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	221c      	movs	r2, #28
 80010d6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0210 	orr.w	r2, r2, #16
 80010e6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3340      	adds	r3, #64	@ 0x40
 8001102:	4619      	mov	r1, r3
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f001 fcb8 	bl	8002a7c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0204 	orr.w	r2, r2, #4
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e00d      	b.n	800113a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001126:	e008      	b.n	800113a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001134:	e001      	b.n	800113a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001136:	2302      	movs	r3, #2
 8001138:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800113a:	7dfb      	ldrb	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	50000300 	.word	0x50000300
 8001148:	50000100 	.word	0x50000100
 800114c:	08001861 	.word	0x08001861
 8001150:	080018db 	.word	0x080018db
 8001154:	080018f7 	.word	0x080018f7

08001158 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001158:	b480      	push	{r7}
 800115a:	b09b      	sub	sp, #108	@ 0x6c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_ConfigChannel+0x22>
 8001176:	2302      	movs	r3, #2
 8001178:	e2a1      	b.n	80016be <HAL_ADC_ConfigChannel+0x566>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 8285 	bne.w	800169c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d81c      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	461a      	mov	r2, r3
 80011ae:	231f      	movs	r3, #31
 80011b0:	4093      	lsls	r3, r2
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4019      	ands	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d2:	e063      	b.n	800129c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b09      	cmp	r3, #9
 80011da:	d81e      	bhi.n	800121a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	3b1e      	subs	r3, #30
 80011f0:	221f      	movs	r2, #31
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	4019      	ands	r1, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	3b1e      	subs	r3, #30
 800120c:	fa00 f203 	lsl.w	r2, r0, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34
 8001218:	e040      	b.n	800129c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b0e      	cmp	r3, #14
 8001220:	d81e      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	3b3c      	subs	r3, #60	@ 0x3c
 8001236:	221f      	movs	r2, #31
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	4019      	ands	r1, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	3b3c      	subs	r3, #60	@ 0x3c
 8001252:	fa00 f203 	lsl.w	r2, r0, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	639a      	str	r2, [r3, #56]	@ 0x38
 800125e:	e01d      	b.n	800129c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	3b5a      	subs	r3, #90	@ 0x5a
 8001274:	221f      	movs	r2, #31
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	4019      	ands	r1, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	3b5a      	subs	r3, #90	@ 0x5a
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 80e5 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d91c      	bls.n	80012ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6999      	ldr	r1, [r3, #24]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	3b1e      	subs	r3, #30
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6898      	ldr	r0, [r3, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	3b1e      	subs	r3, #30
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	e019      	b.n	8001322 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6959      	ldr	r1, [r3, #20]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	2207      	movs	r2, #7
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4019      	ands	r1, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6898      	ldr	r0, [r3, #8]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	3b01      	subs	r3, #1
 8001340:	2b03      	cmp	r3, #3
 8001342:	d84f      	bhi.n	80013e4 <HAL_ADC_ConfigChannel+0x28c>
 8001344:	a201      	add	r2, pc, #4	@ (adr r2, 800134c <HAL_ADC_ConfigChannel+0x1f4>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800135d 	.word	0x0800135d
 8001350:	0800137f 	.word	0x0800137f
 8001354:	080013a1 	.word	0x080013a1
 8001358:	080013c3 	.word	0x080013c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001362:	4b9c      	ldr	r3, [pc, #624]	@ (80015d4 <HAL_ADC_ConfigChannel+0x47c>)
 8001364:	4013      	ands	r3, r2
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	0691      	lsls	r1, r2, #26
 800136c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800136e:	430a      	orrs	r2, r1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800137a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800137c:	e07b      	b.n	8001476 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001384:	4b93      	ldr	r3, [pc, #588]	@ (80015d4 <HAL_ADC_ConfigChannel+0x47c>)
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	0691      	lsls	r1, r2, #26
 800138e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001390:	430a      	orrs	r2, r1
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800139c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800139e:	e06a      	b.n	8001476 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80013a6:	4b8b      	ldr	r3, [pc, #556]	@ (80015d4 <HAL_ADC_ConfigChannel+0x47c>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	0691      	lsls	r1, r2, #26
 80013b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013b2:	430a      	orrs	r2, r1
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013be:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013c0:	e059      	b.n	8001476 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80013c8:	4b82      	ldr	r3, [pc, #520]	@ (80015d4 <HAL_ADC_ConfigChannel+0x47c>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	0691      	lsls	r1, r2, #26
 80013d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013d4:	430a      	orrs	r2, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013e0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013e2:	e048      	b.n	8001476 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	069b      	lsls	r3, r3, #26
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001406:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800140e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	069b      	lsls	r3, r3, #26
 8001418:	429a      	cmp	r2, r3
 800141a:	d107      	bne.n	800142c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800142a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	069b      	lsls	r3, r3, #26
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800144e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	069b      	lsls	r3, r3, #26
 8001460:	429a      	cmp	r2, r3
 8001462:	d107      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001472:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001474:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x33e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x33e>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_ADC_ConfigChannel+0x340>
 8001496:	2300      	movs	r3, #0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 810a 	bne.w	80016b2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d00f      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43da      	mvns	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	400a      	ands	r2, r1
 80014c0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80014c4:	e049      	b.n	800155a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	409a      	lsls	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	d91c      	bls.n	8001522 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6999      	ldr	r1, [r3, #24]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	3b1b      	subs	r3, #27
 80014fa:	2207      	movs	r2, #7
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	4019      	ands	r1, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6898      	ldr	r0, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	3b1b      	subs	r3, #27
 8001514:	fa00 f203 	lsl.w	r2, r0, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	e01b      	b.n	800155a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6959      	ldr	r1, [r3, #20]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	2207      	movs	r2, #7
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	4019      	ands	r1, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6898      	ldr	r0, [r3, #8]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_ADC_ConfigChannel+0x480>)
 800155c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b10      	cmp	r3, #16
 8001564:	d105      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001576:	2b11      	cmp	r3, #17
 8001578:	d105      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800157a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800158a:	2b12      	cmp	r3, #18
 800158c:	f040 8091 	bne.w	80016b2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 808a 	bne.w	80016b2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015a6:	d102      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x456>
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_ADC_ConfigChannel+0x484>)
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x45c>
 80015ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015b2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d10e      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x488>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x488>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e006      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x48a>
 80015d4:	83fff000 	.word	0x83fff000
 80015d8:	50000300 	.word	0x50000300
 80015dc:	50000100 	.word	0x50000100
 80015e0:	2300      	movs	r3, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d150      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015e6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d010      	beq.n	800160e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x4b0>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x4b0>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_ADC_ConfigChannel+0x4b2>
 8001608:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800160a:	2b00      	cmp	r3, #0
 800160c:	d13c      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b10      	cmp	r3, #16
 8001614:	d11d      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x4fa>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800161e:	d118      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800162c:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <HAL_ADC_ConfigChannel+0x574>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <HAL_ADC_ConfigChannel+0x578>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9a      	lsrs	r2, r3, #18
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001642:	e002      	b.n	800164a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3b01      	subs	r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001650:	e02e      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b11      	cmp	r3, #17
 8001658:	d10b      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x51a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001662:	d106      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001664:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800166c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800166e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001670:	e01e      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b12      	cmp	r3, #18
 8001678:	d11a      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800167a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001684:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001686:	e013      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f043 0220 	orr.w	r2, r3, #32
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800169a:	e00a      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	f043 0220 	orr.w	r2, r3, #32
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016ae:	e000      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016b0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80016be:	4618      	mov	r0, r3
 80016c0:	376c      	adds	r7, #108	@ 0x6c
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000
 80016d0:	431bde83 	.word	0x431bde83

080016d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b099      	sub	sp, #100	@ 0x64
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ec:	d102      	bne.n	80016f4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80016ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001858 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	e002      	b.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80016f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016f8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0a2      	b.n	800184a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800170e:	2302      	movs	r3, #2
 8001710:	e09b      	b.n	800184a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d17f      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d179      	bne.n	8001828 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001734:	4b49      	ldr	r3, [pc, #292]	@ (800185c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001736:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d040      	beq.n	80017c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001752:	035b      	lsls	r3, r3, #13
 8001754:	430b      	orrs	r3, r1
 8001756:	431a      	orrs	r2, r3
 8001758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800175a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800177c:	2300      	movs	r3, #0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d15c      	bne.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800179e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d14b      	bne.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80017ac:	f023 030f 	bic.w	r3, r3, #15
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	6811      	ldr	r1, [r2, #0]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6892      	ldr	r2, [r2, #8]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	431a      	orrs	r2, r3
 80017bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017c0:	e03c      	b.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80017ee:	2300      	movs	r3, #0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d123      	bne.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001810:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d112      	bne.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800181e:	f023 030f 	bic.w	r3, r3, #15
 8001822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001824:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001826:	e009      	b.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f043 0220 	orr.w	r2, r3, #32
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800183a:	e000      	b.n	800183e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800183c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800184a:	4618      	mov	r0, r3
 800184c:	3764      	adds	r7, #100	@ 0x64
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	50000100 	.word	0x50000100
 800185c:	50000300 	.word	0x50000300

08001860 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001876:	2b00      	cmp	r3, #0
 8001878:	d126      	bne.n	80018c8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001890:	2b00      	cmp	r3, #0
 8001892:	d115      	bne.n	80018c0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d111      	bne.n	80018c0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff f9bf 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018c6:	e004      	b.n	80018d2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff f9b5 	bl	8000c58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001914:	f043 0204 	orr.w	r2, r3, #4
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff f9a5 	bl	8000c6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <ADC_Enable+0x2c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <ADC_Enable+0x2c>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <ADC_Enable+0x2e>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d143      	bne.n	80019e6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <ADC_Enable+0xc4>)
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00d      	beq.n	8001988 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f043 0210 	orr.w	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e02f      	b.n	80019e8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001998:	f7ff f948 	bl	8000c2c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800199e:	e01b      	b.n	80019d8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019a0:	f7ff f944 	bl	8000c2c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d914      	bls.n	80019d8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d00d      	beq.n	80019d8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e007      	b.n	80019e8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d1dc      	bne.n	80019a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	8000003f 	.word	0x8000003f

080019f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <ADC_Disable+0x2c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <ADC_Disable+0x2c>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <ADC_Disable+0x2e>
 8001a20:	2300      	movs	r3, #0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d047      	beq.n	8001ab6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030d 	and.w	r3, r3, #13
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10f      	bne.n	8001a54 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0202 	orr.w	r2, r2, #2
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f8ee 	bl	8000c2c <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a52:	e029      	b.n	8001aa8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f043 0210 	orr.w	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e023      	b.n	8001ab8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a70:	f7ff f8dc 	bl	8000c2c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d914      	bls.n	8001aa8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10d      	bne.n	8001aa8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0dc      	beq.n	8001a70 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0ed      	b.n	8001cae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe ff16 	bl	8000910 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af4:	f7ff f89a 	bl	8000c2c <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001afa:	e012      	b.n	8001b22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001afc:	f7ff f896 	bl	8000c2c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d90b      	bls.n	8001b22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2205      	movs	r2, #5
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0c5      	b.n	8001cae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0e5      	beq.n	8001afc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0202 	bic.w	r2, r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b40:	f7ff f874 	bl	8000c2c <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b46:	e012      	b.n	8001b6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b48:	f7ff f870 	bl	8000c2c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b0a      	cmp	r3, #10
 8001b54:	d90b      	bls.n	8001b6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2205      	movs	r2, #5
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e09f      	b.n	8001cae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e5      	bne.n	8001b48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7e1b      	ldrb	r3, [r3, #24]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d108      	bne.n	8001b96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e007      	b.n	8001ba6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7e5b      	ldrb	r3, [r3, #25]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e9b      	ldrb	r3, [r3, #26]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d108      	bne.n	8001bea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0220 	orr.w	r2, r2, #32
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e007      	b.n	8001bfa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0220 	bic.w	r2, r2, #32
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7edb      	ldrb	r3, [r3, #27]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0210 	bic.w	r2, r2, #16
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e007      	b.n	8001c24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0210 	orr.w	r2, r2, #16
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7f1b      	ldrb	r3, [r3, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d108      	bne.n	8001c3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0208 	orr.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e007      	b.n	8001c4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0208 	bic.w	r2, r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7f5b      	ldrb	r3, [r3, #29]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0204 	orr.w	r2, r2, #4
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e007      	b.n	8001c78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0204 	bic.w	r2, r2, #4
 8001c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b087      	sub	sp, #28
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ccc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cce:	7cfb      	ldrb	r3, [r7, #19]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d003      	beq.n	8001cdc <HAL_CAN_ConfigFilter+0x26>
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	f040 80aa 	bne.w	8001e30 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d123      	bne.n	8001d5e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	401a      	ands	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3248      	adds	r2, #72	@ 0x48
 8001d3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	3348      	adds	r3, #72	@ 0x48
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d122      	bne.n	8001dac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3248      	adds	r2, #72	@ 0x48
 8001d8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001da0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001da2:	6979      	ldr	r1, [r7, #20]
 8001da4:	3348      	adds	r3, #72	@ 0x48
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e22:	f023 0201 	bic.w	r2, r3, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e006      	b.n	8001e3e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
  }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12e      	bne.n	8001ebc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e76:	f7fe fed9 	bl	8000c2c <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e7c:	e012      	b.n	8001ea4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e7e:	f7fe fed5 	bl	8000c2c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b0a      	cmp	r3, #10
 8001e8a:	d90b      	bls.n	8001ea4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2205      	movs	r2, #5
 8001e9c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e012      	b.n	8001eca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e5      	bne.n	8001e7e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e006      	b.n	8001eca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b089      	sub	sp, #36	@ 0x24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d003      	beq.n	8001efe <HAL_CAN_AddTxMessage+0x2c>
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f040 80ad 	bne.w	8002058 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8095 	beq.w	8002048 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	0e1b      	lsrs	r3, r3, #24
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	6809      	ldr	r1, [r1, #0]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e00f      	b.n	8001f76 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3318      	adds	r3, #24
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	440b      	add	r3, r1
 8001f74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3318      	adds	r3, #24
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	440b      	add	r3, r1
 8001f86:	3304      	adds	r3, #4
 8001f88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	7d1b      	ldrb	r3, [r3, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d111      	bne.n	8001fb6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6811      	ldr	r1, [r2, #0]
 8001fa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3318      	adds	r3, #24
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3307      	adds	r3, #7
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	061a      	lsls	r2, r3, #24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3306      	adds	r3, #6
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3305      	adds	r3, #5
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	3204      	adds	r2, #4
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	4610      	mov	r0, r2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	ea43 0200 	orr.w	r2, r3, r0
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001fec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061a      	lsls	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	4313      	orrs	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	4610      	mov	r0, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6811      	ldr	r1, [r2, #0]
 8002014:	ea43 0200 	orr.w	r2, r3, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	440b      	add	r3, r1
 800201e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002022:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3318      	adds	r3, #24
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3318      	adds	r3, #24
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	440b      	add	r3, r1
 8002042:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e00e      	b.n	8002066 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e006      	b.n	8002066 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002084:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d002      	beq.n	8002092 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d11d      	bne.n	80020ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3301      	adds	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d003      	beq.n	8002100 <HAL_CAN_GetRxMessage+0x24>
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	f040 8103 	bne.w	8002306 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10e      	bne.n	8002124 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d116      	bne.n	8002142 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0f7      	b.n	8002314 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e8      	b.n	8002314 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	331b      	adds	r3, #27
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	4413      	add	r3, r2
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0204 	and.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	331b      	adds	r3, #27
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0d5b      	lsrs	r3, r3, #21
 8002170:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e00b      	b.n	8002192 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	331b      	adds	r3, #27
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	331b      	adds	r3, #27
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4413      	add	r3, r2
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0202 	and.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	331b      	adds	r3, #27
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2208      	movs	r2, #8
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	e00b      	b.n	80021e0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	331b      	adds	r3, #27
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	331b      	adds	r3, #27
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	3304      	adds	r3, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	331b      	adds	r3, #27
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4413      	add	r3, r2
 800221a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	4413      	add	r3, r2
 8002230:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0a1a      	lsrs	r2, r3, #8
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4413      	add	r3, r2
 800224a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0c1a      	lsrs	r2, r3, #16
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	3302      	adds	r3, #2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0e1a      	lsrs	r2, r3, #24
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3303      	adds	r3, #3
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3304      	adds	r3, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4413      	add	r3, r2
 8002296:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0a1a      	lsrs	r2, r3, #8
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	3305      	adds	r3, #5
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0c1a      	lsrs	r2, r3, #16
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3306      	adds	r3, #6
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e1a      	lsrs	r2, r3, #24
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	3307      	adds	r3, #7
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d108      	bne.n	80022f2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	e007      	b.n	8002302 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0220 	orr.w	r2, r2, #32
 8002300:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e006      	b.n	8002314 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002330:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d002      	beq.n	800233e <HAL_CAN_ActivateNotification+0x1e>
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d109      	bne.n	8002352 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6959      	ldr	r1, [r3, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e006      	b.n	8002360 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d07c      	beq.n	80024ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f983 	bl	80026da <HAL_CAN_TxMailbox0CompleteCallback>
 80023d4:	e016      	b.n	8002404 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e8:	e00c      	b.n	8002404 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fc:	e002      	b.n	8002404 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f989 	bl	8002716 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d024      	beq.n	8002458 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002416:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f963 	bl	80026ee <HAL_CAN_TxMailbox1CompleteCallback>
 8002428:	e016      	b.n	8002458 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e00c      	b.n	8002458 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002450:	e002      	b.n	8002458 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f969 	bl	800272a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800246a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f943 	bl	8002702 <HAL_CAN_TxMailbox2CompleteCallback>
 800247c:	e016      	b.n	80024ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002490:	e00c      	b.n	80024ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a4:	e002      	b.n	80024ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f949 	bl	800273e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2208      	movs	r2, #8
 80024ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f930 	bl	8002752 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fd fed8 	bl	80002c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2210      	movs	r2, #16
 8002532:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2208      	movs	r2, #8
 800254e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f912 	bl	800277a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8f9 	bl	8002766 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f8fc 	bl	800278e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2208      	movs	r2, #8
 80025b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8f5 	bl	80027a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07b      	beq.n	80026ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d072      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002626:	2b00      	cmp	r3, #0
 8002628:	d043      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03e      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800263a:	2b60      	cmp	r3, #96	@ 0x60
 800263c:	d02b      	beq.n	8002696 <HAL_CAN_IRQHandler+0x32a>
 800263e:	2b60      	cmp	r3, #96	@ 0x60
 8002640:	d82e      	bhi.n	80026a0 <HAL_CAN_IRQHandler+0x334>
 8002642:	2b50      	cmp	r3, #80	@ 0x50
 8002644:	d022      	beq.n	800268c <HAL_CAN_IRQHandler+0x320>
 8002646:	2b50      	cmp	r3, #80	@ 0x50
 8002648:	d82a      	bhi.n	80026a0 <HAL_CAN_IRQHandler+0x334>
 800264a:	2b40      	cmp	r3, #64	@ 0x40
 800264c:	d019      	beq.n	8002682 <HAL_CAN_IRQHandler+0x316>
 800264e:	2b40      	cmp	r3, #64	@ 0x40
 8002650:	d826      	bhi.n	80026a0 <HAL_CAN_IRQHandler+0x334>
 8002652:	2b30      	cmp	r3, #48	@ 0x30
 8002654:	d010      	beq.n	8002678 <HAL_CAN_IRQHandler+0x30c>
 8002656:	2b30      	cmp	r3, #48	@ 0x30
 8002658:	d822      	bhi.n	80026a0 <HAL_CAN_IRQHandler+0x334>
 800265a:	2b10      	cmp	r3, #16
 800265c:	d002      	beq.n	8002664 <HAL_CAN_IRQHandler+0x2f8>
 800265e:	2b20      	cmp	r3, #32
 8002660:	d005      	beq.n	800266e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002662:	e01d      	b.n	80026a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800266c:	e019      	b.n	80026a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002676:	e014      	b.n	80026a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002680:	e00f      	b.n	80026a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800268a:	e00a      	b.n	80026a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002694:	e005      	b.n	80026a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800269e:	e000      	b.n	80026a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80026a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2204      	movs	r2, #4
 80026b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f872 	bl	80027b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	@ 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	@ (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	@ (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff3e 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e037      	b.n	8002a74 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f940 	bl	8002cdc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Start_IT+0x20>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e04a      	b.n	8002b32 <HAL_DMA_Start_IT+0xb6>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d13a      	bne.n	8002b24 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8d4 	bl	8002c80 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 020e 	orr.w	r2, r2, #14
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e00f      	b.n	8002b12 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 020a 	orr.w	r2, r2, #10
 8002b00:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0204 	bic.w	r2, r2, #4
 8002b10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e005      	b.n	8002b30 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2204      	movs	r2, #4
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d024      	beq.n	8002bac <HAL_DMA_IRQHandler+0x72>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01f      	beq.n	8002bac <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0204 	bic.w	r2, r2, #4
 8002b88:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b92:	2104      	movs	r1, #4
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06a      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002baa:	e065      	b.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02c      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xdc>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d027      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020a 	bic.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d035      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c14:	e030      	b.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d028      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d023      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 020e 	bic.w	r2, r2, #14
 8002c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	2101      	movs	r1, #1
 8002c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
    }
  }
}
 8002c76:	e7ff      	b.n	8002c78 <HAL_DMA_IRQHandler+0x13e>
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d108      	bne.n	8002cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cbe:	e007      	b.n	8002cd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <DMA_CalcBaseAndBitshift+0x34>)
 8002cec:	4413      	add	r3, r2
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <DMA_CalcBaseAndBitshift+0x38>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <DMA_CalcBaseAndBitshift+0x3c>)
 8002d00:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	bffdfff8 	.word	0xbffdfff8
 8002d14:	cccccccd 	.word	0xcccccccd
 8002d18:	40020000 	.word	0x40020000

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2a:	e14e      	b.n	8002fca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8140 	beq.w	8002fc4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d005      	beq.n	8002d5c <HAL_GPIO_Init+0x40>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d130      	bne.n	8002dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d92:	2201      	movs	r2, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0201 	and.w	r2, r3, #1
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d017      	beq.n	8002dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d123      	bne.n	8002e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	6939      	ldr	r1, [r7, #16]
 8002e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 809a 	beq.w	8002fc4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e90:	4b55      	ldr	r3, [pc, #340]	@ (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a54      	ldr	r2, [pc, #336]	@ (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b52      	ldr	r3, [pc, #328]	@ (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea8:	4a50      	ldr	r2, [pc, #320]	@ (8002fec <HAL_GPIO_Init+0x2d0>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ed2:	d013      	beq.n	8002efc <HAL_GPIO_Init+0x1e0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a46      	ldr	r2, [pc, #280]	@ (8002ff0 <HAL_GPIO_Init+0x2d4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00d      	beq.n	8002ef8 <HAL_GPIO_Init+0x1dc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <HAL_GPIO_Init+0x2d8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <HAL_GPIO_Init+0x1d8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a44      	ldr	r2, [pc, #272]	@ (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_GPIO_Init+0x1d4>
 8002eec:	2303      	movs	r3, #3
 8002eee:	e006      	b.n	8002efe <HAL_GPIO_Init+0x1e2>
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	e004      	b.n	8002efe <HAL_GPIO_Init+0x1e2>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e002      	b.n	8002efe <HAL_GPIO_Init+0x1e2>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_GPIO_Init+0x1e2>
 8002efc:	2300      	movs	r3, #0
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	f002 0203 	and.w	r2, r2, #3
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	4093      	lsls	r3, r2
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f0e:	4937      	ldr	r1, [pc, #220]	@ (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3302      	adds	r3, #2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1c:	4b37      	ldr	r3, [pc, #220]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f40:	4a2e      	ldr	r2, [pc, #184]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f46:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f6a:	4a24      	ldr	r2, [pc, #144]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f70:	4b22      	ldr	r3, [pc, #136]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f94:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <HAL_GPIO_Init+0x2e0>)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f aea9 	bne.w	8002d2c <HAL_GPIO_Init+0x10>
  }
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	48000400 	.word	0x48000400
 8002ff4:	48000800 	.word	0x48000800
 8002ff8:	48000c00 	.word	0x48000c00
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003006:	af00      	add	r7, sp, #0
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f001 b823 	b.w	800406c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 817d 	beq.w	8003336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800303c:	4bbc      	ldr	r3, [pc, #752]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00c      	beq.n	8003062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003048:	4bb9      	ldr	r3, [pc, #740]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d15c      	bne.n	800310e <HAL_RCC_OscConfig+0x10e>
 8003054:	4bb6      	ldr	r3, [pc, #728]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003060:	d155      	bne.n	800310e <HAL_RCC_OscConfig+0x10e>
 8003062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003066:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_RCC_OscConfig+0x94>
 800308e:	4ba8      	ldr	r3, [pc, #672]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e015      	b.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 8003094:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003098:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80030a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030ac:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80030b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80030bc:	4b9c      	ldr	r3, [pc, #624]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030c4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80030c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80030cc:	fa92 f2a2 	rbit	r2, r2
 80030d0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80030d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 811f 	beq.w	8003334 <HAL_RCC_OscConfig+0x334>
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 8116 	bne.w	8003334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f000 bfaf 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x12e>
 8003120:	4b83      	ldr	r3, [pc, #524]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a82      	ldr	r2, [pc, #520]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e036      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 800312e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003132:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x158>
 800313e:	4b7c      	ldr	r3, [pc, #496]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7b      	ldr	r2, [pc, #492]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b79      	ldr	r3, [pc, #484]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a78      	ldr	r2, [pc, #480]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e021      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x184>
 800316a:	4b71      	ldr	r3, [pc, #452]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a70      	ldr	r2, [pc, #448]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b6e      	ldr	r3, [pc, #440]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6d      	ldr	r2, [pc, #436]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0x19c>
 8003184:	4b6a      	ldr	r3, [pc, #424]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a69      	ldr	r2, [pc, #420]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b67      	ldr	r3, [pc, #412]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a66      	ldr	r2, [pc, #408]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800319a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800319c:	4b64      	ldr	r3, [pc, #400]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	495f      	ldr	r1, [pc, #380]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d059      	beq.n	800327a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fd31 	bl	8000c2c <HAL_GetTick>
 80031ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fd fd2c 	bl	8000c2c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	@ 0x64
 80031de:	d902      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f000 bf43 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80031e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031ea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80031fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_RCC_OscConfig+0x218>
 8003212:	4b47      	ldr	r3, [pc, #284]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	e015      	b.n	8003244 <HAL_RCC_OscConfig+0x244>
 8003218:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800321c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800322c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003230:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003240:	4b3b      	ldr	r3, [pc, #236]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003248:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800324c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003250:	fa92 f2a2 	rbit	r2, r2
 8003254:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800325c:	fab2 f282 	clz	r2, r2
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f042 0220 	orr.w	r2, r2, #32
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f002 021f 	and.w	r2, r2, #31
 800326c:	2101      	movs	r1, #1
 800326e:	fa01 f202 	lsl.w	r2, r1, r2
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ab      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1d0>
 8003278:	e05d      	b.n	8003336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fd fcd7 	bl	8000c2c <HAL_GetTick>
 800327e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fd fcd2 	bl	8000c2c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	@ 0x64
 8003292:	d902      	bls.n	800329a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	f000 bee9 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 800329a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800329e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80032ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_OscConfig+0x2cc>
 80032c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e015      	b.n	80032f8 <HAL_RCC_OscConfig+0x2f8>
 80032cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80032e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032e4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80032e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_RCC_OscConfig+0x330>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032fc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003300:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003304:	fa92 f2a2 	rbit	r2, r2
 8003308:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800330c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ab      	bne.n	8003284 <HAL_RCC_OscConfig+0x284>
 800332c:	e003      	b.n	8003336 <HAL_RCC_OscConfig+0x336>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 817d 	beq.w	8003646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800334c:	4ba6      	ldr	r3, [pc, #664]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003358:	4ba3      	ldr	r3, [pc, #652]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d172      	bne.n	800344a <HAL_RCC_OscConfig+0x44a>
 8003364:	4ba0      	ldr	r3, [pc, #640]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d16c      	bne.n	800344a <HAL_RCC_OscConfig+0x44a>
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003382:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_OscConfig+0x3a0>
 800339a:	4b93      	ldr	r3, [pc, #588]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e013      	b.n	80033c8 <HAL_RCC_OscConfig+0x3c8>
 80033a0:	2302      	movs	r3, #2
 80033a2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80033b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80033c4:	4b88      	ldr	r3, [pc, #544]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2202      	movs	r2, #2
 80033ca:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80033ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80033d2:	fa92 f2a2 	rbit	r2, r2
 80033d6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80033da:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0220 	orr.w	r2, r2, #32
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCC_OscConfig+0x410>
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d002      	beq.n	8003410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f000 be2e 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b75      	ldr	r3, [pc, #468]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	21f8      	movs	r1, #248	@ 0xf8
 8003426:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800342e:	fa91 f1a1 	rbit	r1, r1
 8003432:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003436:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800343a:	fab1 f181 	clz	r1, r1
 800343e:	b2c9      	uxtb	r1, r1
 8003440:	408b      	lsls	r3, r1
 8003442:	4969      	ldr	r1, [pc, #420]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003448:	e0fd      	b.n	8003646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8088 	beq.w	800356c <HAL_RCC_OscConfig+0x56c>
 800345c:	2301      	movs	r3, #1
 800345e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800346e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800347c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	461a      	mov	r2, r3
 8003484:	2301      	movs	r3, #1
 8003486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd fbd0 	bl	8000c2c <HAL_GetTick>
 800348c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003492:	f7fd fbcb 	bl	8000c2c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d902      	bls.n	80034a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	f000 bde2 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80034ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4d8>
 80034d2:	4b45      	ldr	r3, [pc, #276]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e013      	b.n	8003500 <HAL_RCC_OscConfig+0x500>
 80034d8:	2302      	movs	r3, #2
 80034da:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80034ea:	2302      	movs	r3, #2
 80034ec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80034f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80034fc:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	2202      	movs	r2, #2
 8003502:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003506:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003512:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003516:	fab2 f282 	clz	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f042 0220 	orr.w	r2, r2, #32
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f002 021f 	and.w	r2, r2, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0af      	beq.n	8003492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	21f8      	movs	r1, #248	@ 0xf8
 8003548:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003550:	fa91 f1a1 	rbit	r1, r1
 8003554:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003558:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800355c:	fab1 f181 	clz	r1, r1
 8003560:	b2c9      	uxtb	r1, r1
 8003562:	408b      	lsls	r3, r1
 8003564:	4920      	ldr	r1, [pc, #128]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
 800356a:	e06c      	b.n	8003646 <HAL_RCC_OscConfig+0x646>
 800356c:	2301      	movs	r3, #1
 800356e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800357e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800358c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd fb48 	bl	8000c2c <HAL_GetTick>
 800359c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fd fb43 	bl	8000c2c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f000 bd5a 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80035ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d104      	bne.n	80035ec <HAL_RCC_OscConfig+0x5ec>
 80035e2:	4b01      	ldr	r3, [pc, #4]	@ (80035e8 <HAL_RCC_OscConfig+0x5e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e015      	b.n	8003614 <HAL_RCC_OscConfig+0x614>
 80035e8:	40021000 	.word	0x40021000
 80035ec:	2302      	movs	r3, #2
 80035ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003604:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003610:	4bc8      	ldr	r3, [pc, #800]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	2202      	movs	r2, #2
 8003616:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800361a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800361e:	fa92 f2a2 	rbit	r2, r2
 8003622:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003626:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f042 0220 	orr.w	r2, r2, #32
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f002 021f 	and.w	r2, r2, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ad      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8110 	beq.w	800387c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d079      	beq.n	8003760 <HAL_RCC_OscConfig+0x760>
 800366c:	2301      	movs	r3, #1
 800366e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800367e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4bab      	ldr	r3, [pc, #684]	@ (8003938 <HAL_RCC_OscConfig+0x938>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	2301      	movs	r3, #1
 8003694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fd fac9 	bl	8000c2c <HAL_GetTick>
 800369a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a0:	f7fd fac4 	bl	8000c2c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d902      	bls.n	80036b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f000 bcdb 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036d0:	2202      	movs	r2, #2
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	fa93 f2a3 	rbit	r2, r3
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036f4:	2202      	movs	r2, #2
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800370e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003710:	4b88      	ldr	r3, [pc, #544]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 8003712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003718:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800371c:	2102      	movs	r1, #2
 800371e:	6019      	str	r1, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003724:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f1a3 	rbit	r1, r3
 800372e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003732:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003736:	6019      	str	r1, [r3, #0]
  return result;
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0a0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x6a0>
 800375e:	e08d      	b.n	800387c <HAL_RCC_OscConfig+0x87c>
 8003760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003764:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003770:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003782:	601a      	str	r2, [r3, #0]
  return result;
 8003784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003788:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800378c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_OscConfig+0x938>)
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fd fa43 	bl	8000c2c <HAL_GetTick>
 80037a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fd fa3e 	bl	8000c2c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	f000 bc55 	b.w	800406c <HAL_RCC_OscConfig+0x106c>
 80037c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037ca:	2202      	movs	r2, #2
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003812:	2202      	movs	r2, #2
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003828:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800382c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382e:	4b41      	ldr	r3, [pc, #260]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 8003830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800383a:	2102      	movs	r1, #2
 800383c:	6019      	str	r1, [r3, #0]
 800383e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003842:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	fa93 f1a3 	rbit	r1, r3
 800384c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003850:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003854:	6019      	str	r1, [r3, #0]
  return result;
 8003856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d197      	bne.n	80037ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 81a1 	beq.w	8003bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b23      	ldr	r3, [pc, #140]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4a22      	ldr	r2, [pc, #136]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	61d3      	str	r3, [r2, #28]
 80038b0:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80038b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038bc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80038ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <HAL_RCC_OscConfig+0x93c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11a      	bne.n	8003914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038de:	4b17      	ldr	r3, [pc, #92]	@ (800393c <HAL_RCC_OscConfig+0x93c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	@ (800393c <HAL_RCC_OscConfig+0x93c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fd f99f 	bl	8000c2c <HAL_GetTick>
 80038ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	e009      	b.n	8003908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fd f99a 	bl	8000c2c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	@ 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e3b1      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <HAL_RCC_OscConfig+0x93c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_OscConfig+0x940>
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a02      	ldr	r2, [pc, #8]	@ (8003934 <HAL_RCC_OscConfig+0x934>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	e03c      	b.n	80039ac <HAL_RCC_OscConfig+0x9ac>
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	10908120 	.word	0x10908120
 800393c:	40007000 	.word	0x40007000
 8003940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003944:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x96a>
 8003950:	4bc1      	ldr	r3, [pc, #772]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4ac0      	ldr	r2, [pc, #768]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	4bbe      	ldr	r3, [pc, #760]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4abd      	ldr	r2, [pc, #756]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	e020      	b.n	80039ac <HAL_RCC_OscConfig+0x9ac>
 800396a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x994>
 800397a:	4bb7      	ldr	r3, [pc, #732]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4ab6      	ldr	r2, [pc, #728]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	4bb4      	ldr	r3, [pc, #720]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4ab3      	ldr	r2, [pc, #716]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6213      	str	r3, [r2, #32]
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0x9ac>
 8003994:	4bb0      	ldr	r3, [pc, #704]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4aaf      	ldr	r2, [pc, #700]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	4bad      	ldr	r3, [pc, #692]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4aac      	ldr	r2, [pc, #688]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 80039a6:	f023 0304 	bic.w	r3, r3, #4
 80039aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8081 	beq.w	8003ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fd f935 	bl	8000c2c <HAL_GetTick>
 80039c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd f930 	bl	8000c2c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e345      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039e8:	2202      	movs	r2, #2
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	fa93 f2a3 	rbit	r2, r3
 80039fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fa93 f2a3 	rbit	r2, r3
 8003a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a22:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a26:	601a      	str	r2, [r3, #0]
  return result;
 8003a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_OscConfig+0xa4c>
 8003a46:	4b84      	ldr	r3, [pc, #528]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	e013      	b.n	8003a74 <HAL_RCC_OscConfig+0xa74>
 8003a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a50:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a54:	2202      	movs	r2, #2
 8003a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fa93 f2a3 	rbit	r2, r3
 8003a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	4b79      	ldr	r3, [pc, #484]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a78:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	6011      	str	r1, [r2, #0]
 8003a80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a84:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	fa92 f1a2 	rbit	r1, r2
 8003a8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a92:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a96:	6011      	str	r1, [r2, #0]
  return result;
 8003a98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a9c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	fab2 f282 	clz	r2, r2
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f002 021f 	and.w	r2, r2, #31
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d084      	beq.n	80039c8 <HAL_RCC_OscConfig+0x9c8>
 8003abe:	e07f      	b.n	8003bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd f8b4 	bl	8000c2c <HAL_GetTick>
 8003ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd f8af 	bl	8000c2c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e2c4      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003aea:	2202      	movs	r2, #2
 8003aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	fa93 f2a3 	rbit	r2, r3
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b0e:	2202      	movs	r2, #2
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b16:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	fa93 f2a3 	rbit	r2, r3
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b28:	601a      	str	r2, [r3, #0]
  return result;
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_OscConfig+0xb4e>
 8003b48:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	e013      	b.n	8003b76 <HAL_RCC_OscConfig+0xb76>
 8003b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b52:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b7a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b7e:	2102      	movs	r1, #2
 8003b80:	6011      	str	r1, [r2, #0]
 8003b82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b86:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fa92 f1a2 	rbit	r1, r2
 8003b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b94:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b98:	6011      	str	r1, [r2, #0]
  return result;
 8003b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b9e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	fab2 f282 	clz	r2, r2
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f002 021f 	and.w	r2, r2, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d184      	bne.n	8003aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b23      	ldr	r3, [pc, #140]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8242 	beq.w	800406a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <HAL_RCC_OscConfig+0xc58>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	f000 8213 	beq.w	800401a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f040 8162 	bne.w	8003eca <HAL_RCC_OscConfig+0xeca>
 8003c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003c0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c30:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	461a      	mov	r2, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fc ffee 	bl	8000c2c <HAL_GetTick>
 8003c50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	e00c      	b.n	8003c70 <HAL_RCC_OscConfig+0xc70>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fc ffe6 	bl	8000c2c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1fd      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c82:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	fa93 f2a3 	rbit	r2, r3
 8003c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c90:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c94:	601a      	str	r2, [r3, #0]
  return result;
 8003c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_OscConfig+0xcba>
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e027      	b.n	8003d0a <HAL_RCC_OscConfig+0xd0a>
 8003cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ccc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	fa93 f2a3 	rbit	r2, r3
 8003cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cda:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ce8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	4b9c      	ldr	r3, [pc, #624]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d0e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003d12:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d16:	6011      	str	r1, [r2, #0]
 8003d18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d1c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	fa92 f1a2 	rbit	r1, r2
 8003d26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d2a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d2e:	6011      	str	r1, [r2, #0]
  return result;
 8003d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d34:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d182      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d56:	4b88      	ldr	r3, [pc, #544]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	430b      	orrs	r3, r1
 8003d78:	497f      	ldr	r1, [pc, #508]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
 8003d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d82:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d90:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	fa93 f2a3 	rbit	r2, r3
 8003d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003da2:	601a      	str	r2, [r3, #0]
  return result;
 8003da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003db8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fc ff32 	bl	8000c2c <HAL_GetTick>
 8003dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	e009      	b.n	8003de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fc ff2d 	bl	8000c2c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e144      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003dea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	fa93 f2a3 	rbit	r2, r3
 8003dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e02:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003e06:	601a      	str	r2, [r3, #0]
  return result;
 8003e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe2c>
 8003e26:	4b54      	ldr	r3, [pc, #336]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	e027      	b.n	8003e7c <HAL_RCC_OscConfig+0xe7c>
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e56:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e64:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	fa93 f2a3 	rbit	r2, r3
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e80:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e8e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	fa92 f1a2 	rbit	r1, r2
 8003e98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e9c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003ea0:	6011      	str	r1, [r2, #0]
  return result;
 8003ea2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ea6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	fab2 f282 	clz	r2, r2
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	f042 0220 	orr.w	r2, r2, #32
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	f002 021f 	and.w	r2, r2, #31
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d082      	beq.n	8003dce <HAL_RCC_OscConfig+0xdce>
 8003ec8:	e0cf      	b.n	800406a <HAL_RCC_OscConfig+0x106a>
 8003eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ece:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ed2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003edc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fa93 f2a3 	rbit	r2, r3
 8003ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003eee:	601a      	str	r2, [r3, #0]
  return result;
 8003ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fc fe8c 	bl	8000c2c <HAL_GetTick>
 8003f14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	e009      	b.n	8003f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fc fe87 	bl	8000c2c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e09e      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f52:	601a      	str	r2, [r3, #0]
  return result;
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d104      	bne.n	8003f7c <HAL_RCC_OscConfig+0xf7c>
 8003f72:	4b01      	ldr	r3, [pc, #4]	@ (8003f78 <HAL_RCC_OscConfig+0xf78>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	e029      	b.n	8003fcc <HAL_RCC_OscConfig+0xfcc>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003faa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004078 <HAL_RCC_OscConfig+0x1078>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fd0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003fd4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003fd8:	6011      	str	r1, [r2, #0]
 8003fda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fde:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	fa92 f1a2 	rbit	r1, r2
 8003fe8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003ff0:	6011      	str	r1, [r2, #0]
  return result;
 8003ff2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ff6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	fab2 f282 	clz	r2, r2
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	f042 0220 	orr.w	r2, r2, #32
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	f002 021f 	and.w	r2, r2, #31
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f202 	lsl.w	r2, r1, r2
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d180      	bne.n	8003f1a <HAL_RCC_OscConfig+0xf1a>
 8004018:	e027      	b.n	800406a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e01e      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <HAL_RCC_OscConfig+0x1078>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800403a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	429a      	cmp	r2, r3
 800404c:	d10b      	bne.n	8004066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800404e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004052:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000

0800407c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b09e      	sub	sp, #120	@ 0x78
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e162      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b90      	ldr	r3, [pc, #576]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d910      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b8d      	ldr	r3, [pc, #564]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	498b      	ldr	r1, [pc, #556]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b89      	ldr	r3, [pc, #548]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e14a      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b82      	ldr	r3, [pc, #520]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	497f      	ldr	r1, [pc, #508]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80dc 	beq.w	80042a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d13c      	bne.n	8004172 <HAL_RCC_ClockConfig+0xf6>
 80040f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_ClockConfig+0xa6>
 800411c:	4b6f      	ldr	r3, [pc, #444]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e00f      	b.n	8004142 <HAL_RCC_ClockConfig+0xc6>
 8004122:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004126:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004130:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004134:	663b      	str	r3, [r7, #96]	@ 0x60
 8004136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800413e:	4b67      	ldr	r3, [pc, #412]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004146:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004148:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800414a:	fa92 f2a2 	rbit	r2, r2
 800414e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004150:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004152:	fab2 f282 	clz	r2, r2
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f002 021f 	and.w	r2, r2, #31
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d17b      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0f3      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d13c      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x178>
 800417a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800417e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x128>
 800419e:	4b4f      	ldr	r3, [pc, #316]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e00f      	b.n	80041c4 <HAL_RCC_ClockConfig+0x148>
 80041a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80041b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c0:	4b46      	ldr	r3, [pc, #280]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041cc:	fa92 f2a2 	rbit	r2, r2
 80041d0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80041d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13a      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b2      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
 80041f4:	2302      	movs	r3, #2
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_RCC_ClockConfig+0x1a0>
 8004216:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	e00d      	b.n	8004238 <HAL_RCC_ClockConfig+0x1bc>
 800421c:	2302      	movs	r3, #2
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24
 8004228:	2302      	movs	r3, #2
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	4b29      	ldr	r3, [pc, #164]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	2202      	movs	r2, #2
 800423a:	61ba      	str	r2, [r7, #24]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	617a      	str	r2, [r7, #20]
  return result;
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e079      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	491a      	ldr	r1, [pc, #104]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004278:	f7fc fcd8 	bl	8000c2c <HAL_GetTick>
 800427c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fc fcd4 	bl	8000c2c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e061      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <HAL_RCC_ClockConfig+0x260>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d214      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b08      	ldr	r3, [pc, #32]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 0207 	bic.w	r2, r3, #7
 80042be:	4906      	ldr	r1, [pc, #24]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <HAL_RCC_ClockConfig+0x25c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e040      	b.n	800435a <HAL_RCC_ClockConfig+0x2de>
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	491a      	ldr	r1, [pc, #104]	@ (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b16      	ldr	r3, [pc, #88]	@ (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4912      	ldr	r1, [pc, #72]	@ (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800431e:	f000 f829 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004322:	4601      	mov	r1, r0
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <HAL_RCC_ClockConfig+0x2e8>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800432c:	22f0      	movs	r2, #240	@ 0xf0
 800432e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	fa92 f2a2 	rbit	r2, r2
 8004336:	60fa      	str	r2, [r7, #12]
  return result;
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	fab2 f282 	clz	r2, r2
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	40d3      	lsrs	r3, r2
 8004342:	4a09      	ldr	r2, [pc, #36]	@ (8004368 <HAL_RCC_ClockConfig+0x2ec>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	fa21 f303 	lsr.w	r3, r1, r3
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <HAL_RCC_ClockConfig+0x2f0>)
 800434c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <HAL_RCC_ClockConfig+0x2f4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc fc26 	bl	8000ba4 <HAL_InitTick>
  
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3778      	adds	r7, #120	@ 0x78
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	08004cfc 	.word	0x08004cfc
 800436c:	20000000 	.word	0x20000000
 8004370:	20000004 	.word	0x20000004

08004374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800438e:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x94>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b04      	cmp	r3, #4
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x30>
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x36>
 80043a2:	e026      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043a4:	4b19      	ldr	r3, [pc, #100]	@ (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 80043a6:	613b      	str	r3, [r7, #16]
      break;
 80043a8:	e026      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	0c9b      	lsrs	r3, r3, #18
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	4a17      	ldr	r2, [pc, #92]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043b4:	5cd3      	ldrb	r3, [r2, r3]
 80043b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x94>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043d0:	4a0e      	ldr	r2, [pc, #56]	@ (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e004      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004418 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
      break;
 80043f0:	e002      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043f2:	4b06      	ldr	r3, [pc, #24]	@ (800440c <HAL_RCC_GetSysClockFreq+0x98>)
 80043f4:	613b      	str	r3, [r7, #16]
      break;
 80043f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f8:	693b      	ldr	r3, [r7, #16]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	007a1200 	.word	0x007a1200
 8004410:	08004d0c 	.word	0x08004d0c
 8004414:	08004d1c 	.word	0x08004d1c
 8004418:	003d0900 	.word	0x003d0900

0800441c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b092      	sub	sp, #72	@ 0x48
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80cd 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004440:	4b8e      	ldr	r3, [pc, #568]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10e      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444c:	4b8b      	ldr	r3, [pc, #556]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4a8a      	ldr	r2, [pc, #552]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004456:	61d3      	str	r3, [r2, #28]
 8004458:	4b88      	ldr	r3, [pc, #544]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b85      	ldr	r3, [pc, #532]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d118      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004476:	4b82      	ldr	r3, [pc, #520]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a81      	ldr	r2, [pc, #516]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004480:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fc fbd3 	bl	8000c2c <HAL_GetTick>
 8004486:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fc fbcf 	bl	8000c2c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b64      	cmp	r3, #100	@ 0x64
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0ea      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	4b78      	ldr	r3, [pc, #480]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044a8:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d07d      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d076      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044c6:	4b6d      	ldr	r3, [pc, #436]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044d4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	fa93 f3a3 	rbit	r3, r3
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80044de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e0:	fab3 f383 	clz	r3, r3
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b66      	ldr	r3, [pc, #408]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	461a      	mov	r2, r3
 80044f0:	2301      	movs	r3, #1
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	4b5d      	ldr	r3, [pc, #372]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	461a      	mov	r2, r3
 8004514:	2300      	movs	r3, #0
 8004516:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004518:	4a58      	ldr	r2, [pc, #352]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800451e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d045      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fc fb80 	bl	8000c2c <HAL_GetTick>
 800452c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	e00a      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fc fb7c 	bl	8000c2c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e095      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004546:	2302      	movs	r3, #2
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
 8004552:	2302      	movs	r3, #2
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	61fb      	str	r3, [r7, #28]
  return result;
 800455e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f043 0302 	orr.w	r3, r3, #2
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d102      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004574:	4b41      	ldr	r3, [pc, #260]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	e007      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800457a:	2302      	movs	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	4b3d      	ldr	r3, [pc, #244]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	2202      	movs	r2, #2
 800458c:	613a      	str	r2, [r7, #16]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	fa92 f2a2 	rbit	r2, r2
 8004594:	60fa      	str	r2, [r7, #12]
  return result;
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	f002 021f 	and.w	r2, r2, #31
 80045a8:	2101      	movs	r1, #1
 80045aa:	fa01 f202 	lsl.w	r2, r1, r2
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0bd      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80045b4:	4b31      	ldr	r3, [pc, #196]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	492e      	ldr	r1, [pc, #184]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4a2a      	ldr	r2, [pc, #168]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e6:	4b25      	ldr	r3, [pc, #148]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4922      	ldr	r1, [pc, #136]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004604:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	f023 0210 	bic.w	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	491a      	ldr	r1, [pc, #104]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	4313      	orrs	r3, r2
 8004614:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004622:	4b16      	ldr	r3, [pc, #88]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4913      	ldr	r1, [pc, #76]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	4313      	orrs	r3, r2
 8004632:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004640:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	490b      	ldr	r1, [pc, #44]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	4313      	orrs	r3, r2
 8004650:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800465e:	4b07      	ldr	r3, [pc, #28]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	4904      	ldr	r1, [pc, #16]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	4313      	orrs	r3, r2
 800466e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3748      	adds	r7, #72	@ 0x48
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	40007000 	.word	0x40007000
 8004684:	10908100 	.word	0x10908100

08004688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e049      	b.n	800472e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc f9a4 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 f954 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e038      	b.n	80047c2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	@ (80047d0 <HAL_TIM_Base_Start+0x98>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_TIM_Base_Start+0x48>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476a:	d009      	beq.n	8004780 <HAL_TIM_Base_Start+0x48>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a18      	ldr	r2, [pc, #96]	@ (80047d4 <HAL_TIM_Base_Start+0x9c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_Base_Start+0x48>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <HAL_TIM_Base_Start+0xa0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d115      	bne.n	80047ac <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <HAL_TIM_Base_Start+0xa4>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d015      	beq.n	80047be <HAL_TIM_Base_Start+0x86>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004798:	d011      	beq.n	80047be <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	e008      	b.n	80047be <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e000      	b.n	80047c0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	00010007 	.word	0x00010007

080047e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_ConfigClockSource+0x1c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0b6      	b.n	800496a <HAL_TIM_ConfigClockSource+0x18a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800481e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004838:	d03e      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0xd8>
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800483e:	f200 8087 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004846:	f000 8086 	beq.w	8004956 <HAL_TIM_ConfigClockSource+0x176>
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484e:	d87f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004850:	2b70      	cmp	r3, #112	@ 0x70
 8004852:	d01a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0xaa>
 8004854:	2b70      	cmp	r3, #112	@ 0x70
 8004856:	d87b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004858:	2b60      	cmp	r3, #96	@ 0x60
 800485a:	d050      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x11e>
 800485c:	2b60      	cmp	r3, #96	@ 0x60
 800485e:	d877      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004860:	2b50      	cmp	r3, #80	@ 0x50
 8004862:	d03c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xfe>
 8004864:	2b50      	cmp	r3, #80	@ 0x50
 8004866:	d873      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004868:	2b40      	cmp	r3, #64	@ 0x40
 800486a:	d058      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x13e>
 800486c:	2b40      	cmp	r3, #64	@ 0x40
 800486e:	d86f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004870:	2b30      	cmp	r3, #48	@ 0x30
 8004872:	d064      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 8004874:	2b30      	cmp	r3, #48	@ 0x30
 8004876:	d86b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d060      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d867      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d05a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x15e>
 8004888:	e062      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800489a:	f000 f969 	bl	8004b70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e04f      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c8:	f000 f952 	bl	8004b70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048da:	609a      	str	r2, [r3, #8]
      break;
 80048dc:	e03c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 f8c6 	bl	8004a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2150      	movs	r1, #80	@ 0x50
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f91f 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 80048fc:	e02c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	461a      	mov	r2, r3
 800490c:	f000 f8e5 	bl	8004ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2160      	movs	r1, #96	@ 0x60
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f90f 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 800491c:	e01c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	461a      	mov	r2, r3
 800492c:	f000 f8a6 	bl	8004a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2140      	movs	r1, #64	@ 0x40
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f8ff 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 800493c:	e00c      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 f8f6 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 800494e:	e003      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e000      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a38      	ldr	r2, [pc, #224]	@ (8004a68 <TIM_Base_SetConfig+0xf4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x28>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0x28>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a35      	ldr	r2, [pc, #212]	@ (8004a6c <TIM_Base_SetConfig+0xf8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d108      	bne.n	80049ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a68 <TIM_Base_SetConfig+0xf4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_Base_SetConfig+0x6a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049bc:	d00f      	beq.n	80049de <TIM_Base_SetConfig+0x6a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <TIM_Base_SetConfig+0xf8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_Base_SetConfig+0x6a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a29      	ldr	r2, [pc, #164]	@ (8004a70 <TIM_Base_SetConfig+0xfc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_Base_SetConfig+0x6a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a28      	ldr	r2, [pc, #160]	@ (8004a74 <TIM_Base_SetConfig+0x100>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_Base_SetConfig+0x6a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a27      	ldr	r2, [pc, #156]	@ (8004a78 <TIM_Base_SetConfig+0x104>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a14      	ldr	r2, [pc, #80]	@ (8004a68 <TIM_Base_SetConfig+0xf4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_Base_SetConfig+0xc0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <TIM_Base_SetConfig+0xfc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0xc0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <TIM_Base_SetConfig+0x100>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0xc0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	@ (8004a78 <TIM_Base_SetConfig+0x104>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d103      	bne.n	8004a3c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f023 0201 	bic.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	611a      	str	r2, [r3, #16]
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 030a 	bic.w	r3, r3, #10
 8004ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f023 0210 	bic.w	r2, r3, #16
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f043 0307 	orr.w	r3, r3, #7
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e054      	b.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a24      	ldr	r2, [pc, #144]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a17      	ldr	r2, [pc, #92]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c30:	d009      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a13      	ldr	r2, [pc, #76]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a11      	ldr	r2, [pc, #68]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10c      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40014000 	.word	0x40014000

08004c8c <memset>:
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <memset+0xa>
 8004c94:	4770      	bx	lr
 8004c96:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9a:	e7f9      	b.n	8004c90 <memset+0x4>

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8004cd8 <__libc_init_array+0x3c>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	@ (8004cdc <__libc_init_array+0x40>)
 8004cae:	4c0c      	ldr	r4, [pc, #48]	@ (8004ce0 <__libc_init_array+0x44>)
 8004cb0:	f000 f818 	bl	8004ce4 <_init>
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	2600      	movs	r6, #0
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08004d2c 	.word	0x08004d2c
 8004cd8:	08004d2c 	.word	0x08004d2c
 8004cdc:	08004d2c 	.word	0x08004d2c
 8004ce0:	08004d30 	.word	0x08004d30

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
